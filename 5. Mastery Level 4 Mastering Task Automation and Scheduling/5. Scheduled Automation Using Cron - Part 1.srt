1
00:00:00,300 --> 00:00:03,060
Hello you beautiful people and welcome to this video.

2
00:00:03,070 --> 00:00:08,040
We're going to take what you've learned about bash scripts in the last few videos and supercharge it

3
00:00:08,040 --> 00:00:11,640
by using Crohn to make those scripts run on a schedule.

4
00:00:11,640 --> 00:00:13,870
It's going to be super awesome.

5
00:00:13,920 --> 00:00:19,010
And over the next few videos you're going to make some bad scripts and schedule them to run automatically.

6
00:00:19,050 --> 00:00:24,060
And we're also going to top it off by showing you how you can schedule automatic backups of your files

7
00:00:24,540 --> 00:00:25,470
so epic right.

8
00:00:25,590 --> 00:00:30,570
So by the end of the next few videos you're going to be able to automate your workflow by scheduling

9
00:00:30,570 --> 00:00:33,330
your scripts to run where ever you want.

10
00:00:33,360 --> 00:00:37,720
And this really does open the doors to untold awesomeness going forward.

11
00:00:37,740 --> 00:00:40,460
So let's go ahead and jump right into it.

12
00:00:40,980 --> 00:00:45,630
OK so crumbed is a command line based program that is used to schedule tasks.

13
00:00:45,810 --> 00:00:49,970
Now Krumm gets its name from the Greek word Cronos which means time.

14
00:00:50,070 --> 00:00:54,320
In case you were wondering so Crohn actually has quite a good name for a scheduling program right now.

15
00:00:54,330 --> 00:01:00,300
Each user has what is known as a crutch tab which basically is just a text file and each cross-tab lists

16
00:01:00,300 --> 00:01:03,500
which commands or scripts will be run automatically by that user.

17
00:01:03,570 --> 00:01:08,910
And it also lists when they will be scheduled to be run now to edit the front of your user you just

18
00:01:08,940 --> 00:01:09,660
open a command.

19
00:01:09,690 --> 00:01:12,850
Open a terminal and type Krumm tab dash.

20
00:01:13,020 --> 00:01:17,760
And the option is for edits and when you open it you'll see that the tab begins to open.

21
00:01:17,880 --> 00:01:23,120
But if this is the first time the opening opens up it might ask you what editor you want to use.

22
00:01:23,130 --> 00:01:28,920
So we're going to press one for Nonno and press enter and we will see that now we've opened up from

23
00:01:28,920 --> 00:01:30,490
tab in nano.

24
00:01:30,520 --> 00:01:34,650
Now the first thing you'll notice is that there's a lot of text in here and this is a kind of introduction

25
00:01:34,920 --> 00:01:36,710
to how chrome tabs work.

26
00:01:36,720 --> 00:01:41,850
But these are commented lines and what I mean by that is they are not interpreted by the cross-tab as

27
00:01:41,850 --> 00:01:43,940
actual valuable information.

28
00:01:43,950 --> 00:01:49,200
And you can tell that because they start each line with a hash and that allows you know people to write

29
00:01:49,200 --> 00:01:54,720
what they want in a file like you know some notes but it's not interpreted by the actual by the actual

30
00:01:55,050 --> 00:01:56,430
cron utility.

31
00:01:56,490 --> 00:02:03,330
But down the bottom each Krumm tab is a Cantab is broken up into rows and one row is for each command

32
00:02:03,360 --> 00:02:07,720
or script that you want to schedule and each row will have six columns.

33
00:02:07,800 --> 00:02:14,130
So the first five columns are schedule information and the final sixth column is the command or script

34
00:02:14,130 --> 00:02:16,040
to be run at that scheduled time.

35
00:02:16,050 --> 00:02:18,690
So you need to get to the bottom and to enter your information.

36
00:02:18,730 --> 00:02:19,220
OK.

37
00:02:19,320 --> 00:02:23,460
Now this is really one of those things that's easier to be shown than explain.

38
00:02:23,460 --> 00:02:25,370
So let me show you how this works.

39
00:02:25,530 --> 00:02:30,960
So let's say that we want to run a command that just outputs the text Hello World to a file called Hello

40
00:02:30,960 --> 00:02:37,590
directx t on our desktop and we want that command to run every minute of every day all year round because

41
00:02:37,590 --> 00:02:39,970
for some reason we just really like saying hello.

42
00:02:40,050 --> 00:02:41,000
OK.

43
00:02:41,040 --> 00:02:44,850
So to make this happen we need to enter a new row in our Crohn top.

44
00:02:45,000 --> 00:02:50,910
And so here we are we're on a new row and there are six columns in that row each column being separated

45
00:02:51,120 --> 00:02:52,540
by some blank space.

46
00:02:52,590 --> 00:02:53,010
OK.

47
00:02:53,100 --> 00:02:54,900
So let's take it step by step.

48
00:02:55,080 --> 00:03:02,310
Now the first column of the row is for the for the minutes of the hour the you want the command to run

49
00:03:02,310 --> 00:03:02,960
on.

50
00:03:02,970 --> 00:03:07,830
So let's go to the first column and we could put any number we want in here as long as it's a valid

51
00:03:07,830 --> 00:03:10,100
minutes so we could type 15 for example.

52
00:03:10,130 --> 00:03:13,410
Now this would make the command run at 15 minutes past the hour.

53
00:03:13,440 --> 00:03:18,290
So things like 12 15 to 15 915 7:15 and so on.

54
00:03:18,300 --> 00:03:18,800
OK.

55
00:03:18,890 --> 00:03:24,540
Now the numbers for minutes can go from zero to 59 because that's what numbers for minutes do on a normal

56
00:03:24,540 --> 00:03:25,110
clock right.

57
00:03:25,130 --> 00:03:29,820
So they can go from 0 to 59 now because we want the command to run every minute.

58
00:03:29,820 --> 00:03:33,550
We'll just put a star in there to say run any minute.

59
00:03:33,640 --> 00:03:34,130
OK.

60
00:03:34,140 --> 00:03:36,880
No no this isn't exactly like a wild card.

61
00:03:36,900 --> 00:03:40,120
And the star happens to mean any in this case.

62
00:03:40,430 --> 00:03:46,290
But crosstabs don't really support other wild cards so don't put symbols such as question marks or you

63
00:03:46,290 --> 00:03:49,270
know the brackets in there because they won't work.

64
00:03:49,270 --> 00:03:49,650
OK.

65
00:03:49,680 --> 00:03:52,920
The star is only what's accepted and it just means any value.

66
00:03:52,920 --> 00:03:53,910
We don't really care.

67
00:03:54,000 --> 00:03:54,460
OK.

68
00:03:54,600 --> 00:04:01,710
So the first column is the minutes of the hour the next column is the our number and we could put numbers

69
00:04:01,710 --> 00:04:03,030
like for example 11.

70
00:04:03,180 --> 00:04:09,210
So this would make it the command or whatever we scheduled to only run at 11 a.m. each day.

71
00:04:09,420 --> 00:04:12,930
We could put 14 so that it would only run at 2 p.m. each day.

72
00:04:12,930 --> 00:04:20,070
Now the numbers here are based on a 24 hour clock and can go from 0 to 23 and we but we don't mind particularly

73
00:04:20,070 --> 00:04:23,910
what our command runs us which is put a star there as well.

74
00:04:23,910 --> 00:04:31,110
But if I put for example an 11 in the law in the hour column and a 20 minute column then our command

75
00:04:31,110 --> 00:04:33,770
would run at 11:20 a.m..

76
00:04:33,840 --> 00:04:39,570
So the first column is for the minutes and the second column is for the hours and by the way it doesn't

77
00:04:39,570 --> 00:04:43,710
really matter where we place these columns as long as there's some space between them.

78
00:04:43,710 --> 00:04:48,700
OK so we could like you know separate them out like that with more than one space but as long as there's

79
00:04:48,700 --> 00:04:53,940
some blank space in between each of the columns Crohn isn't too fussy about how about the half the stuff

80
00:04:53,940 --> 00:04:54,490
is laid out.

81
00:04:54,490 --> 00:04:57,660
So I mean just try to make it a bit clearer which column we're filling in here.

82
00:04:57,660 --> 00:05:02,360
So there's the first column is minute second column ours and so on I'm just going to kind of spread

83
00:05:02,360 --> 00:05:04,440
out our stuff a little bit here.

84
00:05:05,300 --> 00:05:10,710
So we got a bit of a nicer layout but we don't really care about the minute superstar there.

85
00:05:10,730 --> 00:05:12,320
We don't really care about the hours.

86
00:05:12,400 --> 00:05:14,100
So I put a star there too.

87
00:05:14,120 --> 00:05:17,180
Now the third column is the what we see here.

88
00:05:17,180 --> 00:05:19,970
DOMA is the day of the month.

89
00:05:20,030 --> 00:05:25,000
So if we put a one here then it would only run on the first day of the month.

90
00:05:25,100 --> 00:05:31,530
And so for example if we had a 20 in the minutes column and we had in the I was called we had an 11.

91
00:05:31,670 --> 00:05:38,510
And here we had a let's say 10 in the third column then this one of a command that we gave it would

92
00:05:38,540 --> 00:05:42,590
only run on the tenth day of the month at 11:20.

93
00:05:42,650 --> 00:05:46,320
OK but it would run all of the months of the year but only on the tenth day of the month.

94
00:05:46,340 --> 00:05:51,360
At 11:20 a.m. But again we don't really mind what day of the month so we'll put a star there.

95
00:05:51,400 --> 00:05:56,690
I will put a star in the other columns as well.

96
00:05:56,690 --> 00:05:57,120
There we go.

97
00:05:57,120 --> 00:05:59,700
So just let me lay this out a bit nicer.

98
00:05:59,840 --> 00:06:00,590
Ok cool.

99
00:06:00,770 --> 00:06:04,920
Now the fourth column is actually the month itself.

100
00:06:04,970 --> 00:06:07,800
Now in here we can put numbers so we could put one.

101
00:06:07,810 --> 00:06:13,160
Being January 12 being December and all the other months in between.

102
00:06:13,490 --> 00:06:15,590
But you could also do it using text.

103
00:06:15,590 --> 00:06:23,330
So for example in capital letters like John for January FEBE for February I could do may or D.C. for

104
00:06:23,330 --> 00:06:23,750
December.

105
00:06:23,750 --> 00:06:29,820
So three letter months can be used as well for the months if you write them in capital letters.

106
00:06:29,840 --> 00:06:34,140
But here we don't really care about the months or what is going to put a star as well.

107
00:06:34,250 --> 00:06:40,880
And so just to see how this is all coming together if we had 20 in the first column and we had in our

108
00:06:40,880 --> 00:06:44,340
column we had an 11 and in the day the month we had a 10.

109
00:06:44,480 --> 00:06:51,620
And in the month we had a you know J UN for June then this command would run on the 10th day of the

110
00:06:51,620 --> 00:06:52,940
month on the 10th.

111
00:06:52,940 --> 00:06:56,040
Sorry on the 10th of June at 11:20 a.m..

112
00:06:56,330 --> 00:06:56,780
OK.

113
00:06:56,930 --> 00:06:59,020
So that's that's how that works.

114
00:06:59,060 --> 00:07:02,030
We're going to replace them again with stores.

115
00:07:02,810 --> 00:07:03,560
OK.

116
00:07:03,560 --> 00:07:09,020
So as I say the cross-tab doesn't really care about the amount of space is just that each column is

117
00:07:09,020 --> 00:07:11,530
separated by at least one space.

118
00:07:11,540 --> 00:07:12,100
OK.

119
00:07:12,770 --> 00:07:18,110
So there we go the next column is the day of the week now the day of the week can have numbers from

120
00:07:18,110 --> 00:07:22,830
zero to six with zero being Sunday and six being Saturday.

121
00:07:22,940 --> 00:07:24,130
But as well you can do this.

122
00:07:24,130 --> 00:07:28,520
Doing text using three letters for each day of the week so you end would be Sunday.

123
00:07:28,520 --> 00:07:29,950
IMO it would be Monday.

124
00:07:29,960 --> 00:07:33,730
Th she would be Thursday and Saturday would be Saturday and so on.

125
00:07:33,800 --> 00:07:34,420
OK.

126
00:07:34,850 --> 00:07:43,400
So let's say if we had a Sunday in there and the month was June and the day of the month was 10 and

127
00:07:43,400 --> 00:07:53,660
then the hour was 11 and then the minute was 20 then this would run at 11:20 a.m. on the 10th of June.

128
00:07:53,690 --> 00:07:57,970
As long as the 10th of June on that year was a Sunday.

129
00:07:58,070 --> 00:07:58,550
OK.

130
00:07:58,550 --> 00:08:03,890
So you can see how you can become incredibly specific with how you schedule your commands to run but

131
00:08:03,890 --> 00:08:06,720
you can also be very general and very relaxed as well.

132
00:08:06,730 --> 00:08:09,940
The cross-tab the Trani utility is amazing for that kind of stuff.

133
00:08:09,940 --> 00:08:12,570
You can be very expressive with your scheduling.

134
00:08:12,740 --> 00:08:17,660
So there we go where we're going to set those back to store because we don't care what day of the week

135
00:08:17,660 --> 00:08:21,950
it is we want this on to run all day every minute.

136
00:08:22,040 --> 00:08:24,120
All year around so we don't really care.

137
00:08:24,170 --> 00:08:29,160
So those are the first five columns and these first five are scheduling information.

138
00:08:29,180 --> 00:08:29,780
OK.

139
00:08:29,780 --> 00:08:35,410
Now the final bit is actually where you tell it the command or script that you wanted to run.

140
00:08:35,570 --> 00:08:36,170
OK.

141
00:08:36,170 --> 00:08:39,800
So the sixth and final column is the command to actually run.

142
00:08:39,800 --> 00:08:45,490
Now we said that we want to command the output Hello World to a file called Hello directx T.

143
00:08:45,830 --> 00:08:47,190
Let's say on our desktop.

144
00:08:47,250 --> 00:08:48,820
OK so how would we write that.

145
00:08:49,060 --> 00:08:51,080
Well we might right echo.

146
00:08:51,260 --> 00:08:52,000
Okay then.

147
00:08:52,040 --> 00:08:53,810
Hello world.

148
00:08:53,810 --> 00:09:00,350
And then with a pen that is somewhere on our desktop a file called Hello Dottie XTi case if I just expand

149
00:09:00,350 --> 00:09:02,620
the window here you have to see it better there we go.

150
00:09:02,750 --> 00:09:07,390
So you can see here that we're just saying this is just the command basically echo Hello world.

151
00:09:07,580 --> 00:09:10,560
And put that on a funnel called haloed ATX take.

152
00:09:10,700 --> 00:09:14,630
But we are using the two arrows here to allow whenever this command runs.

153
00:09:14,630 --> 00:09:19,740
It will append to the file so we can see extra data being added each time the command runs.

154
00:09:19,740 --> 00:09:20,100
OK.

155
00:09:20,270 --> 00:09:26,450
So when we save the Krumm tab so crumble make sure that this command is now run at every minute of every

156
00:09:26,450 --> 00:09:31,050
hour of every day of the month for every month no matter the day of the week.

157
00:09:31,160 --> 00:09:35,240
So this command is going to run every minute all year round because if we press control an hour to save

158
00:09:35,240 --> 00:09:41,210
that file and I exit you can see here that we get a message saying that it's installing a new cross-tab

159
00:09:41,420 --> 00:09:47,150
and we can see here that Hello Dr. XTi has actually just been has just been executed.

160
00:09:47,140 --> 00:09:47,550
OK.

161
00:09:47,660 --> 00:09:50,890
So if we take a look at you can see that it actually just ran right.

162
00:09:50,900 --> 00:09:57,710
Then we can see that it's actually executed hello world and put it inside inside the inside the file.

163
00:09:57,710 --> 00:10:03,870
Now if I run the date command you can see the we've got about 40 seconds until this command runs again.

164
00:10:03,930 --> 00:10:08,530
So I'm going to do is I'm going to cut the video here and come back closer to the time when that runs.

165
00:10:08,660 --> 00:10:12,210
OK so here we are we can see that it's just gone as literally as I press day.

166
00:10:12,210 --> 00:10:12,950
That's awesome.

167
00:10:13,120 --> 00:10:19,260
It's just past the minute so if we look in there now we should see that we now have two rows of data

168
00:10:19,260 --> 00:10:20,160
so fingers crossed.

169
00:10:20,220 --> 00:10:21,000
Yes we do.

170
00:10:21,090 --> 00:10:28,130
We now have two rows of data in there because the the the current app has executed again.

171
00:10:28,170 --> 00:10:30,000
Right at the top of the hour.

172
00:10:30,130 --> 00:10:38,100
And and we'll just continue to wait until the next minute passes and it will continue to run that it

173
00:10:38,120 --> 00:10:45,760
will continue to run the command over and over and over again and fill up this Hello Dr. 65.

174
00:10:45,900 --> 00:10:46,390
OK.

175
00:10:46,620 --> 00:10:52,210
Now when when that actually runs we'll see that more data has been added.

176
00:10:52,260 --> 00:10:57,200
We've got about 18 seconds or so so if you can wait with me for like 18 seconds we'll see this happen

177
00:10:57,210 --> 00:10:57,700
OK.

178
00:10:57,870 --> 00:11:01,910
So let's see if we go we see another 11 seconds or so.

179
00:11:02,820 --> 00:11:08,760
And now if I if I check here now we can see that it's five seconds to go five seconds to go two seconds

180
00:11:08,760 --> 00:11:09,880
to go.

181
00:11:10,110 --> 00:11:11,180
It should have done it now.

182
00:11:11,180 --> 00:11:12,800
So if we look inside.

183
00:11:12,850 --> 00:11:13,200
Yes.

184
00:11:13,320 --> 00:11:17,930
It's run and it's added another row to the file and I didn't touch anything I promise.

185
00:11:18,270 --> 00:11:19,890
So the Akron tab is working.

186
00:11:19,890 --> 00:11:20,420
Hooray.

187
00:11:20,430 --> 00:11:23,700
OK we've just made it run a command over and over again.
