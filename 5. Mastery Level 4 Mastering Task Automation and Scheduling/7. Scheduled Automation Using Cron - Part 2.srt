1
00:00:00,510 --> 00:00:05,530
So let's take a look at our Cantab again this go from tab with the option and we've opened it up.

2
00:00:05,530 --> 00:00:09,860
It's remembered that nano is our editor and just so just in case you're interested.

3
00:00:10,050 --> 00:00:16,680
If you go on to your home directory and you look at your your all the files with stash and there's a

4
00:00:16,830 --> 00:00:24,640
hidden file here called selected editor and it's that file that stores your preference for for Ed..

5
00:00:24,660 --> 00:00:30,390
So in here if we look at DOT selected editor you can see you can change that if you want by putting

6
00:00:30,390 --> 00:00:33,490
the path to the editor that you want to have.

7
00:00:33,500 --> 00:00:39,060
Or alternatively you could just type the select at Edit command and it would give you the choice again.

8
00:00:39,070 --> 00:00:42,720
OK but I'm going to keep it to Nonno and leave it like that but that's how you wanted to change the

9
00:00:42,720 --> 00:00:45,500
editor later on maybe you get better with another command line editor.

10
00:00:45,630 --> 00:00:46,790
That's how you can change it.

11
00:00:46,860 --> 00:00:47,250
OK.

12
00:00:47,370 --> 00:00:49,920
So let's go on cross-tab dash.

13
00:00:50,730 --> 00:00:56,010
And now what we're going to do is we're going to look at some more advanced options more advanced ways

14
00:00:56,010 --> 00:00:57,370
that you can do some scheduling.

15
00:00:57,410 --> 00:01:02,370
OK we can add as many rows as we like in this country and they will work exactly the same song and make

16
00:01:02,370 --> 00:01:06,410
a new row and look at some more advanced scheduling opportunities.

17
00:01:06,600 --> 00:01:14,200
So for example let's say I want to run something exactly at the hour and 15 30 and 45 minutes past.

18
00:01:14,250 --> 00:01:14,700
OK.

19
00:01:14,700 --> 00:01:20,760
So I don't just have to have one option here I can have zero comma 15 comma 30 45 that's going to be

20
00:01:20,760 --> 00:01:21,550
my first column.

21
00:01:21,570 --> 00:01:21,960
Right.

22
00:01:22,110 --> 00:01:27,510
So this is going to be the minutes I can have a zero past 15 minutes past 30 minutes past and 45 minutes

23
00:01:27,510 --> 00:01:28,020
passed.

24
00:01:28,020 --> 00:01:33,700
Notice how I've got commas but no space is not left of any spaces because spaces separate the columns.

25
00:01:33,720 --> 00:01:34,160
OK.

26
00:01:34,380 --> 00:01:40,350
So that would be like my first my first column could you know then space this stuff over.

27
00:01:40,350 --> 00:01:48,420
So I got a bit more space and now I could say OK run it and every hour every day of the month every

28
00:01:48,420 --> 00:01:49,480
month.

29
00:01:49,670 --> 00:01:50,270
Of the week.

30
00:01:50,280 --> 00:01:55,080
And then whatever command I wanted to happen here says something like you know Hello Echo hello for

31
00:01:55,080 --> 00:02:02,130
example and this would run at exactly as the hour turned and 15 minutes past the hour.

32
00:02:02,130 --> 00:02:03,370
Thirty minutes past the hour.

33
00:02:03,420 --> 00:02:06,160
Forty five minutes past the hour a quarter to the hour.

34
00:02:06,220 --> 00:02:06,670
OK.

35
00:02:06,870 --> 00:02:11,530
Or I could just say more simply run every 15 minutes and the way I do that is Star.

36
00:02:11,840 --> 00:02:13,070
Then a slash 15.

37
00:02:13,140 --> 00:02:13,630
OK.

38
00:02:13,770 --> 00:02:19,710
Now that says run every 15 minutes I can say one every five minutes by Star slash five or every three

39
00:02:19,710 --> 00:02:24,540
minutes star slash three every seven minutes star slash seven OK all stars lost 15.

40
00:02:24,540 --> 00:02:26,950
Like I said for every 15 minutes.

41
00:02:27,110 --> 00:02:32,250
What about a run every 15 minutes every three days let's say.

42
00:02:32,250 --> 00:02:38,310
So what I do is I'd keep the hours the same and I'd go to the days of the month option and do star slash

43
00:02:38,310 --> 00:02:38,800
three.

44
00:02:39,030 --> 00:02:39,920
OK now.

45
00:02:39,970 --> 00:02:45,300
So every three days so let's say on the first of the month the fourth of the month the seventh of the

46
00:02:45,300 --> 00:02:49,130
month and so on on those days it'll run every 15 minutes.

47
00:02:49,170 --> 00:02:49,660
OK.

48
00:02:49,740 --> 00:02:51,510
So you can see how this kind of works here.

49
00:02:51,540 --> 00:03:00,980
What if I wanted the command to run once a week at 23 59 on a Sunday only in December and January 23

50
00:03:01,000 --> 00:03:04,230
59 on a Sunday but only in December and January.

51
00:03:04,250 --> 00:03:05,040
Well do we do that.

52
00:03:05,040 --> 00:03:06,010
Let's make another row.

53
00:03:06,120 --> 00:03:12,320
We'd say let's say 23 59 so 59 is the minute the hour is going to be 23.

54
00:03:12,360 --> 00:03:17,870
It doesn't matter which day of the month it doesn't really actually that the month it does my only Januarys

55
00:03:17,940 --> 00:03:21,810
and December so generous in December's day of the week only Sundays.

56
00:03:21,990 --> 00:03:25,230
OK and we can say because we can.

57
00:03:25,230 --> 00:03:25,630
OK.

58
00:03:25,800 --> 00:03:31,300
So there we are now what we've got twenty three fifty nine every day.

59
00:03:31,710 --> 00:03:37,330
So what this is going to do Tony 3:59 injured in January in December but only on Sundays.

60
00:03:37,460 --> 00:03:43,050
So there we are and he's going to echo because we can for example now there's a great Web site called

61
00:03:43,050 --> 00:03:45,640
Crohn tab dot guru.

62
00:03:46,200 --> 00:03:51,390
OK that you can take a look at and play around with to see what different cross-tab expressions mean.

63
00:03:51,390 --> 00:03:53,580
And I'll put a link to it in the resources section.

64
00:03:53,570 --> 00:03:54,120
It's awesome.

65
00:03:54,120 --> 00:03:54,630
OK.

66
00:03:55,050 --> 00:04:00,660
But a great use of chrom is to schedule automated backups of the file system.

67
00:04:00,720 --> 00:04:06,810
So let's say we want to run weekly backups every Friday at 23 59 for every month of the year.

68
00:04:06,960 --> 00:04:11,230
So if I delete these these examples here it is.

69
00:04:11,310 --> 00:04:15,490
So 23 59 on Fridays for every month of the year.

70
00:04:15,570 --> 00:04:19,950
So we know that 59 is the minute we know the hour is 23.

71
00:04:19,950 --> 00:04:23,520
It doesn't matter the day of the month like numerically it doesn't matter whether it's the first or

72
00:04:23,520 --> 00:04:23,970
the seventh.

73
00:04:23,970 --> 00:04:28,000
Just every Friday and every month of the year but only on Fridays.

74
00:04:28,260 --> 00:04:31,580
And then we'd put the command which is going to back up our stuff.

75
00:04:31,740 --> 00:04:33,130
OK.

76
00:04:33,150 --> 00:04:35,240
And you know that's how it would work.

77
00:04:35,280 --> 00:04:39,170
And we know how to do this because we can make a script for it.

78
00:04:39,330 --> 00:04:39,740
OK.

79
00:04:39,900 --> 00:04:43,510
So let's save our cross-tab so far just like that.

80
00:04:43,800 --> 00:04:46,880
And do you because it's Roche rifleman's lines but if I actually look just by the way what we've been

81
00:04:46,970 --> 00:04:52,890
noticing that if I look in haloed ATX t you see we've got so many more of Hello worlds being edited

82
00:04:53,010 --> 00:04:57,460
that as Accaron command that we set before has been continuing to run.

83
00:04:57,480 --> 00:04:58,400
That's really cool.

84
00:04:58,420 --> 00:05:02,680
It's automated and it's running in the background.

85
00:05:02,680 --> 00:05:03,060
All right.

86
00:05:03,060 --> 00:05:05,690
So let's set up the script that we want to run.

87
00:05:05,690 --> 00:05:10,510
Now you remember in the last few videos when I was telling you about bash scripts we made a folder called

88
00:05:10,510 --> 00:05:15,880
bin and inside that bin folder is where we started putting our scripts and we had this one file called

89
00:05:15,880 --> 00:05:16,770
backup.

90
00:05:16,780 --> 00:05:19,730
Let's take a look inside that backup script again.

91
00:05:20,030 --> 00:05:26,770
Well in here what it does is it compresses into aana into a archive on our desktop and every single

92
00:05:26,770 --> 00:05:32,740
one of the contents of our documents downloads desktops pictures and videos folders and it also outputs

93
00:05:32,740 --> 00:05:40,450
some the error like the standard error Lovi the log messages that come from the command into the bit

94
00:05:40,450 --> 00:05:40,950
bucket.

95
00:05:40,950 --> 00:05:43,480
So they just sent it to to the void.

96
00:05:43,480 --> 00:05:45,220
They then no longer print to the screen.

97
00:05:45,220 --> 00:05:45,600
OK.

98
00:05:45,790 --> 00:05:49,460
So this is good this is this is going to do a backup for us.

99
00:05:49,540 --> 00:05:55,900
Let's say that actually instead of sending them to the desktop let's say that in our in our home directory

100
00:05:55,930 --> 00:06:00,340
let's say let's say we made a directory called backups.

101
00:06:00,670 --> 00:06:02,070
OK we got about that wrong.

102
00:06:02,160 --> 00:06:08,120
So if I rename back ups to two houses into just backups with one S..

103
00:06:08,560 --> 00:06:08,940
There we go.

104
00:06:08,950 --> 00:06:10,370
We've now got a folder called backups.

105
00:06:10,360 --> 00:06:10,780
OK.

106
00:06:10,910 --> 00:06:14,270
And let's say we wanted to save the backups in there.

107
00:06:14,410 --> 00:06:25,930
So if we go to the bin folder and we add a backup script now we can say OK go into our desktop go to

108
00:06:25,930 --> 00:06:31,170
our backups folder OK and then save the backup dock.

109
00:06:31,210 --> 00:06:31,810
Geez.

110
00:06:31,920 --> 00:06:33,010
OK that's good.

111
00:06:33,010 --> 00:06:34,460
And that's good for that.

112
00:06:34,570 --> 00:06:42,070
But what we want as well is we want to also log the date and time that the backup was created into a

113
00:06:42,070 --> 00:06:43,090
log file.

114
00:06:43,090 --> 00:06:48,910
Now the way that we can do that is we could use the date command and we could append that data to a

115
00:06:48,910 --> 00:06:54,770
file in our backups folder called let's say backup backups don't log.

116
00:06:54,850 --> 00:07:00,760
Why don't we say that case we're going to call it backups doc log and that's just going to keep in there

117
00:07:01,590 --> 00:07:04,710
the date and time that the last block happened.

118
00:07:04,750 --> 00:07:08,710
OK so if we save that actually we could we could make it a bit more advanced.

119
00:07:08,860 --> 00:07:10,220
We could actually.

120
00:07:10,300 --> 00:07:11,430
Let's leave it like that.

121
00:07:11,800 --> 00:07:13,750
Let's not make this any more complicated than it needs to be.

122
00:07:13,750 --> 00:07:14,080
OK.

123
00:07:14,260 --> 00:07:19,000
So we're going to take that data and we're going to append it to our backups not log file and you can

124
00:07:19,000 --> 00:07:23,380
see here that I'm using the double arrows to make sure that as the script runs each time it's going

125
00:07:23,380 --> 00:07:25,200
to it's going to add it.

126
00:07:25,200 --> 00:07:27,030
So the fall gets longer as time goes on.

127
00:07:27,080 --> 00:07:30,500
OK so we've now got this script that we wanted to run.

128
00:07:30,610 --> 00:07:33,370
And if we've run it just we just want it back up from anywhere.

129
00:07:33,380 --> 00:07:40,890
If we run back up you can see that now if I just put this back to a normal size if we go into our backups

130
00:07:40,900 --> 00:07:43,690
folder we've now got backups tautologies.

131
00:07:43,720 --> 00:07:49,430
And we've also got this backups doc log fiber with that with Nonno backups don't log.

132
00:07:49,450 --> 00:07:51,380
You can see that it's logged the day in time.

133
00:07:51,380 --> 00:07:56,520
OK so if I just remove remove everything in here using Ahram you can see they've all disappeared.

134
00:07:56,590 --> 00:07:56,800
OK.

135
00:07:56,800 --> 00:07:57,390
So good.

136
00:07:57,400 --> 00:07:58,950
We know that script works.

137
00:07:58,960 --> 00:08:01,290
Let's try and add it to our crumb tab.

138
00:08:01,420 --> 00:08:01,800
OK.

139
00:08:01,960 --> 00:08:06,170
So here we are we've said that we want every Friday at 23:15 and we want that.

140
00:08:06,280 --> 00:08:07,590
We want that script to run.

141
00:08:07,600 --> 00:08:08,750
So how can we do that.

142
00:08:09,040 --> 00:08:13,690
Well the way we can run that is because it's a bash script we'll type the background so just bash like

143
00:08:13,690 --> 00:08:16,940
that and then we'll give it the path to the script that we want to run.

144
00:08:16,990 --> 00:08:22,840
So in our home directory in the bin folder we're going to run the backup script.

145
00:08:22,960 --> 00:08:26,560
So that's all we've got to do right we just type bash and then give it the path to the script that we

146
00:08:26,560 --> 00:08:31,000
want to run and then that script will now run at 23 59 on a Friday.

147
00:08:31,120 --> 00:08:34,310
But to save you waiting all the way to 23:15 on on next right.

148
00:08:34,480 --> 00:08:37,140
Let's go ahead make this run every minute so we can watch it happen again.

149
00:08:37,180 --> 00:08:38,190
So look what I'm going to do.

150
00:08:38,200 --> 00:08:38,680
Nice.

151
00:08:38,750 --> 00:08:43,080
Haycock I guess I'm going to cut the line and uncut the line and then cut the line again.

152
00:08:43,110 --> 00:08:44,430
That's a nice copy and paste.

153
00:08:44,590 --> 00:08:46,570
And I'm going to make this run every minute.

154
00:08:46,660 --> 00:08:46,890
OK.

155
00:08:46,900 --> 00:08:53,720
So if we're ever going to change all of these stars K that we go.

156
00:08:53,720 --> 00:09:00,140
Now that should run every minute now if I write the file and close it you can see it's installed the

157
00:09:00,130 --> 00:09:02,180
new crop top now in backups.

158
00:09:02,180 --> 00:09:07,580
There's nothing in here but if I look at the date we can see that we've got about 40 seconds until this

159
00:09:07,580 --> 00:09:10,280
runs again makes me very excited I'm sure.

160
00:09:10,280 --> 00:09:15,290
So we've got about 30 seconds so I'm going to cut the video here and come back close to the time.

161
00:09:16,320 --> 00:09:19,860
So we always take a look and it's just gone past the minute.

162
00:09:19,870 --> 00:09:25,410
So let's take a look at our backhoes folder and hooray we have indeed run our script correctly and if

163
00:09:25,410 --> 00:09:34,710
we look inside the log folder if we look at backups top log we can see that it ran at just past the

164
00:09:34,710 --> 00:09:36,210
third minute of today.

165
00:09:36,210 --> 00:09:42,930
So the reason it runs at just the minute past it's just a like like you know there's just one second

166
00:09:42,930 --> 00:09:43,180
error.

167
00:09:43,200 --> 00:09:45,590
I think it's just a clock thing.

168
00:09:45,750 --> 00:09:50,820
It's you know the computer can only process things at a certain time resolution and one second is really

169
00:09:50,820 --> 00:09:53,000
not that much of a bad error.

170
00:09:53,020 --> 00:09:53,430
OK.

171
00:09:53,640 --> 00:09:56,070
So it'll be you'll tend to see things like this.

172
00:09:56,070 --> 00:10:01,740
I think it actually does run at exactly the time the minute goes but the date command takes just about

173
00:10:01,740 --> 00:10:04,780
a second or so to run or something like that so it has a slight delay.

174
00:10:04,890 --> 00:10:07,060
But really one second is not bad at all.

175
00:10:07,140 --> 00:10:11,640
So now we have indeed ran X-amount and look where it might it might even happen again.

176
00:10:11,730 --> 00:10:12,880
It might even happen again.

177
00:10:13,080 --> 00:10:17,280
So if we wait four more seconds one more second.

178
00:10:17,640 --> 00:10:18,650
Yes.

179
00:10:18,690 --> 00:10:26,210
Now we look inside our backups dot log backups dot log will see that another one is run again just one

180
00:10:26,220 --> 00:10:27,540
second past the fourth minute.

181
00:10:27,540 --> 00:10:31,180
So now we are making backups every single minute.

182
00:10:31,230 --> 00:10:35,970
But that might be a bit of a bit of a bit of a burden on our computer here.

183
00:10:35,970 --> 00:10:40,830
So let's just go ahead control K to delete the line and then we can save our job and leave it so that

184
00:10:40,830 --> 00:10:44,450
it just runs at 20 3:59 on Fridays.

185
00:10:44,460 --> 00:10:49,280
So there you are guys how awesome and how epic is that.

186
00:10:50,950 --> 00:10:56,750
Some show you can see the power of combining together bash scripts and Crohn scheduling to control what

187
00:10:56,810 --> 00:10:59,250
ever you want about your computer.

188
00:10:59,250 --> 00:11:03,050
Now these two skills together are incredibly powerful combination.

189
00:11:03,150 --> 00:11:06,220
And you now have the foundation in how they work.

190
00:11:06,240 --> 00:11:08,910
So let's have a quick recap of what we've learned in this video.

191
00:11:08,910 --> 00:11:14,460
So in this video you took a look at how to use Chrome to schedule when commands and scripts should be

192
00:11:14,460 --> 00:11:19,830
run and you learn that every user has what is known as a crosstab and then you can edit Krumm tabs using

193
00:11:19,830 --> 00:11:26,880
the crosstab command with the option with the standing for edit Now types a text files that are broken

194
00:11:26,880 --> 00:11:32,640
up into many rows and you can have as many rows as you like and each command or script has its own row

195
00:11:32,850 --> 00:11:35,520
and each row has six columns.

196
00:11:35,520 --> 00:11:40,440
The first five columns are scheduling information and the sixth and final column details which comando

197
00:11:40,440 --> 00:11:42,990
script should be run at that scheduled time.

198
00:11:42,990 --> 00:11:48,070
So the columns are for that for the scheduling columns you've got the minutes of the hour.

199
00:11:48,210 --> 00:11:54,880
So for example if you put 15 in the column the commom would only run at the 15 minute of each hour.

200
00:11:54,990 --> 00:12:01,490
So it's things like 11:15 215 315 and so on that then you've got the hour itself.

201
00:12:01,490 --> 00:12:04,930
So that's a number that you can put in 24 hour clock time.

202
00:12:04,950 --> 00:12:09,590
So from 0 to 23 you've got then the third day of the column is the day of the month.

203
00:12:09,600 --> 00:12:12,340
So again from one to the end of the month whatever that might be.

204
00:12:12,420 --> 00:12:13,800
The fourth column is the month.

205
00:12:13,800 --> 00:12:17,300
So that could be numbers with one being January and 12 being December.

206
00:12:17,310 --> 00:12:23,630
Or you could just type in capital letters the three letter version of the month so J.N. for January

207
00:12:23,630 --> 00:12:28,080
DC for December and so on and the fifth column is the day of the week.

208
00:12:28,080 --> 00:12:35,110
So that could be zero to six with zero being Sunday and 6 being Saturday also and to 7 a Sunday.

209
00:12:35,120 --> 00:12:41,150
Again if you wanted but a good way to do it is just to enter the day names.

210
00:12:41,340 --> 00:12:45,680
So and being Monday SE1 being Sunday is a three letter day names.

211
00:12:45,680 --> 00:12:46,110
OK.

212
00:12:46,350 --> 00:12:49,750
And you also saw some advanced ways to schedule this stuff as well.

213
00:12:49,830 --> 00:12:55,710
And a great place to look at these these scheduling things is to look at a Web site called cross-tab

214
00:12:56,010 --> 00:13:02,400
dot guru I'll put a link to that in the resources section because it's a great Web site for you to practice

215
00:13:02,850 --> 00:13:08,460
setting up these scheduling conditions and it also will become useful for you at some point in the future.

216
00:13:08,490 --> 00:13:13,000
And as I should mention what columns can be separated by as many spaces as you like or Crohn ones is

217
00:13:12,990 --> 00:13:15,360
that you separate each column by at least one space.

218
00:13:15,450 --> 00:13:18,460
But feel free to format each rows however you'd like.

219
00:13:18,540 --> 00:13:19,030
OK.

220
00:13:19,200 --> 00:13:24,480
And you also saw in this video how to use Chrome tabs and bash scripts to schedule automated backups

221
00:13:24,720 --> 00:13:29,490
of your home directory which is an incredibly useful thing to make sure that all your files stay safe

222
00:13:29,490 --> 00:13:33,760
and built upon what you learned in the last section about file compression and archiving.

223
00:13:33,780 --> 00:13:35,390
That's super awesome as well.

224
00:13:35,400 --> 00:13:39,750
Now the key thing that I want you to remember from the last two videos is that in Linux practically

225
00:13:39,810 --> 00:13:42,200
anything can be edited using the command line.

226
00:13:42,210 --> 00:13:46,980
Now since you can write bash scripts to execute these commands in a controlled sequence and then use

227
00:13:47,100 --> 00:13:52,770
cron to schedule when the script should be run you have the necessary toolkit to do what ever you want

228
00:13:52,770 --> 00:13:57,650
on your system whenever you want to do it which is a crazily powerful combination.

229
00:13:57,660 --> 00:14:01,090
All you need now is a bit of imagination to decide what you might like to do.

230
00:14:01,230 --> 00:14:06,750
Now bash scripts are a whole massive topic in and of themselves so we only really had time to scratch

231
00:14:06,750 --> 00:14:11,550
the surface and cover just a small bit of what they can do in this course but at least now you have

232
00:14:11,550 --> 00:14:15,160
an understanding of what bad scripts are how they work and where you might use them.

233
00:14:15,210 --> 00:14:20,220
And if you'd like me to create a specialized course on just bash scripts and then send me a message

234
00:14:20,250 --> 00:14:23,640
and if I get enough of you saying that you want that then you know I can I can potentially put that

235
00:14:23,640 --> 00:14:24,470
together for you.

236
00:14:24,690 --> 00:14:29,400
But for what we've learned in this course so far I want to make sure you get some practice in using

237
00:14:29,400 --> 00:14:29,710
it.

238
00:14:29,730 --> 00:14:33,940
So in the next video you're going to be getting the brief for your next project assignment.

239
00:14:34,060 --> 00:14:38,730
Now will be a rather simple and fun one this time to allow you to go off and try writing bash scripts

240
00:14:38,760 --> 00:14:43,170
and crunch apps for yourself so you can get a hands on understanding of how these incredibly powerful

241
00:14:43,170 --> 00:14:44,280
skills work.

242
00:14:44,280 --> 00:14:47,940
So for the brief of your next assignment I'll see you in the next video.
