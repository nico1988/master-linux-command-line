1
00:00:00,510 --> 00:00:05,530
让我们再看看我们的Cantab，这个带有选项的选项卡，我们已经打开了它。
So let's take a look at our Cantab again this go from tab with the option and we've opened it up.

2
00:00:05,530 --> 00:00:09,860
记住Nano是我们的编辑，如果你感兴趣的话。
It's remembered that nano is our editor and just so just in case you're interested.

3
00:00:10,050 --> 00:00:16,680
如果您转到您的主目录，并查看您的所有带有Stash的文件，则会有一个
If you go on to your home directory and you look at your your all the files with stash and there's a

4
00:00:16,830 --> 00:00:24,640
隐藏文件在这里称为选定编辑器，该文件存储了您对ED的首选项。
hidden file here called selected editor and it's that file that stores your preference for for Ed..

5
00:00:24,660 --> 00:00:30,390
在这里，如果我们查看DOT选择的编辑器，您可以看到，如果您愿意，可以通过以下方式进行更改
So in here if we look at DOT selected editor you can see you can change that if you want by putting

6
00:00:30,390 --> 00:00:33,490
您希望拥有的编辑器的路径。
the path to the editor that you want to have.

7
00:00:33,500 --> 00:00:39,060
或者，您也可以只键入SELECT at Edit命令，它会让您再次进行选择。
Or alternatively you could just type the select at Edit command and it would give you the choice again.

8
00:00:39,070 --> 00:00:42,720
好的，但是我会将它保留为Nonno，然后让它保持原样，但这就是您想要更改的
OK but I'm going to keep it to Nonno and leave it like that but that's how you wanted to change the

9
00:00:42,720 --> 00:00:45,500
编辑器稍后您可能会用另一个命令行编辑器做得更好。
editor later on maybe you get better with another command line editor.

10
00:00:45,630 --> 00:00:46,790
这就是你可以改变它的方式。
That's how you can change it.

11
00:00:46,860 --> 00:00:47,250
好的。
OK.

12
00:00:47,370 --> 00:00:49,920
所以让我们来做个十字冲刺吧。
So let's go on cross-tab dash.

13
00:00:50,730 --> 00:00:56,010
现在我们要做的是，我们要看一些更高级的选项，更高级的方式
And now what we're going to do is we're going to look at some more advanced options more advanced ways

14
00:00:56,010 --> 00:00:57,370
你可以做一些日程安排。
that you can do some scheduling.

15
00:00:57,410 --> 00:01:02,370
好的，我们可以在这个国家想加多少行就加多少行，他们会唱完全一样的歌，并制作
OK we can add as many rows as we like in this country and they will work exactly the same song and make

16
00:01:02,370 --> 00:01:06,410
新的一行，并查看一些更高级的日程安排机会。
a new row and look at some more advanced scheduling opportunities.

17
00:01:06,600 --> 00:01:14,200
例如，假设我想要精确地在15、30和45分钟后的1小时运行某项操作。
So for example let's say I want to run something exactly at the hour and 15 30 and 45 minutes past.

18
00:01:14,250 --> 00:01:14,700
好的。
OK.

19
00:01:14,700 --> 00:01:20,760
所以我在这里不一定只有一个选项，我可以有零个逗号15逗号30 45，这将是
So I don't just have to have one option here I can have zero comma 15 comma 30 45 that's going to be

20
00:01:20,760 --> 00:01:21,550
我的第一个专栏。
my first column.

21
00:01:21,570 --> 00:01:21,960
正确的。
Right.

22
00:01:22,110 --> 00:01:27,510
所以这将是我可以得到的零点半15分30分45分的时间
So this is going to be the minutes I can have a zero past 15 minutes past 30 minutes past and 45 minutes

23
00:01:27,510 --> 00:01:28,020
通过了。
passed.

24
00:01:28,020 --> 00:01:33,700
注意我是如何使用逗号的，但是没有空格，没有任何空格，因为空格将列分隔开。
Notice how I've got commas but no space is not left of any spaces because spaces separate the columns.

25
00:01:33,720 --> 00:01:34,160
好的。
OK.

26
00:01:34,380 --> 00:01:40,350
这就像我的第一个专栏，你知道，然后把这些东西隔开。
So that would be like my first my first column could you know then space this stuff over.

27
00:01:40,350 --> 00:01:48,420
所以我有了更多的空间，现在我可以说，好的，运行它，每个月的每一天，每一天的每一个小时
So I got a bit more space and now I could say OK run it and every hour every day of the month every

28
00:01:48,420 --> 00:01:49,480
月份。
month.

29
00:01:49,670 --> 00:01:50,270
这周最棒的。
Of the week.

30
00:01:50,280 --> 00:01:55,080
然后，无论我想要在这里执行什么命令，都会说一些类似于您知道，你好，回声，你好，为了什么
And then whatever command I wanted to happen here says something like you know Hello Echo hello for

31
00:01:55,080 --> 00:02:02,130
例如，这将完全按照小时运行，并在该小时过后15分钟运行。
example and this would run at exactly as the hour turned and 15 minutes past the hour.

32
00:02:02,130 --> 00:02:03,370
整点过30分钟。
Thirty minutes past the hour.

33
00:02:03,420 --> 00:02:06,160
每小时四十五分差一刻钟。
Forty five minutes past the hour a quarter to the hour.

34
00:02:06,220 --> 00:02:06,670
好的。
OK.

35
00:02:06,870 --> 00:02:11,530
或者我可以更简单地说，每15分钟跑一次，我这样做的方式是明星。
Or I could just say more simply run every 15 minutes and the way I do that is Star.

36
00:02:11,840 --> 00:02:13,070
再来一杯劈开15。
Then a slash 15.

37
00:02:13,140 --> 00:02:13,630
好的。
OK.

38
00:02:13,770 --> 00:02:19,710
现在说的是每15分钟跑一趟，我可以说明星劈开每五分钟开一趟，或者每三分钟开一趟。
Now that says run every 15 minutes I can say one every five minutes by Star slash five or every three

39
00:02:19,710 --> 00:02:24,540
分钟明星劈开每7分钟明星3个，明星劈开7个可以，全明星输了15个。
minutes star slash three every seven minutes star slash seven OK all stars lost 15.

40
00:02:24,540 --> 00:02:26,950
就像我说的每15分钟。
Like I said for every 15 minutes.

41
00:02:27,110 --> 00:02:32,250
比方说每三天每15分钟跑一次怎么样？
What about a run every 15 minutes every three days let's say.

42
00:02:32,250 --> 00:02:38,310
所以我要做的是，我会保持时间不变，我会选择每月的几天，做劈开明星
So what I do is I'd keep the hours the same and I'd go to the days of the month option and do star slash

43
00:02:38,310 --> 00:02:38,800
三。
three.

44
00:02:39,030 --> 00:02:39,920
现在好了。
OK now.

45
00:02:39,970 --> 00:02:45,300
所以每隔三天，假设是在这个月的第一天，这个月的第四个月，第七个月
So every three days so let's say on the first of the month the fourth of the month the seventh of the

46
00:02:45,300 --> 00:02:49,130
每个月，以此类推，在那些日子里，它将每15分钟运行一次。
month and so on on those days it'll run every 15 minutes.

47
00:02:49,170 --> 00:02:49,660
好的。
OK.

48
00:02:49,740 --> 00:02:51,510
所以你可以看到这种方式在这里是如何运作的。
So you can see how this kind of works here.

49
00:02:51,540 --> 00:03:00,980
如果我希望该命令仅在12月和1月23日的周日23：59每周运行一次，该怎么办
What if I wanted the command to run once a week at 23 59 on a Sunday only in December and January 23

50
00:03:01,000 --> 00:03:04,230
周日59岁，但只在12月和1月。
59 on a Sunday but only in December and January.

51
00:03:04,250 --> 00:03:05,040
我们做得很好。
Well do we do that.

52
00:03:05,040 --> 00:03:06,010
我们再排一排吧。
Let's make another row.

53
00:03:06,120 --> 00:03:12,320
我们假设23，59，所以59是一分钟，一小时将是23。
We'd say let's say 23 59 so 59 is the minute the hour is going to be 23.

54
00:03:12,360 --> 00:03:17,870
不要紧的是一个月中的哪一天，实际上并不是说我唯一的一月是哪一个月。
It doesn't matter which day of the month it doesn't really actually that the month it does my only Januarys

55
00:03:17,940 --> 00:03:21,810
而十二月是如此慷慨，在一周中的每一天，只有星期天。
and December so generous in December's day of the week only Sundays.

56
00:03:21,990 --> 00:03:25,230
好的，我们可以说，因为我们可以。
OK and we can say because we can.

57
00:03:25,230 --> 00:03:25,630
好的。
OK.

58
00:03:25,800 --> 00:03:31,300
所以现在是每天二十三点五十九分。
So there we are now what we've got twenty three fifty nine every day.

59
00:03:31,710 --> 00:03:37,330
那么这将会给托尼带来什么呢？1月份，12月份，托尼3分59秒受伤，但只在周日受伤。
So what this is going to do Tony 3:59 injured in January in December but only on Sundays.

60
00:03:37,460 --> 00:03:43,050
我们到了，他会附和，因为我们可以，比方说，现在有一个很棒的网站，叫做
So there we are and he's going to echo because we can for example now there's a great Web site called

61
00:03:43,050 --> 00:03:45,640
克罗恩标签点大师。
Crohn tab dot guru.

62
00:03:46,200 --> 00:03:51,390
好的，您可以看一看，看看不同的交叉表表达式是什么意思。
OK that you can take a look at and play around with to see what different cross-tab expressions mean.

63
00:03:51,390 --> 00:03:53,580
我会把它的链接放在参考资料部分。
And I'll put a link to it in the resources section.

64
00:03:53,570 --> 00:03:54,120
太棒了。
It's awesome.

65
00:03:54,120 --> 00:03:54,630
好的。
OK.

66
00:03:55,050 --> 00:04:00,660
但是，chrom的一个很好的用途是安排文件系统的自动备份。
But a great use of chrom is to schedule automated backups of the file system.

67
00:04:00,720 --> 00:04:06,810
假设我们想要在一年中每个月的每个周五23：59运行每周备份。
So let's say we want to run weekly backups every Friday at 23 59 for every month of the year.

68
00:04:06,960 --> 00:04:11,230
所以如果我删除这些例子，这里就是了。
So if I delete these these examples here it is.

69
00:04:11,310 --> 00:04:15,490
所以一年中每个月的周五都是23，59。
So 23 59 on Fridays for every month of the year.

70
00:04:15,570 --> 00:04:19,950
所以我们知道59是我们知道小时是23的那一分钟。
So we know that 59 is the minute we know the hour is 23.

71
00:04:19,950 --> 00:04:23,520
一个月中的哪一天并不重要，就像从数字上说，它是第一天还是第一天都无关紧要。
It doesn't matter the day of the month like numerically it doesn't matter whether it's the first or

72
00:04:23,520 --> 00:04:23,970
七号。
the seventh.

73
00:04:23,970 --> 00:04:28,000
只在每周五和一年中的每个月，但只在周五。
Just every Friday and every month of the year but only on Fridays.

74
00:04:28,260 --> 00:04:31,580
然后我们会放上备份我们东西的命令。
And then we'd put the command which is going to back up our stuff.

75
00:04:31,740 --> 00:04:33,130
好的。
OK.

76
00:04:33,150 --> 00:04:35,240
你知道这就是它的工作原理。
And you know that's how it would work.

77
00:04:35,280 --> 00:04:39,170
我们知道如何做到这一点，因为我们可以为它制作一个脚本。
And we know how to do this because we can make a script for it.

78
00:04:39,330 --> 00:04:39,740
好的。
OK.

79
00:04:39,900 --> 00:04:43,510
因此，让我们保存到目前为止的交叉表，就像这样。
So let's save our cross-tab so far just like that.

80
00:04:43,800 --> 00:04:46,880
你有吗，因为这是罗氏步枪兵的台词，但如果我真的只是顺便看看我们一直是什么样子的话
And do you because it's Roche rifleman's lines but if I actually look just by the way what we've been

81
00:04:46,970 --> 00:04:52,890
请注意，如果我在带光晕的ATX中查看，您会发现我们有更多的Hello World正在编辑
noticing that if I look in haloed ATX t you see we've got so many more of Hello worlds being edited

82
00:04:53,010 --> 00:04:57,460
我们之前设置的AS Accaron命令一直在继续运行。
that as Accaron command that we set before has been continuing to run.

83
00:04:57,480 --> 00:04:58,400
那真的很酷。
That's really cool.

84
00:04:58,420 --> 00:05:02,680
它是自动的，并且在后台运行。
It's automated and it's running in the background.

85
00:05:02,680 --> 00:05:03,060
好的。
All right.

86
00:05:03,060 --> 00:05:05,690
那么让我们设置我们想要运行的脚本。
So let's set up the script that we want to run.

87
00:05:05,690 --> 00:05:10,510
现在您还记得在上几个视频中，当我告诉您关于bash脚本时，我们创建了一个名为
Now you remember in the last few videos when I was telling you about bash scripts we made a folder called

88
00:05:10,510 --> 00:05:15,880
bin和bin文件夹内是我们开始放置脚本的位置，我们有一个名为
bin and inside that bin folder is where we started putting our scripts and we had this one file called

89
00:05:15,880 --> 00:05:16,770
后援。
backup.

90
00:05:16,780 --> 00:05:19,730
让我们再看看备份脚本内部。
Let's take a look inside that backup script again.

91
00:05:20,030 --> 00:05:26,770
在这里，它的作用是将AANA压缩为我们桌面上的归档文件
Well in here what it does is it compresses into aana into a archive on our desktop and every single

92
00:05:26,770 --> 00:05:32,740
我们的文档的内容之一是下载桌面、图片和视频文件夹，它还输出
one of the contents of our documents downloads desktops pictures and videos folders and it also outputs

93
00:05:32,740 --> 00:05:40,450
有些错误，如标准错误LOVI、来自命令的日志消息入位
some the error like the standard error Lovi the log messages that come from the command into the bit

94
00:05:40,450 --> 00:05:40,950
水桶。
bucket.

95
00:05:40,950 --> 00:05:43,480
所以他们就把它寄到了空虚之地。
So they just sent it to to the void.

96
00:05:43,480 --> 00:05:45,220
然后，它们不再打印到屏幕上。
They then no longer print to the screen.

97
00:05:45,220 --> 00:05:45,600
好的。
OK.

98
00:05:45,790 --> 00:05:49,460
这很好，这将为我们做备份。
So this is good this is this is going to do a backup for us.

99
00:05:49,540 --> 00:05:55,900
我们假设实际上不是将它们发送到桌面，而是在我们的主目录中
Let's say that actually instead of sending them to the desktop let's say that in our in our home directory

100
00:05:55,930 --> 00:06:00,340
假设我们创建了一个名为backups的目录。
let's say let's say we made a directory called backups.

101
00:06:00,670 --> 00:06:02,070
好的，我们在这一点上搞错了。
OK we got about that wrong.

102
00:06:02,160 --> 00:06:08,120
因此，如果我将备份重命名为带有一个S的BACKUPS到两个BACKUPS。
So if I rename back ups to two houses into just backups with one S..

103
00:06:08,560 --> 00:06:08,940
我们走吧。
There we go.

104
00:06:08,950 --> 00:06:10,370
我们现在有一个名为Backups的文件夹。
We've now got a folder called backups.

105
00:06:10,360 --> 00:06:10,780
好的。
OK.

106
00:06:10,910 --> 00:06:14,270
假设我们想要保存其中的备份。
And let's say we wanted to save the backups in there.

107
00:06:14,410 --> 00:06:25,930
因此，如果我们转到bin文件夹，现在添加一个备份脚本，我们可以说OK，进入我们的桌面，转到
So if we go to the bin folder and we add a backup script now we can say OK go into our desktop go to

108
00:06:25,930 --> 00:06:31,170
我们的备份文件夹确定，然后保存备份码头。
our backups folder OK and then save the backup dock.

109
00:06:31,210 --> 00:06:31,810
天啊。
Geez.

110
00:06:31,920 --> 00:06:33,010
好的，那很好。
OK that's good.

111
00:06:33,010 --> 00:06:34,460
这对我们来说是件好事。
And that's good for that.

112
00:06:34,570 --> 00:06:42,070
但是，我们还希望将创建备份的日期和时间记录到
But what we want as well is we want to also log the date and time that the backup was created into a

113
00:06:42,070 --> 00:06:43,090
日志文件。
log file.

114
00:06:43,090 --> 00:06:48,910
现在我们可以这样做，我们可以使用date命令，我们可以将该数据附加到
Now the way that we can do that is we could use the date command and we could append that data to a

115
00:06:48,910 --> 00:06:54,770
我们的Backups文件夹中有一个名为“Backup Backups”的文件，假设备份没有记录。
file in our backups folder called let's say backup backups don't log.

116
00:06:54,850 --> 00:07:00,760
为什么我们不说这种情况，我们将其称为备份文档日志，它将保留在那里
Why don't we say that case we're going to call it backups doc log and that's just going to keep in there

117
00:07:01,590 --> 00:07:04,710
上次挡路的日期和时间。
the date and time that the last block happened.

118
00:07:04,750 --> 00:07:08,710
好的，如果我们把它保留下来，实际上我们可以把它做得更高级一点。
OK so if we save that actually we could we could make it a bit more advanced.

119
00:07:08,860 --> 00:07:10,220
我们实际上可以。
We could actually.

120
00:07:10,300 --> 00:07:11,430
我们就这样吧。
Let's leave it like that.

121
00:07:11,800 --> 00:07:13,750
我们不要把事情搞得太复杂了。
Let's not make this any more complicated than it needs to be.

122
00:07:13,750 --> 00:07:14,080
好的。
OK.

123
00:07:14,260 --> 00:07:19,000
因此，我们将获取这些数据，并将其附加到我们的备份中，而不是日志文件中，您可以
So we're going to take that data and we're going to append it to our backups not log file and you can

124
00:07:19,000 --> 00:07:23,380
在这里可以看到，我使用双箭头来确保脚本每次运行时
see here that I'm using the double arrows to make sure that as the script runs each time it's going

125
00:07:23,380 --> 00:07:25,200
它会把它加进去。
to it's going to add it.

126
00:07:25,200 --> 00:07:27,030
因此，随着时间的推移，跌落的时间会越来越长。
So the fall gets longer as time goes on.

127
00:07:27,080 --> 00:07:30,500
好的，现在我们已经得到了我们想要运行的脚本。
OK so we've now got this script that we wanted to run.

128
00:07:30,610 --> 00:07:33,370
如果我们只是运行它，我们只想让它从任何地方恢复。
And if we've run it just we just want it back up from anywhere.

129
00:07:33,380 --> 00:07:40,890
如果我们运行备份，您现在可以看到，如果我们在备份中将其放回正常大小
If we run back up you can see that now if I just put this back to a normal size if we go into our backups

130
00:07:40,900 --> 00:07:43,690
文件夹我们现在有了备份重言式。
folder we've now got backups tautologies.

131
00:07:43,720 --> 00:07:49,430
我们还使用了备份文档日志光纤，其中包含Nonno Backups Not Log。
And we've also got this backups doc log fiber with that with Nonno backups don't log.

132
00:07:49,450 --> 00:07:51,380
您可以看到它及时记录在当天的日志中。
You can see that it's logged the day in time.

133
00:07:51,380 --> 00:07:56,520
好的，如果我移除，用金字塔移除这里的所有东西，你可以看到它们都消失了。
OK so if I just remove remove everything in here using Ahram you can see they've all disappeared.

134
00:07:56,590 --> 00:07:56,800
好的。
OK.

135
00:07:56,800 --> 00:07:57,390
太棒了。
So good.

136
00:07:57,400 --> 00:07:58,950
我们知道这个剧本很管用。
We know that script works.

137
00:07:58,960 --> 00:08:01,290
让我们尝试将其添加到我们的面包屑选项卡中。
Let's try and add it to our crumb tab.

138
00:08:01,420 --> 00:08:01,800
好的。
OK.

139
00:08:01,960 --> 00:08:06,170
所以我们来了，我们已经说过，我们想要每周五23：15，我们想要那个时间。
So here we are we've said that we want every Friday at 23:15 and we want that.

140
00:08:06,280 --> 00:08:07,590
我们希望运行该脚本。
We want that script to run.

141
00:08:07,600 --> 00:08:08,750
那么我们怎么才能做到这一点呢。
So how can we do that.

142
00:08:09,040 --> 00:08:13,690
我们可以这样运行，因为这是一个bash脚本，我们将键入背景，所以bash就像这样
Well the way we can run that is because it's a bash script we'll type the background so just bash like

143
00:08:13,690 --> 00:08:16,940
然后，我们将给它提供我们想要运行的脚本的路径。
that and then we'll give it the path to the script that we want to run.

144
00:08:16,990 --> 00:08:22,840
因此，在bin文件夹的主目录中，我们将运行备份脚本。
So in our home directory in the bin folder we're going to run the backup script.

145
00:08:22,960 --> 00:08:26,560
这就是我们要做的所有事情，我们只需键入bash，然后将路径指定给我们
So that's all we've got to do right we just type bash and then give it the path to the script that we

146
00:08:26,560 --> 00:08:31,000
想要运行，那么该脚本现在将在周五23：59运行。
want to run and then that script will now run at 23 59 on a Friday.

147
00:08:31,120 --> 00:08:34,310
但为了免得你一直等到23点15分在下一个右手边。
But to save you waiting all the way to 23:15 on on next right.

148
00:08:34,480 --> 00:08:37,140
让我们每分钟跑一次，这样我们就可以看着它再次发生。
Let's go ahead make this run every minute so we can watch it happen again.

149
00:08:37,180 --> 00:08:38,190
看看我要做什么。
So look what I'm going to do.

150
00:08:38,200 --> 00:08:38,680
好的。
Nice.

151
00:08:38,750 --> 00:08:43,080
海科克，我想我要把线剪断，先把线拆了，然后再把线剪断。
Haycock I guess I'm going to cut the line and uncut the line and then cut the line again.

152
00:08:43,110 --> 00:08:44,430
这是一个很好的复制和粘贴。
That's a nice copy and paste.

153
00:08:44,590 --> 00:08:46,570
我要让它每分钟跑一次。
And I'm going to make this run every minute.

154
00:08:46,660 --> 00:08:46,890
好的。
OK.

155
00:08:46,900 --> 00:08:53,720
所以如果我们要改变所有的恒星K，我们就去做。
So if we're ever going to change all of these stars K that we go.

156
00:08:53,720 --> 00:09:00,140
现在，它应该每分钟都在运行，如果我写入该文件并将其关闭，您可以看到它已安装在
Now that should run every minute now if I write the file and close it you can see it's installed the

157
00:09:00,130 --> 00:09:02,180
新的露背上衣现在在备货中。
new crop top now in backups.

158
00:09:02,180 --> 00:09:07,580
这里什么都没有，但如果我看一下日期，我们有大约40秒的时间
There's nothing in here but if I look at the date we can see that we've got about 40 seconds until this

159
00:09:07,580 --> 00:09:10,280
我敢肯定，再跑一次一定会让我非常兴奋。
runs again makes me very excited I'm sure.

160
00:09:10,280 --> 00:09:15,290
所以我们有大约30秒的时间，所以我要把这里的视频剪下来，然后回到接近时间的地方。
So we've got about 30 seconds so I'm going to cut the video here and come back close to the time.

161
00:09:16,320 --> 00:09:19,860
所以我们总是看一看，它就这么过去了。
So we always take a look and it's just gone past the minute.

162
00:09:19,870 --> 00:09:25,410
那么让我们来看看我们的挖掘机文件夹，万岁，我们确实正确地运行了我们的脚本，如果
So let's take a look at our backhoes folder and hooray we have indeed run our script correctly and if

163
00:09:25,410 --> 00:09:34,710
我们查看日志文件夹内部如果我们查看备份顶层日志，我们可以看到它刚刚超过
we look inside the log folder if we look at backups top log we can see that it ran at just past the

164
00:09:34,710 --> 00:09:36,210
今天是第三分钟。
third minute of today.

165
00:09:36,210 --> 00:09:42,930
所以它在过去的一分钟运行的原因就像你知道只有一秒
So the reason it runs at just the minute past it's just a like like you know there's just one second

166
00:09:42,930 --> 00:09:43,180
错误。
error.

167
00:09:43,200 --> 00:09:45,590
我想这只是个闹钟的问题。
I think it's just a clock thing.

168
00:09:45,750 --> 00:09:50,820
你知道计算机只能在一定的时间分辨率下处理事情，一秒真的
It's you know the computer can only process things at a certain time resolution and one second is really

169
00:09:50,820 --> 00:09:53,000
不算太严重的错误。
not that much of a bad error.

170
00:09:53,020 --> 00:09:53,430
好的。
OK.

171
00:09:53,640 --> 00:09:56,070
所以你会倾向于看到这样的东西。
So it'll be you'll tend to see things like this.

172
00:09:56,070 --> 00:10:01,740
我认为它实际上是在一分钟过去的时间运行的，但是date命令花费的时间大约是
I think it actually does run at exactly the time the minute goes but the date command takes just about

173
00:10:01,740 --> 00:10:04,780
运行一秒钟左右，或者类似的东西，所以会有轻微的延迟。
a second or so to run or something like that so it has a slight delay.

174
00:10:04,890 --> 00:10:07,060
但真的一秒都不算坏。
But really one second is not bad at all.

175
00:10:07,140 --> 00:10:11,640
所以现在我们确实已经运行了X-Amount，看看它可能会在哪里再次发生。
So now we have indeed ran X-amount and look where it might it might even happen again.

176
00:10:11,730 --> 00:10:12,880
它甚至可能再次发生。
It might even happen again.

177
00:10:13,080 --> 00:10:17,280
所以如果我们再等4秒，再等1秒。
So if we wait four more seconds one more second.

178
00:10:17,640 --> 00:10:18,650
是。
Yes.

179
00:10:18,690 --> 00:10:26,210
现在我们来看看我们的备份点日志备份点日志将看到另一个正在再次运行，只有一个
Now we look inside our backups dot log backups dot log will see that another one is run again just one

180
00:10:26,220 --> 00:10:27,540
第四分钟过后一秒。
second past the fourth minute.

181
00:10:27,540 --> 00:10:31,180
所以现在我们每分钟都在备份。
So now we are making backups every single minute.

182
00:10:31,230 --> 00:10:35,970
但这可能会给我们这里的电脑带来一点负担。
But that might be a bit of a bit of a bit of a burden on our computer here.

183
00:10:35,970 --> 00:10:40,830
因此，让我们继续控制K来删除该行，然后我们可以保存我们的工作并离开它，以便
So let's just go ahead control K to delete the line and then we can save our job and leave it so that

184
00:10:40,830 --> 00:10:44,450
每周五只有203点59分开通。
it just runs at 20 3:59 on Fridays.

185
00:10:44,460 --> 00:10:49,280
所以你们来了，太棒了，太史诗了。
So there you are guys how awesome and how epic is that.

186
00:10:50,950 --> 00:10:56,750
有些内容显示，您可以看到将bash脚本和Crohn调度结合在一起来控制
Some show you can see the power of combining together bash scripts and Crohn scheduling to control what

187
00:10:56,810 --> 00:10:59,250
任何你想要的关于你的电脑的东西。
ever you want about your computer.

188
00:10:59,250 --> 00:11:03,050
现在，这两种技能结合在一起是令人难以置信的强大组合。
Now these two skills together are incredibly powerful combination.

189
00:11:03,150 --> 00:11:06,220
现在，您对它们的工作方式有了基础。
And you now have the foundation in how they work.

190
00:11:06,240 --> 00:11:08,910
所以让我们快速回顾一下我们在这段视频中学到了什么。
So let's have a quick recap of what we've learned in this video.

191
00:11:08,910 --> 00:11:14,460
在这段视频中，您了解了如何使用Chrome来计划命令和脚本何时应该
So in this video you took a look at how to use Chrome to schedule when commands and scripts should be

192
00:11:14,460 --> 00:11:19,830
运行后，您会了解到每个用户都有所谓的交叉表，然后您可以使用以下命令编辑Kramm选项卡
run and you learn that every user has what is known as a crosstab and then you can edit Krumm tabs using

193
00:11:19,830 --> 00:11:26,880
带有代表编辑的选项的交叉表命令现在键入已损坏的文本文件
the crosstab command with the option with the standing for edit Now types a text files that are broken

194
00:11:26,880 --> 00:11:32,640
最多到多行，您可以有任意多行，并且每个命令或脚本都有自己的行
up into many rows and you can have as many rows as you like and each command or script has its own row

195
00:11:32,850 --> 00:11:35,520
每行有六列。
and each row has six columns.

196
00:11:35,520 --> 00:11:40,440
前五列是日程安排信息，第六列也是最后一列详细说明科曼多
The first five columns are scheduling information and the sixth and final column details which comando

197
00:11:40,440 --> 00:11:42,990
脚本应在该计划时间运行。
script should be run at that scheduled time.

198
00:11:42,990 --> 00:11:48,070
因此，这些列是用于日程安排列的，您可以得到每小时的分钟数。
So the columns are for that for the scheduling columns you've got the minutes of the hour.

199
00:11:48,210 --> 00:11:54,880
因此，例如，如果您在列中放入15，则Common将只在每个小时的15分钟运行。
So for example if you put 15 in the column the commom would only run at the 15 minute of each hour.

200
00:11:54,990 --> 00:12:01,490
所以大概是11：15,215,315，等等，然后你就有了时间本身。
So it's things like 11:15 215 315 and so on that then you've got the hour itself.

201
00:12:01,490 --> 00:12:04,930
所以这是一个你可以输入24小时时钟时间的数字。
So that's a number that you can put in 24 hour clock time.

202
00:12:04,950 --> 00:12:09,590
所以从0到23，这列的第三天是这个月的第一天。
So from 0 to 23 you've got then the third day of the column is the day of the month.

203
00:12:09,600 --> 00:12:12,340
所以再一次从一点到月底，不管是什么。
So again from one to the end of the month whatever that might be.

204
00:12:12,420 --> 00:12:13,800
第四列是月份。
The fourth column is the month.

205
00:12:13,800 --> 00:12:17,300
因此，这可能是一个数字，其中一个是1月，12个是12月。
So that could be numbers with one being January and 12 being December.

206
00:12:17,310 --> 00:12:23,630
或者你可以只输入大写字母的月份的三个字母版本，这样J.N.就代表一月份
Or you could just type in capital letters the three letter version of the month so J.N. for January

207
00:12:23,630 --> 00:12:28,080
DC表示12月，依此类推，第五列是星期几。
DC for December and so on and the fifth column is the day of the week.

208
00:12:28,080 --> 00:12:35,110
所以这可能是0到6，0是周日，6也是周六，7是周日。
So that could be zero to six with zero being Sunday and 6 being Saturday also and to 7 a Sunday.

209
00:12:35,120 --> 00:12:41,150
同样，如果您愿意，一个很好的方法就是输入日期名称。
Again if you wanted but a good way to do it is just to enter the day names.

210
00:12:41,340 --> 00:12:45,680
所以是星期一，SE1是星期天，是一个三个字母的日期名称。
So and being Monday SE1 being Sunday is a three letter day names.

211
00:12:45,680 --> 00:12:46,110
好的。
OK.

212
00:12:46,350 --> 00:12:49,750
你也看到了一些高级的方法来安排这些事情。
And you also saw some advanced ways to schedule this stuff as well.

213
00:12:49,830 --> 00:12:55,710
查看这些日程安排的一个很好的地方是查看一个名为Cross-tab的网站
And a great place to look at these these scheduling things is to look at a Web site called cross-tab

214
00:12:56,010 --> 00:13:02,400
Dot Guru我会在参考资料部分放一个链接，因为这是一个很好的网站，可以让您练习
dot guru I'll put a link to that in the resources section because it's a great Web site for you to practice

215
00:13:02,850 --> 00:13:08,460
设置这些调度条件，它也将在将来的某个时候对您有用。
setting up these scheduling conditions and it also will become useful for you at some point in the future.

216
00:13:08,490 --> 00:13:13,000
正如我应该提到的，哪些栏目可以由您喜欢的空格隔开，或者克罗恩栏目的栏目可以由您喜欢的空格隔开
And as I should mention what columns can be separated by as many spaces as you like or Crohn ones is

217
00:13:12,990 --> 00:13:15,360
每列之间至少要有一个空格。
that you separate each column by at least one space.

218
00:13:15,450 --> 00:13:18,460
但是，您可以随意设置每行的格式。
But feel free to format each rows however you'd like.

219
00:13:18,540 --> 00:13:19,030
好的。
OK.

220
00:13:19,200 --> 00:13:24,480
您还在本视频中看到了如何使用Chrome选项卡和bash脚本计划自动备份
And you also saw in this video how to use Chrome tabs and bash scripts to schedule automated backups

221
00:13:24,720 --> 00:13:29,490
这对于确保所有文件的安全是非常有用的
of your home directory which is an incredibly useful thing to make sure that all your files stay safe

222
00:13:29,490 --> 00:13:33,760
并以您在上一节中学到的关于文件压缩和归档的知识为基础。
and built upon what you learned in the last section about file compression and archiving.

223
00:13:33,780 --> 00:13:35,390
这也太棒了。
That's super awesome as well.

224
00:13:35,400 --> 00:13:39,750
现在，我想让您记住最后两个视频中的关键一点，那就是实际上在Linux中
Now the key thing that I want you to remember from the last two videos is that in Linux practically

225
00:13:39,810 --> 00:13:42,200
可以使用命令行编辑任何内容。
anything can be edited using the command line.

226
00:13:42,210 --> 00:13:46,980
现在，由于您可以编写bash脚本来以受控的顺序执行这些命令，然后使用
Now since you can write bash scripts to execute these commands in a controlled sequence and then use

227
00:13:47,100 --> 00:13:52,770
Cron要计划脚本应该何时运行，您有必要的工具包来做任何您想做的事情
cron to schedule when the script should be run you have the necessary toolkit to do what ever you want

228
00:13:52,770 --> 00:13:57,650
在您的系统上，只要您想这样做，这是一个非常强大的组合。
on your system whenever you want to do it which is a crazily powerful combination.

229
00:13:57,660 --> 00:14:01,090
你现在所需要的就是一点想象力来决定你可能想要做什么。
All you need now is a bit of imagination to decide what you might like to do.

230
00:14:01,230 --> 00:14:06,750
现在，bash脚本本身就是一个庞大的主题，所以我们只有真正的时间来讨论
Now bash scripts are a whole massive topic in and of themselves so we only really had time to scratch

231
00:14:06,750 --> 00:14:11,550
表面，并且只涵盖了他们在本课程中所能做的一小部分，但至少现在您已经
the surface and cover just a small bit of what they can do in this course but at least now you have

232
00:14:11,550 --> 00:14:15,160
了解哪些是糟糕的脚本，它们是如何工作的，以及您可能在哪里使用它们。
an understanding of what bad scripts are how they work and where you might use them.

233
00:14:15,210 --> 00:14:20,220
如果您想让我创建一个关于bash脚本的专门课程，然后给我发个消息
And if you'd like me to create a specialized course on just bash scripts and then send me a message

234
00:14:20,250 --> 00:14:23,640
如果我听够了你说你想要的话那么你知道我可以我可以把这句话
and if I get enough of you saying that you want that then you know I can I can potentially put that

235
00:14:23,640 --> 00:14:24,470
一起为你服务。
together for you.

236
00:14:24,690 --> 00:14:29,400
但是根据我们到目前为止在这门课上学到的东西，我想确保你们在使用
But for what we've learned in this course so far I want to make sure you get some practice in using

237
00:14:29,400 --> 00:14:29,710
它。
it.

238
00:14:29,730 --> 00:14:33,940
因此，在下一个视频中，您将获得下一个项目作业的概要。
So in the next video you're going to be getting the brief for your next project assignment.

239
00:14:34,060 --> 00:14:38,730
现在将是一个相当简单和有趣的例子，这一次允许您离开并尝试编写bash脚本
Now will be a rather simple and fun one this time to allow you to go off and try writing bash scripts

240
00:14:38,760 --> 00:14:43,170
为您自己处理应用程序，这样您就可以亲手了解这些令人难以置信的强大功能
and crunch apps for yourself so you can get a hands on understanding of how these incredibly powerful

241
00:14:43,170 --> 00:14:44,280
技能是有效的。
skills work.

242
00:14:44,280 --> 00:14:47,940
关于你们下一次任务的简介，我会在下一段视频中见到你们。
So for the brief of your next assignment I'll see you in the next video.

