1
00:00:00,840 --> 00:00:05,370
大家好，漂亮的人们，在上一个视频中，你们看到了如何重定向标准输出。
Hello you beautiful people so in the last video you saw how to redirect standard output.

2
00:00:05,410 --> 00:00:09,490
在这段视频中，我们将继续学习如何重定向标准
And in this video we're going to be picking that up and continuing by learning how to redirect standard

3
00:00:09,760 --> 00:00:11,410
时代和标准输入。
era and standard input.

4
00:00:11,530 --> 00:00:12,740
所以让我们从标准误差开始。
So let's start with standard error.

5
00:00:12,740 --> 00:00:14,290
你怎么把它重定向。
How do you go about redirecting that.

6
00:00:14,380 --> 00:00:19,090
嗯，有些作品的标准输出方式与标准输出的数字非常相似
Well some of there are works in very much the same way a standard output than the number for the standard

7
00:00:19,090 --> 00:00:22,740
错误数据流是要排序的重定向标准错误的编号。
error data stream is the number to sort of redirects standard error.

8
00:00:22,840 --> 00:00:27,670
您可以键入cat，然后不是1，然后是同意和未签名，这就是我们用来表示标准的
You would type cat and then instead of one and then agree and unsigned which is what we use for standard

9
00:00:27,670 --> 00:00:32,060
您只需输出，因为标准错误的数据流是第二个。
output you just have to because the data stream of a standard error is number two.

10
00:00:32,290 --> 00:00:38,470
这会将标准错误从cat命令重定向到Arundhati ex-state并追加
And this would redirect the standard error from the cat command to Arundhati ex-state and to append

11
00:00:38,710 --> 00:00:43,960
对任何已经处于干燥状态的东西的标准误差xTi，你可以做两个箭头。
the standard error to whatever is already in aridity XTi you would do the two arrows.

12
00:00:43,960 --> 00:00:49,600
请记住，单箭头和双箭头之间的区别在于，单箭头将删除所有内容
So remember the difference between the one arrow and the two arrows is the one arrow will delete everything

13
00:00:49,600 --> 00:00:53,550
在写入之前，它在文件中，在钢笔之前，所以它会截断文件。
that's in the file before a pen before writing to it and so it will truncate the file.

14
00:00:53,650 --> 00:00:57,980
两个箭头将附加或添加到已有的内容上。
And two arrows will append or add to what already there.

15
00:00:58,060 --> 00:01:00,210
好的，让我们来演示一下。
OK so let's demonstrate this.

16
00:01:00,260 --> 00:01:03,600
cat的命令没有k选项。
The cat's command doesn't have the k option.

17
00:01:03,700 --> 00:01:06,970
好的，如果我做了cat，给它k选项，然后输入blah。
OK so if I do cat give it the k option and just type blah.

18
00:01:07,000 --> 00:01:07,370
正确的。
Right.

19
00:01:07,510 --> 00:01:09,690
我们将收到一个错误，它将显示无效选项。
We're going to get an error and it's going to say Invalid option.

20
00:01:09,760 --> 00:01:11,590
K试试猫的帮助。
K try cat help.

21
00:01:11,590 --> 00:01:13,870
了解更多信息。
For more information.

22
00:01:13,960 --> 00:01:15,740
所以这是一条错误消息。
So this is an error message.

23
00:01:15,880 --> 00:01:22,540
因此，它在标准错误数据流上输出，默认情况下，标准数据流是
So therefore it was output on the standard error data stream and the standard data stream is by default

24
00:01:22,540 --> 00:01:25,390
连接到终端，因此我们在终端中看到。
connected to a terminal and therefore we see in our terminal.

25
00:01:25,420 --> 00:01:27,730
但是让我们把它重定向到Arundhati XTi。
But let's redirect it to Arundhati XTi.

26
00:01:27,730 --> 00:01:32,770
所以不为所动的UP可以省去一些打字时间，我要输入数字2，然后
So unimpressed the up are ok to save myself some typing and I'm going to type the number two and then

27
00:01:32,830 --> 00:01:37,420
一个很棒的未签名的，并说重定向到RTX XTi。
a great unsigned and say redirect that to RTX XTi.

28
00:01:37,460 --> 00:01:43,870
好的，我的意思是，运行这个，然后将Sendero重定向到Arati Active。
OK so I'm saying Run this and redirect the the Sendero to Arati active.

29
00:01:43,900 --> 00:01:48,160
因此，当我按Enter键时，我们首先注意到终端上没有弹出任何东西，这是一个好消息
So when I press Enter we first of all we notice that nothing popped out on our terminal which is a good

30
00:01:48,160 --> 00:01:48,650
签名。
sign.

31
00:01:48,790 --> 00:01:52,820
当我们打开我们的文件时，我们可以看到有一个叫做特技飞行的文件。
When we open up our files we can see there's a file called aerobatics.

32
00:01:52,840 --> 00:01:59,470
当我打开它时，我们可以看到错误消息确实已经发送到该位置。
And when I open it we can see that indeed the error message has been sent to that location.

33
00:01:59,650 --> 00:02:04,420
这种用于重定向标准错误的常见用法是跟踪传入的日志消息
A common use for this kind of for redirecting standard error is to keep track of log messages coming

34
00:02:04,420 --> 00:02:06,530
从Web服务器和诸如此类的东西。
from web servers and things like that.

35
00:02:06,670 --> 00:02:10,260
但一个常见的错误是只使用一个箭头，就像我们这里一样。
But a common mistake is to use just one arrow like we have here.

36
00:02:10,360 --> 00:02:10,800
好的。
OK.

37
00:02:10,960 --> 00:02:18,750
因为如果我一直这样做，这意味着它会在发送之前删除文件中的内容。
Because if I keep doing that what that means is it will delete what's in the file before before it sends.

38
00:02:18,760 --> 00:02:22,550
如果我一直做OK，就会出现标准错误。
Standard error against If I keep doing the OK.

39
00:02:22,660 --> 00:02:24,720
想象一下，每一次都会有一个新的时代发生。
Imagine a new era happens every time.

40
00:02:24,790 --> 00:02:25,180
好的。
OK.

41
00:02:25,330 --> 00:02:30,030
如果我继续做露天0.60，只保存了最近的错误。
If I keep doing an open air 0.60 only the most recent error has been saved.

42
00:02:30,280 --> 00:02:33,360
但是如果我有一支箭，而不是一支箭，我有两支箭。
But if my Instead of having one arrow I have two arrows.

43
00:02:33,400 --> 00:02:36,560
现在我要把每个区域叠加在一起。
Now I'm going to append each area on top of each other.

44
00:02:36,760 --> 00:02:37,380
好的。
OK.

45
00:02:37,660 --> 00:02:41,230
这正是您希望使用日志文件的原因，因为您希望能够回滚并查看
Which is exactly what you want with a log file because you want to be able to scroll back and see what's

46
00:02:41,230 --> 00:02:43,470
过去发生过，因为它又开了。
happened in the past because it's open again.

47
00:02:44,020 --> 00:02:47,110
现在我们可以看到错误是叠加在一起的。
Now we can see that the errors are being added on top of each other.

48
00:02:47,110 --> 00:02:51,070
所以这就是有一个箭头和两个箭头的区别，两个箭头用笔写在什么上面
So that's the difference between having the one arrow and the two arrows the two arrows pens onto what

49
00:02:51,070 --> 00:02:52,380
已经在那里了。
was already there.

50
00:02:52,450 --> 00:02:53,230
好的。
OK.

51
00:02:53,230 --> 00:02:57,510
这才是标准时代真正需要的。
And that's really what you need for standard era.

52
00:02:57,700 --> 00:03:02,260
现在，您当然可以同时重定向标准错误和标准输出。
Now you can of course redirect standard error and standard output at the same time.

53
00:03:02,260 --> 00:03:09,580
例如，我们可以键入cat命令，然后将输出重定向到输出RTX测试成员标准
So for example we could type the cat command and redirect output to output RTX t member that standard

54
00:03:09,580 --> 00:03:15,880
输出1号数据流，我们还可以将标准错误重定向到另一个称为错误的位置
output data stream number one and we could also redirect standard error to another place called error

55
00:03:16,560 --> 00:03:21,220
xti，我们可以通过确保在两个箭头上的两个箭头，来确保我们已经添加了这两个箭头
XTi and we can make sure that we've that we append both of them by making sure the two arrows at both

56
00:03:21,220 --> 00:03:22,060
地点。
places.

57
00:03:22,060 --> 00:03:26,630
然后当我们开始的时候，像Linux这样的东西是令人惊叹的。
And then when we start something like Linux is amazing.

58
00:03:27,040 --> 00:03:29,550
然后当我们在这里打开文件浏览器时取消。
And then we cancel when we open up our file browser here.

59
00:03:29,920 --> 00:03:31,920
我们将看到我们现在有两个文件。
We will see that we now have two files.

60
00:03:31,930 --> 00:03:34,550
我想看看有两个输出的输出。
I would like to see an output that takes two output.

61
00:03:34,630 --> 00:03:40,060
DXi包含Linux是惊人的，标准错误，实际上不包含东西的错误，因为
DXi contains Linux is amazing and standard error the error that actually doesn't contain thing because

62
00:03:40,060 --> 00:03:42,880
此输出实际上没有错误。
there were actually no errors from this output.

63
00:03:42,880 --> 00:03:47,710
这是一个完全有效的命令，不需要任何错误，但这就是您要执行的操作
It was a perfectly valid command there were no errors required but that is how you would go about doing

64
00:03:47,710 --> 00:03:48,160
它。
it.

65
00:03:48,160 --> 00:03:52,570
这就是我们将标准输出重定向到输出的方式，实际上我们可以看出
So this is how we would we would be redirecting standard output to output to actually we can tell that

66
00:03:52,570 --> 00:03:57,490
因为第一位在这里，标准错误在名为arity xti的文件中。
because the number one is here and standard error to a file called aridity XTi.

67
00:03:57,490 --> 00:04:02,860
现在我们可以看到追加标准误差的数字和误差是多少，输出也是如此
Now we can see what the number and the error is that standard error would be appended and so would output

68
00:04:02,860 --> 00:04:03,470
ATX T.
ATX T.

69
00:04:03,490 --> 00:04:09,160
现在我们还记得，您实际上不需要一个输出文本，所以您可以这样做
Now we actually remember you actually don't need the one output text so you could actually just do that

70
00:04:09,730 --> 00:04:15,070
确实可以说Linux是非常令人惊叹的。
and do say Linux is very amazing.

71
00:04:15,070 --> 00:04:20,050
当我看它的时候，我们可以看到输出，它已经附加了文本。
And when I look at that we can see output it has had it's text appended.

72
00:04:20,050 --> 00:04:24,170
同样，航空学上也不会有任何错误，因为没有任何错误。
And again there will still be no errors in aeronautics because there weren't any errors.

73
00:04:24,230 --> 00:04:27,040
但是您可以在这里看到，即使不使用数字1，它仍然可以工作。
But you can see here that without using the number one this will still work.

74
00:04:27,040 --> 00:04:32,240
但是您仍然需要标准错误的数字2，因为Shawk不可用。
But you do still need the number two for standard error because that Shawk isn't available.

75
00:04:32,320 --> 00:04:32,730
好的。
OK.

76
00:04:32,800 --> 00:04:39,040
所以你只能去掉第一位的标准输出数据流OK。
So you can only get rid of the number one for the standard output data stream OK.

77
00:04:39,050 --> 00:04:39,440
非常出色。
Brilliant.

78
00:04:39,440 --> 00:04:42,950
所以你知道我知道如何重定向标准输出和标准错误。
So you know I understand how to redirect standard output and standard error.

79
00:04:43,160 --> 00:04:44,700
那么标准输入如何呢？
So how about standard input.

80
00:04:44,930 --> 00:04:49,190
实际上，在cat命令正在寻找标准的时候，这是相对简单的
Well actually that's relatively straightforward at the moment the cat command is looking for standard

81
00:04:49,190 --> 00:04:50,740
从键盘输入。
input from the keyboard.

82
00:04:50,870 --> 00:04:54,160
如果我们告诉它从文件中获取标准输入，会怎么样？
What if we told it to get standard input from a file instead.

83
00:04:54,350 --> 00:04:59,730
因此，让我们创建一个名为input RTX T的文件，并键入单词hello world。
So let's make a file called input RTX T and type in the words hello world.

84
00:04:59,770 --> 00:05:04,700
所以我们要做的是使用cat命令，现在我们将输出到
I so what we're going to do is we're going to use the cat command and we'll get output that now to a

85
00:05:04,700 --> 00:05:07,210
名为Input Datti XTi的文件。
file called input Datti XTi.

86
00:05:07,490 --> 00:05:09,850
好的，我们可以做一个文件，我们要放进去。
OK so we can make a file We're going to put in there.

87
00:05:09,980 --> 00:05:11,390
你好，世界。
Hello world.

88
00:05:11,720 --> 00:05:19,050
现在，当我取消时，我们已经有效地创建了一个名为input ATX D的文件，在那里我们有。
Now when I cancel the we have now effectively created a file called input ATX D and in there we have.

89
00:05:19,130 --> 00:05:20,470
你好，世界。
Hello world.

90
00:05:20,670 --> 00:05:21,130
好的。
OK.

91
00:05:21,380 --> 00:05:25,070
因此，您也可以看到如何使用重定向来创建这样的文件。
So you can see how you can use redirection to create files like this as well.

92
00:05:25,070 --> 00:05:29,010
现在，让我们现在使用，让我们再次尝试使用cat命令读取该文件。
Now let's use now let's try and read from that file using the cat command again.

93
00:05:29,080 --> 00:05:34,250
好的，我们怎样才能使这个文件的内容这个政治文件被读入标准输入
OK how can we make the contents of this file this in politics file be read into standard input for the

94
00:05:34,250 --> 00:05:38,510
cat命令，这样我们以后就不需要键入它了，比方说。
cat command so that we don't have to type it later on let's say.

95
00:05:38,660 --> 00:05:41,860
标准输入流的数字是零。
Well the standard input stream has the number of zero.

96
00:05:41,870 --> 00:05:47,480
所以我们能做的就是键入数字0，而不是灰色的无符号，就像
So what we can do is we can type cat the number 0 and instead of the grey of unsigned which is like

97
00:05:47,480 --> 00:05:49,950
实际使用小于号的输出。
an output you actually use the less than sign.

98
00:05:50,030 --> 00:05:52,660
好的，我们说，然后输入RTX。
Ok we say then input RTX.

99
00:05:53,060 --> 00:05:54,340
或者作为一条捷径。
Or as a shortcut.

100
00:05:54,410 --> 00:05:58,600
因为标准输入流是您可以实际输入的唯一方式。
Because the standard input stream is the only way that you can actually input.

101
00:05:58,730 --> 00:05:59,720
你甚至不需要零。
You don't even need the zero.

102
00:05:59,750 --> 00:06:02,190
你只需在我背上签个字就行了。
You just put the less than sign my back.

103
00:06:02,480 --> 00:06:06,520
现在，当我们这样做时，我们会看到屏幕上弹出hello world消息。
Now when we do this we see the hello world message pop up on the screen.

104
00:06:06,530 --> 00:06:11,450
这是因为CAT已从标准输入读取文件并将其输出到标准输出，该标准输出
Now this is because cat has read the file from standard input and output it to standard output which

105
00:06:11,450 --> 00:06:14,780
默认连接到我们的终端。
is by default connected to our terminal.

106
00:06:14,780 --> 00:06:16,270
现在来个小挑战。
Now here's a mini challenge.

107
00:06:16,280 --> 00:06:16,630
好的。
OK.

108
00:06:16,670 --> 00:06:24,680
我希望您让CATS从输入ATX T读取标准输入，并将输出重定向到。
I want you to get cats to read standard input from input ATX T and redirect the output to.

109
00:06:24,690 --> 00:06:27,410
你好，XTi医生。
Hello Dr. XTi.

110
00:06:27,710 --> 00:06:29,500
并使之成为现实。
And make it so that that happens.

111
00:06:29,590 --> 00:06:30,040
好的。
OK.

112
00:06:30,110 --> 00:06:31,900
所以去吧，试一试吧。
So go ahead and give that a go.

113
00:06:31,910 --> 00:06:38,570
现在暂停视频，并尝试让cat从他XTi的输入中读取标准输入，然后将
Pause the video now and try to get cat to read standard input from input that he XTi and redirect the

114
00:06:38,570 --> 00:06:42,650
输出到hello itx然后他回来看看你做得怎么样
output to hello itx he then come back to see how you did

115
00:06:49,890 --> 00:06:53,160
你做到了吗？这是我该怎么做的。
did you manage it was here's how I would go about it.

116
00:06:53,370 --> 00:06:58,210
我将首先重定向cat标准输入，这样它就来自于他的XTi。
I would first redirect cat standard input so that it comes from that he XTi.

117
00:06:58,350 --> 00:07:05,840
所以我们将按照法律来做，然后我会把它放到一个叫Hello Datti XTi的文件中。
So we're just going to do by law and then I would put it to a file called Hello Datti XTi.

118
00:07:05,900 --> 00:07:06,440
好的。
OK.

119
00:07:06,570 --> 00:07:12,450
现在为了便于阅读，我可能会添加流编号，所以我可能会说我要重定向到
Now to make it easier to read I might add the stream numbers so I might say I am going to redirect into

120
00:07:12,450 --> 00:07:13,430
流0。
stream 0.

121
00:07:13,470 --> 00:07:19,720
但是需要t，我将从流1重定向，它是标准输出，指向hello 0.60。
But it takes t and I'm going to redirect from stream 1 which is standard output to hello 0.60.

122
00:07:19,770 --> 00:07:21,400
你用哪一个完全由你决定。
It's totally up to you which one you use.

123
00:07:21,420 --> 00:07:22,530
这也许是一种方法。
This might be a way to do it.

124
00:07:22,530 --> 00:07:28,730
可能不是，但请记住，在第一部分中，0是标准的，第一部分是放入标准误差的标准。
It might not be but just remember that 0 is standard in part one is standard put into standard error.

125
00:07:28,820 --> 00:07:34,130
好的，在这里我们可以看到，我们正在将输入atx t读入标准输入。
OK and here we can see that we're reading input ATX t into standard input.

126
00:07:34,140 --> 00:07:39,750
可以很容易地以图形方式看到这一点，我们正在将标准输出写入Hello
It's quite easy to see that quite quite graphically and we're writing from standard output into Hello

127
00:07:39,750 --> 00:07:40,580
西蒂医生。
Dr. XTi.

128
00:07:40,710 --> 00:07:41,160
好的。
OK.

129
00:07:41,340 --> 00:07:47,790
所以如果我们现在继续这样做，我们应该能够看到，事实上，是的，我们现在有一个名为
So if we go ahead and do that now we should be able to see that in fact yes we now have a file called

130
00:07:47,820 --> 00:07:50,840
你好，战术，当我们打开它的时候，我们会看到你好，世界。
Hello tactics and when we open it we see Hello world.

131
00:07:50,850 --> 00:07:52,370
这不是很神奇吗。
Isn't that amazing.

132
00:07:52,530 --> 00:07:55,050
这就是您可以重定向计算机上所有数据的方式。
That's how you can redirect data all around your computer.

133
00:07:55,050 --> 00:07:57,300
现在还有一件令人兴奋的事情。
Now here's one more mindblowing thing.

134
00:07:57,510 --> 00:08:01,460
Linux中的所有内容实际上都被视为文件。
Everything in Linux is actually treated the same as a file.

135
00:08:01,890 --> 00:08:03,480
甚至是终端。
Even terminals.

136
00:08:03,750 --> 00:08:09,300
让我打开另一个术语，使用快捷键Altamonte，我可以正确地打开它们
So let me open up another term along and use the shortcut control Altamonte and I get to open them right

137
00:08:09,300 --> 00:08:13,570
放在一首歌旁边，把一首放在这里，我要把一首放在这里。
next to one of the song and put one over here and I'm going to put one over here.

138
00:08:13,830 --> 00:08:14,600
好的。
OK.

139
00:08:14,700 --> 00:08:18,640
现在在另一个航站楼，这个在右边的新航站楼上。
Now in the other terminal this one over this new one on the right.

140
00:08:18,750 --> 00:08:20,770
我将运行T.T.y命令。
I'm going to run the T.T. y command.

141
00:08:20,790 --> 00:08:26,200
现在，TDY命令实际上将告诉我们该终端在文件系统中的位置
Now the TDY command will actually tell us where this terminal is located where on the file system it

142
00:08:26,200 --> 00:08:26,650
是。
is.

143
00:08:26,730 --> 00:08:31,020
我们看到它与劈开开发人员劈开PTSA劈开一号一起回来了。
And we see it comes back with Slash dev slash PTSA slash one.

144
00:08:31,050 --> 00:08:31,570
好的。
OK.

145
00:08:31,650 --> 00:08:37,860
现在我要做的是重定向来自输入ATX磁带的内容。
Now what I'm going to do is I'm going to redirect the the the content from input ATX tape.

146
00:08:37,950 --> 00:08:39,650
所以就像这样。
So just like this.

147
00:08:40,210 --> 00:08:47,040
我不会将其写入文件，而是将其写入到此位置劈开定义劈开PTSA劈开
And instead of writing it to a file I'm going to write it to this location slash def slash PTSA slash

148
00:08:47,070 --> 00:08:51,320
一个所以劈开定义劈开PTSA劈开一个。
one so slash def slash PTSA slash one.

149
00:08:51,440 --> 00:08:52,050
好的。
OK.

150
00:08:52,080 --> 00:08:59,970
当我按Enter键时，我的天哪，我们可以看到数据已经从一个终端传递到
And when I press Enter Oh my goodness we can see that the data has been passed from one terminal to

151
00:09:00,060 --> 00:09:00,450
再来一杯。
another.

152
00:09:00,450 --> 00:09:05,880
它现在有点像一个非常垃圾的即时消息系统，但这并不是特别有用
It's kind of like a really rubbish instant messaging system right now but this isn't particularly useful

153
00:09:05,880 --> 00:09:06,730
就其本身而言。
in itself.

154
00:09:06,780 --> 00:09:12,570
它显示了如何使用重定向在整个计算机甚至整个计算机上传递数据
It shows how redirection can be used to pass data around your entire computer and even over computer

155
00:09:12,570 --> 00:09:13,490
我听说过的电视网。
networks I've heard.

156
00:09:13,530 --> 00:09:15,500
所以这是相当令人惊讶的。
So that's pretty amazing.

157
00:09:15,890 --> 00:09:16,710
真是太棒了。
So how awesome.

158
00:09:16,710 --> 00:09:21,870
您知道，了解您需要了解的关于Linux中的重定向的一切，以及Linux系统的美妙之处
You know know everything you need to know about redirection in Linux and the beauty of the Linux system

159
00:09:21,870 --> 00:09:24,130
应该开始变得清晰起来。
should begin to be making itself clear.

160
00:09:24,270 --> 00:09:28,890
现在快速回顾一下，您了解到标准输入、标准输出和标准错误都是流
Now as a quick recap you learned that standard input standard output and standard error are streams

161
00:09:28,890 --> 00:09:35,130
数据，就像普通的水流一样，从某个地方流到某个地方，然后重定向到某个地方
of data and like normal water streams that flow comes from somewhere and goes to somewhere redirection

162
00:09:35,170 --> 00:09:38,520
就是控制我们使用重定向。
is all about controlling that we're using redirection.

163
00:09:38,520 --> 00:09:42,990
您可以控制标准输出和标准错误流的位置，也可以控制标准输出和标准错误流的位置
You can control where standard output and standard error streams go and you can control where standard

164
00:09:43,080 --> 00:09:44,190
输入来自。
input comes from.

165
00:09:44,430 --> 00:09:47,540
您还了解到，这些数据流具有与其相关联的数字。
You also learned that these data streams have numbers associated with them.

166
00:09:47,670 --> 00:09:51,390
标准输入为流编号0，标准输出流编号为1。
Standard Input is stream number 0 and standard output stream number one.

167
00:09:51,600 --> 00:09:54,130
所以这个错误是第二号流。
And so that error is stream number two.

168
00:09:54,230 --> 00:09:57,280
然后，您了解了可用于重定向的不同符号。
You then learned about the different symbols that can be used for redirection.

169
00:09:57,300 --> 00:09:59,910
它们基本上是大于号和小于号。
They are basically the greater than and less than signs.

170
00:09:59,910 --> 00:10:04,470
请记住，如果您要重定向输出，则灰色的无符号表示文件将被擦除
Just remember that if you're redirecting output one gray of unsigned means that the file will be erased

171
00:10:04,500 --> 00:10:06,510
或者在你写之前被截断。
or truncated before you write to it.

172
00:10:06,660 --> 00:10:08,490
因此，如果您不想丢失其中的数据。
So if you don't want to lose the data that's in there.

173
00:10:08,580 --> 00:10:11,790
请确保使用大于号将数据追加到文件。
Make sure to use to greater than signs to append data to the file.

174
00:10:11,790 --> 00:10:15,030
换句话说，将数据添加到已有的数据中。
In other words add data to what's already there.

175
00:10:15,030 --> 00:10:18,600
现在，您可以使用重定向做一些更酷的事情，但它们不太常见
Now there are a few more cool things that you can do with redirection but they're less common than what

176
00:10:18,600 --> 00:10:20,540
您已经在这最后几个视频中学到了。
you've learned in these last few videos.

177
00:10:20,550 --> 00:10:25,350
如果你很好奇，我在课程资源里放了一个链接，你可以在那里了解更多关于重定向的知识。
So if you're curious I've put a link where you can learn more about redirection in the lecture resources.

178
00:10:25,590 --> 00:10:31,800
但是有一个问题现在一定在您的脑海中挥之不去，那就是我如何才能将输出从一个
But one question that must be burning in your head right now is how can I redirect the output from one

179
00:10:31,800 --> 00:10:33,750
命令传递给另一个人的输入。
command to the input of another.

180
00:10:33,750 --> 00:10:35,020
肯定有办法的。
Surely there must be a way.

181
00:10:35,220 --> 00:10:41,160
这个过程被称为管道，在我看来，这是Linux皇冠上的明珠
Well that process is known as piping and it is in my opinion that that's the crown jewel of the Linux

182
00:10:41,160 --> 00:10:45,480
命令行管道可能是命令行允许您做的最重要的事情，因为它
command line piping is probably the most important thing that the command line lets you do because it

183
00:10:45,480 --> 00:10:50,550
获取做一件事做得很好的所有命令，并允许您将它们绑定在一起
takes all of the commands that do one thing very very very well and allows you to tie them together

184
00:10:50,550 --> 00:10:54,030
基本上可以无缝地做任何你想做的事。
seamlessly to do basically anything that you want.

185
00:10:54,030 --> 00:10:59,530
掌握管道肯定会给你超能力，这样你才能掌握管道的力量，获得超能力。
Mastering piping would definitely give you superpowers so to master the power of piping and gain superpowers.

186
00:10:59,550 --> 00:11:01,470
我将在下一个视频中见到你。
I'll see you in the next video.

