1
00:00:00,840 --> 00:00:05,370
Hello you beautiful people so in the last video you saw how to redirect standard output.

2
00:00:05,410 --> 00:00:09,490
And in this video we're going to be picking that up and continuing by learning how to redirect standard

3
00:00:09,760 --> 00:00:11,410
era and standard input.

4
00:00:11,530 --> 00:00:12,740
So let's start with standard error.

5
00:00:12,740 --> 00:00:14,290
How do you go about redirecting that.

6
00:00:14,380 --> 00:00:19,090
Well some of there are works in very much the same way a standard output than the number for the standard

7
00:00:19,090 --> 00:00:22,740
error data stream is the number to sort of redirects standard error.

8
00:00:22,840 --> 00:00:27,670
You would type cat and then instead of one and then agree and unsigned which is what we use for standard

9
00:00:27,670 --> 00:00:32,060
output you just have to because the data stream of a standard error is number two.

10
00:00:32,290 --> 00:00:38,470
And this would redirect the standard error from the cat command to Arundhati ex-state and to append

11
00:00:38,710 --> 00:00:43,960
the standard error to whatever is already in aridity XTi you would do the two arrows.

12
00:00:43,960 --> 00:00:49,600
So remember the difference between the one arrow and the two arrows is the one arrow will delete everything

13
00:00:49,600 --> 00:00:53,550
that's in the file before a pen before writing to it and so it will truncate the file.

14
00:00:53,650 --> 00:00:57,980
And two arrows will append or add to what already there.

15
00:00:58,060 --> 00:01:00,210
OK so let's demonstrate this.

16
00:01:00,260 --> 00:01:03,600
The cat's command doesn't have the k option.

17
00:01:03,700 --> 00:01:06,970
OK so if I do cat give it the k option and just type blah.

18
00:01:07,000 --> 00:01:07,370
Right.

19
00:01:07,510 --> 00:01:09,690
We're going to get an error and it's going to say Invalid option.

20
00:01:09,760 --> 00:01:11,590
K try cat help.

21
00:01:11,590 --> 00:01:13,870
For more information.

22
00:01:13,960 --> 00:01:15,740
So this is an error message.

23
00:01:15,880 --> 00:01:22,540
So therefore it was output on the standard error data stream and the standard data stream is by default

24
00:01:22,540 --> 00:01:25,390
connected to a terminal and therefore we see in our terminal.

25
00:01:25,420 --> 00:01:27,730
But let's redirect it to Arundhati XTi.

26
00:01:27,730 --> 00:01:32,770
So unimpressed the up are ok to save myself some typing and I'm going to type the number two and then

27
00:01:32,830 --> 00:01:37,420
a great unsigned and say redirect that to RTX XTi.

28
00:01:37,460 --> 00:01:43,870
OK so I'm saying Run this and redirect the the Sendero to Arati active.

29
00:01:43,900 --> 00:01:48,160
So when I press Enter we first of all we notice that nothing popped out on our terminal which is a good

30
00:01:48,160 --> 00:01:48,650
sign.

31
00:01:48,790 --> 00:01:52,820
When we open up our files we can see there's a file called aerobatics.

32
00:01:52,840 --> 00:01:59,470
And when I open it we can see that indeed the error message has been sent to that location.

33
00:01:59,650 --> 00:02:04,420
A common use for this kind of for redirecting standard error is to keep track of log messages coming

34
00:02:04,420 --> 00:02:06,530
from web servers and things like that.

35
00:02:06,670 --> 00:02:10,260
But a common mistake is to use just one arrow like we have here.

36
00:02:10,360 --> 00:02:10,800
OK.

37
00:02:10,960 --> 00:02:18,750
Because if I keep doing that what that means is it will delete what's in the file before before it sends.

38
00:02:18,760 --> 00:02:22,550
Standard error against If I keep doing the OK.

39
00:02:22,660 --> 00:02:24,720
Imagine a new era happens every time.

40
00:02:24,790 --> 00:02:25,180
OK.

41
00:02:25,330 --> 00:02:30,030
If I keep doing an open air 0.60 only the most recent error has been saved.

42
00:02:30,280 --> 00:02:33,360
But if my Instead of having one arrow I have two arrows.

43
00:02:33,400 --> 00:02:36,560
Now I'm going to append each area on top of each other.

44
00:02:36,760 --> 00:02:37,380
OK.

45
00:02:37,660 --> 00:02:41,230
Which is exactly what you want with a log file because you want to be able to scroll back and see what's

46
00:02:41,230 --> 00:02:43,470
happened in the past because it's open again.

47
00:02:44,020 --> 00:02:47,110
Now we can see that the errors are being added on top of each other.

48
00:02:47,110 --> 00:02:51,070
So that's the difference between having the one arrow and the two arrows the two arrows pens onto what

49
00:02:51,070 --> 00:02:52,380
was already there.

50
00:02:52,450 --> 00:02:53,230
OK.

51
00:02:53,230 --> 00:02:57,510
And that's really what you need for standard era.

52
00:02:57,700 --> 00:03:02,260
Now you can of course redirect standard error and standard output at the same time.

53
00:03:02,260 --> 00:03:09,580
So for example we could type the cat command and redirect output to output RTX t member that standard

54
00:03:09,580 --> 00:03:15,880
output data stream number one and we could also redirect standard error to another place called error

55
00:03:16,560 --> 00:03:21,220
XTi and we can make sure that we've that we append both of them by making sure the two arrows at both

56
00:03:21,220 --> 00:03:22,060
places.

57
00:03:22,060 --> 00:03:26,630
And then when we start something like Linux is amazing.

58
00:03:27,040 --> 00:03:29,550
And then we cancel when we open up our file browser here.

59
00:03:29,920 --> 00:03:31,920
We will see that we now have two files.

60
00:03:31,930 --> 00:03:34,550
I would like to see an output that takes two output.

61
00:03:34,630 --> 00:03:40,060
DXi contains Linux is amazing and standard error the error that actually doesn't contain thing because

62
00:03:40,060 --> 00:03:42,880
there were actually no errors from this output.

63
00:03:42,880 --> 00:03:47,710
It was a perfectly valid command there were no errors required but that is how you would go about doing

64
00:03:47,710 --> 00:03:48,160
it.

65
00:03:48,160 --> 00:03:52,570
So this is how we would we would be redirecting standard output to output to actually we can tell that

66
00:03:52,570 --> 00:03:57,490
because the number one is here and standard error to a file called aridity XTi.

67
00:03:57,490 --> 00:04:02,860
Now we can see what the number and the error is that standard error would be appended and so would output

68
00:04:02,860 --> 00:04:03,470
ATX T.

69
00:04:03,490 --> 00:04:09,160
Now we actually remember you actually don't need the one output text so you could actually just do that

70
00:04:09,730 --> 00:04:15,070
and do say Linux is very amazing.

71
00:04:15,070 --> 00:04:20,050
And when I look at that we can see output it has had it's text appended.

72
00:04:20,050 --> 00:04:24,170
And again there will still be no errors in aeronautics because there weren't any errors.

73
00:04:24,230 --> 00:04:27,040
But you can see here that without using the number one this will still work.

74
00:04:27,040 --> 00:04:32,240
But you do still need the number two for standard error because that Shawk isn't available.

75
00:04:32,320 --> 00:04:32,730
OK.

76
00:04:32,800 --> 00:04:39,040
So you can only get rid of the number one for the standard output data stream OK.

77
00:04:39,050 --> 00:04:39,440
Brilliant.

78
00:04:39,440 --> 00:04:42,950
So you know I understand how to redirect standard output and standard error.

79
00:04:43,160 --> 00:04:44,700
So how about standard input.

80
00:04:44,930 --> 00:04:49,190
Well actually that's relatively straightforward at the moment the cat command is looking for standard

81
00:04:49,190 --> 00:04:50,740
input from the keyboard.

82
00:04:50,870 --> 00:04:54,160
What if we told it to get standard input from a file instead.

83
00:04:54,350 --> 00:04:59,730
So let's make a file called input RTX T and type in the words hello world.

84
00:04:59,770 --> 00:05:04,700
I so what we're going to do is we're going to use the cat command and we'll get output that now to a

85
00:05:04,700 --> 00:05:07,210
file called input Datti XTi.

86
00:05:07,490 --> 00:05:09,850
OK so we can make a file We're going to put in there.

87
00:05:09,980 --> 00:05:11,390
Hello world.

88
00:05:11,720 --> 00:05:19,050
Now when I cancel the we have now effectively created a file called input ATX D and in there we have.

89
00:05:19,130 --> 00:05:20,470
Hello world.

90
00:05:20,670 --> 00:05:21,130
OK.

91
00:05:21,380 --> 00:05:25,070
So you can see how you can use redirection to create files like this as well.

92
00:05:25,070 --> 00:05:29,010
Now let's use now let's try and read from that file using the cat command again.

93
00:05:29,080 --> 00:05:34,250
OK how can we make the contents of this file this in politics file be read into standard input for the

94
00:05:34,250 --> 00:05:38,510
cat command so that we don't have to type it later on let's say.

95
00:05:38,660 --> 00:05:41,860
Well the standard input stream has the number of zero.

96
00:05:41,870 --> 00:05:47,480
So what we can do is we can type cat the number 0 and instead of the grey of unsigned which is like

97
00:05:47,480 --> 00:05:49,950
an output you actually use the less than sign.

98
00:05:50,030 --> 00:05:52,660
Ok we say then input RTX.

99
00:05:53,060 --> 00:05:54,340
Or as a shortcut.

100
00:05:54,410 --> 00:05:58,600
Because the standard input stream is the only way that you can actually input.

101
00:05:58,730 --> 00:05:59,720
You don't even need the zero.

102
00:05:59,750 --> 00:06:02,190
You just put the less than sign my back.

103
00:06:02,480 --> 00:06:06,520
Now when we do this we see the hello world message pop up on the screen.

104
00:06:06,530 --> 00:06:11,450
Now this is because cat has read the file from standard input and output it to standard output which

105
00:06:11,450 --> 00:06:14,780
is by default connected to our terminal.

106
00:06:14,780 --> 00:06:16,270
Now here's a mini challenge.

107
00:06:16,280 --> 00:06:16,630
OK.

108
00:06:16,670 --> 00:06:24,680
I want you to get cats to read standard input from input ATX T and redirect the output to.

109
00:06:24,690 --> 00:06:27,410
Hello Dr. XTi.

110
00:06:27,710 --> 00:06:29,500
And make it so that that happens.

111
00:06:29,590 --> 00:06:30,040
OK.

112
00:06:30,110 --> 00:06:31,900
So go ahead and give that a go.

113
00:06:31,910 --> 00:06:38,570
Pause the video now and try to get cat to read standard input from input that he XTi and redirect the

114
00:06:38,570 --> 00:06:42,650
output to hello itx he then come back to see how you did

115
00:06:49,890 --> 00:06:53,160
did you manage it was here's how I would go about it.

116
00:06:53,370 --> 00:06:58,210
I would first redirect cat standard input so that it comes from that he XTi.

117
00:06:58,350 --> 00:07:05,840
So we're just going to do by law and then I would put it to a file called Hello Datti XTi.

118
00:07:05,900 --> 00:07:06,440
OK.

119
00:07:06,570 --> 00:07:12,450
Now to make it easier to read I might add the stream numbers so I might say I am going to redirect into

120
00:07:12,450 --> 00:07:13,430
stream 0.

121
00:07:13,470 --> 00:07:19,720
But it takes t and I'm going to redirect from stream 1 which is standard output to hello 0.60.

122
00:07:19,770 --> 00:07:21,400
It's totally up to you which one you use.

123
00:07:21,420 --> 00:07:22,530
This might be a way to do it.

124
00:07:22,530 --> 00:07:28,730
It might not be but just remember that 0 is standard in part one is standard put into standard error.

125
00:07:28,820 --> 00:07:34,130
OK and here we can see that we're reading input ATX t into standard input.

126
00:07:34,140 --> 00:07:39,750
It's quite easy to see that quite quite graphically and we're writing from standard output into Hello

127
00:07:39,750 --> 00:07:40,580
Dr. XTi.

128
00:07:40,710 --> 00:07:41,160
OK.

129
00:07:41,340 --> 00:07:47,790
So if we go ahead and do that now we should be able to see that in fact yes we now have a file called

130
00:07:47,820 --> 00:07:50,840
Hello tactics and when we open it we see Hello world.

131
00:07:50,850 --> 00:07:52,370
Isn't that amazing.

132
00:07:52,530 --> 00:07:55,050
That's how you can redirect data all around your computer.

133
00:07:55,050 --> 00:07:57,300
Now here's one more mindblowing thing.

134
00:07:57,510 --> 00:08:01,460
Everything in Linux is actually treated the same as a file.

135
00:08:01,890 --> 00:08:03,480
Even terminals.

136
00:08:03,750 --> 00:08:09,300
So let me open up another term along and use the shortcut control Altamonte and I get to open them right

137
00:08:09,300 --> 00:08:13,570
next to one of the song and put one over here and I'm going to put one over here.

138
00:08:13,830 --> 00:08:14,600
OK.

139
00:08:14,700 --> 00:08:18,640
Now in the other terminal this one over this new one on the right.

140
00:08:18,750 --> 00:08:20,770
I'm going to run the T.T. y command.

141
00:08:20,790 --> 00:08:26,200
Now the TDY command will actually tell us where this terminal is located where on the file system it

142
00:08:26,200 --> 00:08:26,650
is.

143
00:08:26,730 --> 00:08:31,020
And we see it comes back with Slash dev slash PTSA slash one.

144
00:08:31,050 --> 00:08:31,570
OK.

145
00:08:31,650 --> 00:08:37,860
Now what I'm going to do is I'm going to redirect the the the content from input ATX tape.

146
00:08:37,950 --> 00:08:39,650
So just like this.

147
00:08:40,210 --> 00:08:47,040
And instead of writing it to a file I'm going to write it to this location slash def slash PTSA slash

148
00:08:47,070 --> 00:08:51,320
one so slash def slash PTSA slash one.

149
00:08:51,440 --> 00:08:52,050
OK.

150
00:08:52,080 --> 00:08:59,970
And when I press Enter Oh my goodness we can see that the data has been passed from one terminal to

151
00:09:00,060 --> 00:09:00,450
another.

152
00:09:00,450 --> 00:09:05,880
It's kind of like a really rubbish instant messaging system right now but this isn't particularly useful

153
00:09:05,880 --> 00:09:06,730
in itself.

154
00:09:06,780 --> 00:09:12,570
It shows how redirection can be used to pass data around your entire computer and even over computer

155
00:09:12,570 --> 00:09:13,490
networks I've heard.

156
00:09:13,530 --> 00:09:15,500
So that's pretty amazing.

157
00:09:15,890 --> 00:09:16,710
So how awesome.

158
00:09:16,710 --> 00:09:21,870
You know know everything you need to know about redirection in Linux and the beauty of the Linux system

159
00:09:21,870 --> 00:09:24,130
should begin to be making itself clear.

160
00:09:24,270 --> 00:09:28,890
Now as a quick recap you learned that standard input standard output and standard error are streams

161
00:09:28,890 --> 00:09:35,130
of data and like normal water streams that flow comes from somewhere and goes to somewhere redirection

162
00:09:35,170 --> 00:09:38,520
is all about controlling that we're using redirection.

163
00:09:38,520 --> 00:09:42,990
You can control where standard output and standard error streams go and you can control where standard

164
00:09:43,080 --> 00:09:44,190
input comes from.

165
00:09:44,430 --> 00:09:47,540
You also learned that these data streams have numbers associated with them.

166
00:09:47,670 --> 00:09:51,390
Standard Input is stream number 0 and standard output stream number one.

167
00:09:51,600 --> 00:09:54,130
And so that error is stream number two.

168
00:09:54,230 --> 00:09:57,280
You then learned about the different symbols that can be used for redirection.

169
00:09:57,300 --> 00:09:59,910
They are basically the greater than and less than signs.

170
00:09:59,910 --> 00:10:04,470
Just remember that if you're redirecting output one gray of unsigned means that the file will be erased

171
00:10:04,500 --> 00:10:06,510
or truncated before you write to it.

172
00:10:06,660 --> 00:10:08,490
So if you don't want to lose the data that's in there.

173
00:10:08,580 --> 00:10:11,790
Make sure to use to greater than signs to append data to the file.

174
00:10:11,790 --> 00:10:15,030
In other words add data to what's already there.

175
00:10:15,030 --> 00:10:18,600
Now there are a few more cool things that you can do with redirection but they're less common than what

176
00:10:18,600 --> 00:10:20,540
you've learned in these last few videos.

177
00:10:20,550 --> 00:10:25,350
So if you're curious I've put a link where you can learn more about redirection in the lecture resources.

178
00:10:25,590 --> 00:10:31,800
But one question that must be burning in your head right now is how can I redirect the output from one

179
00:10:31,800 --> 00:10:33,750
command to the input of another.

180
00:10:33,750 --> 00:10:35,020
Surely there must be a way.

181
00:10:35,220 --> 00:10:41,160
Well that process is known as piping and it is in my opinion that that's the crown jewel of the Linux

182
00:10:41,160 --> 00:10:45,480
command line piping is probably the most important thing that the command line lets you do because it

183
00:10:45,480 --> 00:10:50,550
takes all of the commands that do one thing very very very well and allows you to tie them together

184
00:10:50,550 --> 00:10:54,030
seamlessly to do basically anything that you want.

185
00:10:54,030 --> 00:10:59,530
Mastering piping would definitely give you superpowers so to master the power of piping and gain superpowers.

186
00:10:59,550 --> 00:11:01,470
I'll see you in the next video.
