1
00:00:00,450 --> 00:00:03,200
大家好，美丽的人们，欢迎收看第三部分。
Hello you beautiful people and welcome to Part 3.

2
00:00:03,190 --> 00:00:09,360
我们关于管道的讨论的最后一部分，在第一部分中，您了解了基本概念
Our final part of our discussion on piping now in part number one you learned about the basic concepts

3
00:00:09,360 --> 00:00:14,070
您可以看到，管道就是将一个命令的标准输出连接到
of piping and you saw that piping is all about connecting the standard output of one command to the

4
00:00:14,070 --> 00:00:16,320
另一个命令的标准输入。
standard input of another command.

5
00:00:16,440 --> 00:00:21,990
在第二部分中，您了解了如何通过管道实际传递数据，以及如何拍摄快照
And in part two you saw how you can actually pass data through your pipeline but also take snapshots

6
00:00:21,990 --> 00:00:28,050
使用名为命令的工具将这些快照保存到文件中
of the data as it flows through and save those snapshots into a file using something called the command

7
00:00:28,260 --> 00:00:33,210
该命令非常有用，因为通过执行正常的重定向，您会中断管道，但通过
and the command is really useful because by doing normal redirection you break your pipeline but by

8
00:00:33,210 --> 00:00:37,920
使用该命令，您可以保存数据，但仍然可以保持管道畅通。
using the command you can save data but still keep your pipeline flowing.

9
00:00:37,920 --> 00:00:42,330
现在我们与三个人合作，我们将把对管道的理解提升到一个全新的水平，使用
Now we partnered with three we're going to take that understanding of piping to a whole new level using

10
00:00:42,330 --> 00:00:44,790
一种叫做X Ogg的命令。
something called the X Ogg's command.

11
00:00:44,790 --> 00:00:50,280
现在请记住，管道就是将一个命令的标准输出连接到标准输入
Now remember piping is all about connecting the standard output of one command to the standard input

12
00:00:50,400 --> 00:00:51,810
执行另一个命令。
of another command.

13
00:00:51,810 --> 00:00:56,190
现在，并不是所有的命令实际上都接受标准输入。
Now not all commands actually even accept standard input.

14
00:00:56,190 --> 00:01:02,090
有些只接受命令行参数，这正是XOgg命令的用武之地。
Some only accept command line arguments and that's exactly where the X Ogg's command comes in.

15
00:01:02,310 --> 00:01:09,090
Exarchs命令仅允许您将管道数据转换为命令的命令行参数，除非
The Exarchs command allows you to convert piped data into command line arguments for commands only except

16
00:01:09,300 --> 00:01:14,110
命令行参数，这样您就可以保持管道运行，而不必在任何时候将其断开。
command line arguments so that you can keep your pipe going without having to break it at any point.

17
00:01:14,130 --> 00:01:19,060
所以exarchs命令就是缺失的部分，它将使你的管道基本上是坚不可摧的。
So the Exarchs command is that missing piece it's going to make your pipelines basically indestructible.

18
00:01:19,200 --> 00:01:22,920
我们将教你们如何使用它，然后我们还将对管道启动进行总结
So we're going to teach you how to use that and then we're also going to have a summary of piping start

19
00:01:22,920 --> 00:01:23,500
来完成这件事。
to finish.

20
00:01:23,520 --> 00:01:26,030
所以要确保这些概念真的被理解了。
So make sure that these concepts really really sink in.

21
00:01:26,040 --> 00:01:30,390
在这段视频的最后，你将成为管道概念的大师，在你可能已经
And by the end of this video you're going to be the master of piping concepts after you've probably

22
00:01:30,390 --> 00:01:35,950
我收到了你在互联网上任何地方都能找到的最全面的解释。
received the most comprehensive explanation of it that you'll be able to find anywhere on the Internet.

23
00:01:36,120 --> 00:01:43,370
好了，伙计们，让我们继续前进，现在跳到一辆邦图上，看看这些东西在实践中的表现。
So there we are guys let's go ahead and jump right over now into a buntu and see this stuff in practice.

24
00:01:43,480 --> 00:01:47,140
好的，让我们来看看X Ogg的命令是如何工作的。
OK so let's take a look at the X Ogg's command works.

25
00:01:47,340 --> 00:01:52,100
例如，假设我们再次使用DATE命令，并且我们正在获取数据
Let's say that we are again playing around with the date command for example and we're getting the data

26
00:01:52,110 --> 00:01:53,680
那是从我们的系统里出来的。
that's coming out of our system.

27
00:01:53,810 --> 00:01:59,700
现在，您认为如果我们使用date命令并通过管道将其输入Echo，会发生什么情况。
Now what do you think will happen if we take the date command and we pipe it into Echo.

28
00:01:59,760 --> 00:02:05,850
现在记住Echo是非常简单的，如果我只接受Echo，当我说给Echo你好时，它只会说你好
Now remember Echo is very simple if I just take Echo when I say give echo Hello it'll just say hello

29
00:02:05,850 --> 00:02:06,380
背。
back.

30
00:02:06,390 --> 00:02:11,230
如果我接受DATE命令并通过管道将其发送到Echo，您认为会发生什么情况？
So what do you think will happen if I take the date command and pipe that into Echo.

31
00:02:12,010 --> 00:02:17,000
您可能会认为，当我按下When键时，当我按Enter键时，DATE命令将在当天过去
Well you might think that when I press when when I press enter the date command will pass on the day

32
00:02:17,010 --> 00:02:20,870
进入Echo，它会显示出日期是对是错。
into Echo and it will spit out the date right and wrong.

33
00:02:21,180 --> 00:02:25,700
实际上，Echo不接受标准输入。
Actually what happened is Echo doesn't accept standard input.

34
00:02:25,800 --> 00:02:29,760
所以这里发生的事情实际上是人们在使用管道时会犯的一个常见错误
So what happened here this is a common mistake actually that people make when using pipelines for the

35
00:02:29,760 --> 00:02:32,570
他们第一次试图用管道把东西输送到Echo。
first time they try to pipe things into Echo.

36
00:02:32,580 --> 00:02:35,910
现在Echo不接受标准输入。
Now Echo doesn't accept standard input.

37
00:02:35,910 --> 00:02:38,550
事实上，它只接受命令行参数。
In fact it only accepts command line arguments.

38
00:02:38,550 --> 00:02:44,540
如果我尝试这样做，我会再次键入echo Hello，即使我正在通过管道将date命令输入其中。
If I try to do this I type to echo Hello again even though I'm piping with the date command into it.

39
00:02:44,610 --> 00:02:49,330
所以我继续介绍，你们可以看到，它只处理了它的命令行参数。
So I go ahead presenta you can see that it's only processed its command line arguments.

40
00:02:49,560 --> 00:02:56,370
因此问题变成了我们如何将数据从我们的管道传递到一个不接受
So the question becomes how could we pass the data from our pipeline into a command that doesn't accept

41
00:02:56,640 --> 00:02:58,190
标准输入。
standard input.

42
00:02:58,620 --> 00:03:05,400
关键是将数据从标准输入转换成命令行参数，这样命令就可以
Well the key is to convert the data from standard input into command line arguments so the command can

43
00:03:05,400 --> 00:03:07,500
继续像往常一样工作。
continue to work like normal.

44
00:03:07,620 --> 00:03:13,530
所以你这样做的方式是，不是用管道把馅饼直接输送到Echo，而是用管道把它输送到Echo
So the way that you do that is that instead of pie instead of piping it into Echo directly you pipe

45
00:03:13,530 --> 00:03:16,770
它变成了一种叫做X OGS命令的东西。
it into something called the X OGs command.

46
00:03:16,770 --> 00:03:25,260
现在，X OGS命令将从标准输入转换数据，并将其放入命令中
Now the X OGs command will convert the data from standard input and it will put it instead into a command

47
00:03:25,260 --> 00:03:26,280
行参数。
line arguments.

48
00:03:26,280 --> 00:03:28,350
所以现在我要回音了。
So now I do echo.

49
00:03:28,350 --> 00:03:33,240
所以我基本上把它放入外显子，然后给出X参数回声来处理。
So I basically put it into exons and then give X args echo to work with.

50
00:03:33,330 --> 00:03:34,170
当我按Enter键时。
When I press enter.

51
00:03:34,170 --> 00:03:37,840
现在您可以看到，它现在与日期遥相呼应。
Now you can see that now it echoes out the date.

52
00:03:37,980 --> 00:03:38,240
好的。
OK.

53
00:03:38,250 --> 00:03:39,070
这不是很酷吗。
Isn't that cool.

54
00:03:39,270 --> 00:03:44,870
现在我还可以给echo自己的命令行参数，所以我也可以给它Hello。
Now I can also give echo its own its own command line argument so I could give it also Hello.

55
00:03:44,880 --> 00:03:49,830
将会发生的情况是，它现在将处理这两个参数，除非用户处理它自己的命令行参数
And what would happen is it will now process both except people process its own command line arguments

56
00:03:49,890 --> 00:03:50,520
第一。
first.

57
00:03:50,520 --> 00:03:56,850
所以这是需要记住的事情，但它确实让他们两个都回声了，这比
So that's something to bear in mind but it did indeed Echo both of them out which is a lot better than

58
00:03:56,850 --> 00:03:58,250
我们之前就有过。
we have before now.

59
00:03:58,380 --> 00:04:03,680
现在我们实际上可以继续下去，因为输出的数据仍然是标准输出。
Now we can actually continue to pipe down because the data that comes out is still on standard output.

60
00:04:03,840 --> 00:04:11,490
因此，基本上，X OGS就像是一个小石膏，或者是一个命令不接受的小补丁
So basically X OGs is like a little plaster or a little fix for when for when a command does not accept

61
00:04:12,060 --> 00:04:16,770
标准，它不接受标准输入，而只接受命令行参数，您可以使用X参数
standard It does not accept standard input but only accept command line arguments you can use X args

62
00:04:16,770 --> 00:04:20,570
为了绕过这个问题，好的，然后继续做你的管道。
to get around the problem ok and continue doing your piping.

63
00:04:20,760 --> 00:04:25,890
因此，假设我们希望它只在一周中的某一天发出回声。
So let's say that we wanted for it to echo out just the day of the week.

64
00:04:26,040 --> 00:04:30,660
我们能做的就是在命令中输入DATE POTA，就像我们已经做了一百万次一样
What we can do is we could say date POTA into the command just like we've been doing a million times

65
00:04:30,900 --> 00:04:36,930
告诉它分隔符是空格，告诉它我们需要第一个字段，然后您可以通过管道
tell it that the delimiter is a space tell it that we want the first field and then you could pipe that

66
00:04:37,050 --> 00:04:37,990
进入Echo。
into Echo.

67
00:04:38,040 --> 00:04:42,070
请记住，这是行不通的，因为Echo不接受标准输入。
Remember this isn't going to work because Echo doesn't accept standard input.

68
00:04:42,180 --> 00:04:48,210
因此，我们使用X ARGS将数据从标准输入转换为命令行参数GET TELL X OGS
So we convert the data from standard input into a command line argument using X args give tell X OGs

69
00:04:48,240 --> 00:04:49,920
嘿我们想让你和Echo一起工作。
hey we want you to work with Echo.

70
00:04:50,070 --> 00:04:55,660
现在我们将看到它在一周中的某一天弹出，也就是星期一。
And now we'll see that it pops out the day of the week which is Monday.

71
00:04:55,680 --> 00:05:00,690
让我给你举个例子，这可能会让你的X Exarchs能力
So let me give you a an example where this might take you this X Exarchs ability what it might be able

72
00:05:00,690 --> 00:05:01,560
为你做的事。
to do for you.

73
00:05:01,560 --> 00:05:06,510
举个例子，如果我们全天都得到DXi，我们这里就有一些数据。
So for example if we take our full day got DXi far we've got some data in here.

74
00:05:06,630 --> 00:05:12,940
让我在这里创建一个新文档，我将其命名为Press Control并要求保存。
Let me just create a new document here I'm going to call it Press Control and ask to save.

75
00:05:13,130 --> 00:05:14,140
是的，这样行得通。
Yep that works.

76
00:05:14,190 --> 00:05:17,010
我要把它叫做“删除我”。
I'm going to call it delete me.

77
00:05:17,190 --> 00:05:18,630
西蒂医生。
Dr. XTi.

78
00:05:18,960 --> 00:05:19,540
好的。
OK.

79
00:05:19,770 --> 00:05:24,870
所以我可以调用删除我，不接受它们，我们看，我们在这里有一个新文件，名为
So I can make that call to delete me not to take them and we look we've got a new file in here called

80
00:05:24,870 --> 00:05:26,110
请不要在这里删除我。
Delete me not here.

81
00:05:26,460 --> 00:05:31,100
现在有一个命令，您将在本课程后面的所有关于一节中介绍
Now there's a command that you'll be coming on to later on in the course in the in the section all about

82
00:05:31,410 --> 00:05:38,010
以及导航文件系统和类似的内容，即此部分之后的部分。
and navigating the file system and things like that which is the section after this one.

83
00:05:38,010 --> 00:05:41,210
但是里面有一个叫做R.M命令的注释。
But there's a comment in there called the r.m command.

84
00:05:41,220 --> 00:05:44,580
现在他们在克兰斯顿的Remove，这是删除东西的命令。
Now they are in Cranston's for Remove it's the command that delete stuff.

85
00:05:44,640 --> 00:05:50,690
如果我输入delete me datti xti，我点击End在左边观看或者就在这里观看。
And if I type delete me Datti XTi and I click end to watch on the left watch or just over here.

86
00:05:50,760 --> 00:05:51,560
好的。
OK.

87
00:05:52,110 --> 00:05:53,500
该文件已被删除。
The file has been deleted.

88
00:05:53,700 --> 00:05:54,260
好的。
OK.

89
00:05:54,420 --> 00:06:00,040
因此您会注意到，我们实际上为r.m命令提供了一个命令行参数。
So you'll notice here that we actually gave the r.m command a command line argument.

90
00:06:00,060 --> 00:06:01,780
好的，我们在命令行上谈过。
OK we talked on the command line.

91
00:06:01,890 --> 00:06:03,390
我们给它起了一个文件名。
We gave it a filename.

92
00:06:03,390 --> 00:06:07,630
现在我们想要做的是，您可能想要在这里放另一个文件。
Now what we might want to do was you might want to have another file over here.

93
00:06:07,800 --> 00:06:08,460
好的。
OK.

94
00:06:08,460 --> 00:06:20,100
调用文件来删除腾讯通这些文件来删除Datti XTi，在那里我将给它命名
Called files to delete RTX these files to delete Datti XTi and in there I'm going to give it the names

95
00:06:20,100 --> 00:06:21,500
完整日期点文本的。
of full date dot text.

96
00:06:21,540 --> 00:06:25,980
今天，如果我把它放在完整的RTX T中，这需要几天的时间。
And today that takes days if I put that in the full date RTX T.

97
00:06:26,070 --> 00:06:31,030
我们还会有今天的另一个，好的，XTi博士。
And we're also going to have what was the other one today Dr. XTi OK.

98
00:06:31,170 --> 00:06:33,900
所以我们有一个包含这两个名字的文件。
So we've got a file that contains those two names.

99
00:06:34,590 --> 00:06:35,340
好的。
OK.

100
00:06:35,340 --> 00:06:38,450
现在我们可以使用cat命令读出该文件。
Now we can read that file out using the cat command.

101
00:06:38,460 --> 00:06:39,420
你以前见过这个。
You've seen this before.

102
00:06:39,470 --> 00:06:46,190
好的，如果我执行cat命令，我说文件要删除，你会看到它是如何给出输出的。
OK so if I do the cat command and I say files to delete you see how it gives me the output.

103
00:06:46,220 --> 00:06:50,330
现在我只要把这些信息输入到我们的收入中，就什么都不会发生了。
Now I can just pipe that information into the our income and nothing will happen.

104
00:06:50,390 --> 00:06:50,920
好的。
OK.

105
00:06:50,930 --> 00:06:55,980
因为陆军司令部只接受命令行的命令行参数。
Because the army command only accepts command line the command line arguments.

106
00:06:56,000 --> 00:07:00,160
但我能做的是读取数据并清除屏幕。
But what I can do is I can read the data and clear the screen.

107
00:07:00,170 --> 00:07:06,480
我现在能做的就是从文件中读取数据以删除这些文件名和Pessah到X参数中
What I can do is I can read the data from files to delete these filenames and Pessah into X args now

108
00:07:06,500 --> 00:07:12,380
X args将把该数据转换为R.M.的当前命令的命令行参数
x args is going to convert that data into command line arguments for the current command of the r.m

109
00:07:12,380 --> 00:07:15,250
命令除命令行参数外。
command does except command line arguments.

110
00:07:15,260 --> 00:07:16,220
所以当我们这么做的时候。
So when we do that.

111
00:07:16,220 --> 00:07:21,860
请注意，如果我只是直接通过管道传递给命令中的r，它不起作用，它会说它缺少一个操作数
Notice if I just piped directly to the r in command it doesn't work it says it's missing an operand

112
00:07:21,860 --> 00:07:23,860
它缺少命令行参数。
it's missing a command line arguments.

113
00:07:23,890 --> 00:07:28,930
好的，但是如果我通过管道将其输入exarchs命令，然后键入R.M.
OK but if I pipe it into the Exarchs command instead and then type r.m.

114
00:07:29,000 --> 00:07:31,520
看看左边现在发生了什么。
Watch what happens now over at the left.

115
00:07:31,520 --> 00:07:35,570
什么时候出来文件被删除了，因为现在R M命令可以工作了。
When is it to come out the files got deleted because now the R M command could work.

116
00:07:35,570 --> 00:07:43,160
实际发生的情况是，如果我们今天编写ram，xti博士和全日点cxi实际上是另一个。
What effectively happened is if we wrote our ram today Dr. XTi and full date dot cxi actually the other

117
00:07:43,160 --> 00:07:46,360
因为文件是以相反的方式写在文件中的。
way round because the file they were written in the other way round in the file.

118
00:07:46,400 --> 00:07:48,850
就好像是我们干的一样。
It's as if we did this.

119
00:07:49,080 --> 00:07:52,530
就好像我们写下了这个命令。
It's as if we wrote out this command.

120
00:07:52,820 --> 00:07:53,790
这个命令在这里。
This command here.

121
00:07:53,900 --> 00:07:57,260
但是，我们只需读取文件并将内容通过管道传输到另一个命令即可。
But instead we just read the file and piped the contents to another command.

122
00:07:57,260 --> 00:08:02,750
因此您可以看到，这就是您可能使用x命令的方式，仅作为一个小小的示例
So you can see that this is how you might potentially use the x command just as a bit of an example

123
00:08:02,750 --> 00:08:07,970
而不是Rizzi，您知道，只需一直使用data命令就可以得到回显。
rather than Rizzi you know just using the data command an echo all the time.

124
00:08:07,970 --> 00:08:13,130
在过去的三个视频中，我们已经介绍了很多东西，所以让我们试着总结一下
So over the past three videos we've covered a whole lot of stuff so let's just try and summarize it

125
00:08:13,160 --> 00:08:17,140
所有的一切都集中在一个地方，这样你就可以自信地拥有一切。
all together in one place so that you can feel confident that you've got it all.

126
00:08:17,150 --> 00:08:22,640
首先，您将了解管道是将一个命令的标准输出连接到
First of all you learn that piping is a process that connects the standard output of one command to

127
00:08:22,640 --> 00:08:28,950
另一个的标准输入，顺便说一句，如果你曾经在橙色SITD中看到这两个词，那么SDD中就会出现这两个词
the standard input of another and by the way if you ever see these two words in orange SITD out in SDD

128
00:08:28,950 --> 00:08:33,180
从现在开始，你知道这分别意味着标准输出和标准输入。
and from now on you know that means standard output and standard input respectively.

129
00:08:33,260 --> 00:08:33,640
好的。
OK.

130
00:08:33,770 --> 00:08:37,480
它是标准误差。
And it s t d e r r is standard error.

131
00:08:37,760 --> 00:08:39,180
所以如果你在周围看到这些东西。
So if you ever see those things around.

132
00:08:39,260 --> 00:08:39,590
好的。
OK.

133
00:08:39,710 --> 00:08:45,020
因此，通过管道将一个命令的标准输出输送到另一个标准重定向的标准输入
So piping K'NEX the standard output of one command to the standard input of another redirection of standard

134
00:08:45,020 --> 00:08:47,030
输出会破坏管道。
output breaks pipelines.

135
00:08:47,060 --> 00:08:52,380
因此，如果您正在制作管道，并且您进行了一些重定向，那么您可以使用
So if you're making a pipeline and you do some redirection you've broken your pipeline you could use

136
00:08:52,380 --> 00:08:55,350
从这一点开始的管道将不再起作用。
the pipeline from that point on will no longer work.

137
00:08:55,350 --> 00:09:00,620
好的，其中一些只是被重定向到一个文件中，默认情况下不能继续传递
OK so some of that is just been redirected into a file by default it can't be continued to be passed

138
00:09:00,620 --> 00:09:01,730
顺着管道往下走。
down the pipeline.

139
00:09:01,730 --> 00:09:09,250
也就是说，除非您使用T命令，所以如果您希望在不中断管道的情况下保存数据快照。
That is unless you use the T command so if you want to save a data snapshot without breaking a pipeline.

140
00:09:09,350 --> 00:09:14,840
改用T命令，这基本上会生成一个假想的T型交汇点，就像您可能会发现的那样
Use the T command instead and that will make basically an imaginary T-junction just like you might find

141
00:09:14,840 --> 00:09:20,810
在您的管道中的水管中，这样您就可以保存您的数据，同时还可以通过
in pipes of water in your pipelines so that you can save your data and also having continue on through

142
00:09:20,810 --> 00:09:22,760
同时连接管道。
the pipeline at the same time.

143
00:09:22,760 --> 00:09:28,070
现在，如果命令不接受标准输入，那么正如我们所知，管道可以将标准输出连接到
Now if a command doesn't accept standard input then as we know piping can connect standard output to

144
00:09:28,070 --> 00:09:31,140
标准输入，那么你怎么还能在你的管道中使用这种输入呢？
standard inputs so how can you still use that kind in your pipeline.

145
00:09:31,370 --> 00:09:36,260
如果您仍然想通过管道连接到它，即使它不接受标准输入，只要命令
Well if you still want to pipe to it even if it doesn't accept standard input as long as the command

146
00:09:36,320 --> 00:09:42,830
接受可以改用x ogs命令的命令行参数以及与一起使用的命令
accepts command line arguments you can use the x OGs command instead and commands that you use with

147
00:09:42,830 --> 00:09:50,000
除了您通过管道传送的命令行参数外，X Ogg的命令还可以有自己的命令行参数
the X Ogg's command can also still have their own command line arguments besides the ones that you piped

148
00:09:50,000 --> 00:09:50,340
为它干杯。
to it.

149
00:09:50,390 --> 00:09:52,750
因此您仍然可以通过管道将数据传送到它。
So you can still pipe data to it.

150
00:09:52,970 --> 00:09:57,500
您仍然可以将数据作为命令行参数进行管道传输，也可以直接在命令行上为其提供自己的参数
You can still pipe data as command line arguments and also give it its own arguments right there on

151
00:09:57,500 --> 00:10:01,430
命令行，但只需了解您在命令行中键入的内容将被处理
the command line but just understand that the ones that you type to be on the command line will be processed

152
00:10:01,700 --> 00:10:02,440
第一。
first.

153
00:10:02,630 --> 00:10:05,280
所以那是一大堆东西，伙计们。
So that's a whole bunch of stuff guys.

154
00:10:05,750 --> 00:10:11,300
这确实是熟练使用Linux命令行的最重要部分。
This really is the most important part of getting good at the Linux command line.

155
00:10:11,450 --> 00:10:17,330
如果您能够理解并且对您在上三个关于管道的视频中学到的内容充满信心
If you can understand and you feel confident in what you've learned in the last three videos about piping

156
00:10:17,720 --> 00:10:23,510
您已经解锁了使用Linux命令行这一皇冠上的明珠，您应该感到非常自豪
you have unlocked the crown jewel of using the Linux command line and you should be massively proud

157
00:10:23,510 --> 00:10:24,100
关于你自己的。
of yourself.

158
00:10:24,230 --> 00:10:28,850
如果你还没有，那就回去看看这些视频，看多少次你就会明白多少次
And if you haven't then just go back watch these videos as many times as it takes for you to get it

159
00:10:28,850 --> 00:10:30,390
下来，记下一些笔记。
down take some notes.

160
00:10:30,410 --> 00:10:35,540
练习，尝试，因为我向你保证，努力是值得的，我真的为你感到骄傲
Practice try stuff out because I promise you the effort will be worth it and I'm really proud of you

161
00:10:35,540 --> 00:10:36,920
感谢你能走到这一步。
for actually making it this far.

162
00:10:36,920 --> 00:10:38,820
你也应该如此。
And so should you as well.

163
00:10:38,840 --> 00:10:43,340
接下来，我们将向您展示一个小技巧，您将如何使用命令行
Now up next we're going to show you a little trick what's going to make your use of the command line

164
00:10:43,370 --> 00:10:44,350
容易多了。
a whole lot easier.

165
00:10:44,510 --> 00:10:49,040
我们将向您展示如何使用别名来保存命令管道
And we're going to show you how you can use something called alias's to save your command pipelines

166
00:10:49,080 --> 00:10:53,420
名字很容易记住，这样以后使用起来就容易多了。
with easy to remember names so they can be just used much easier later on.

167
00:10:53,420 --> 00:10:58,010
因此，一旦您编写了管道，您就不必再次编写它，只需使用名称，它就会出现
So once you've written a pipeline you don't have to write it again just use the name and it will come

168
00:10:58,010 --> 00:11:00,080
没有任何错误。
up without any errors.

169
00:11:00,080 --> 00:11:03,470
所以，所有关于别名和捷径的好东西都可以学习。
So for all the good stuff to learn about aliases and making shortcuts.

170
00:11:03,530 --> 00:11:05,240
我将在下一个视频中见到你。
I'll see you in the next video.

