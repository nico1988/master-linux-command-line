1
00:00:00,450 --> 00:00:01,930
Hello you beautiful people.

2
00:00:01,930 --> 00:00:07,170
Now although each of the Linux commands are very powerful on their own the true power of the Linux command

3
00:00:07,170 --> 00:00:13,140
line comes from our ability to change these commands together to build what are known as command pipelines.

4
00:00:13,140 --> 00:00:17,430
Now each Linux command is designed to do one thing and do it incredibly well.

5
00:00:17,520 --> 00:00:22,710
So by being able to combine together loads of powerful and feature rich building blocks you can create

6
00:00:22,710 --> 00:00:27,280
very powerful workflows and pipelines without much work at all.

7
00:00:27,480 --> 00:00:31,980
But in order to change the commands together and create these powerful workflows these pipelines we

8
00:00:31,980 --> 00:00:36,690
need to understand a bit better how Linux commands actually take input and give output so that we can

9
00:00:36,690 --> 00:00:38,700
link the outputs and inputs together.

10
00:00:38,700 --> 00:00:43,320
So in this video you're going to learn about the different ways that a command can take input and give

11
00:00:43,410 --> 00:00:44,020
output.

12
00:00:44,250 --> 00:00:48,210
And by the end you'll be able to understand the different ways that data can flow into and out of a

13
00:00:48,210 --> 00:00:49,770
command and you'll be ready to connect.

14
00:00:49,770 --> 00:00:54,600
These commands these data flows together to build powerful Linux pipelines.

15
00:00:54,600 --> 00:00:58,510
This is going to be an absolutely revolutionary time for your Linux abilities.

16
00:00:58,620 --> 00:01:02,550
Because we're going to step up from taking just one command and learning about it to actually learn

17
00:01:02,550 --> 00:01:04,470
how to change multiple commands together.

18
00:01:04,470 --> 00:01:06,690
So I hope you're very very excited.

19
00:01:06,690 --> 00:01:08,940
Let's go ahead and jump right into it.

20
00:01:09,720 --> 00:01:13,700
So as you learned earlier each command is basically its own computer program.

21
00:01:13,770 --> 00:01:19,600
Now a computer program is simply an automated way to take inputs process them and give outputs.

22
00:01:19,620 --> 00:01:24,680
So here's a diagram that shows you the different ways that a command can take inputs and give outputs.

23
00:01:24,900 --> 00:01:31,410
Now you can see that a Gen X command can take input from two places and will output to two other places

24
00:01:31,740 --> 00:01:36,720
making a total of four possible ways to get data into and out of a conventional Linux command.

25
00:01:36,900 --> 00:01:44,220
So the inputs are command arguments and standard inputs and outputs are standard output and standard

26
00:01:44,220 --> 00:01:45,270
error.

27
00:01:45,360 --> 00:01:50,610
You can see that three of these are indicated by the yellow dashed arrows and are examples of something

28
00:01:50,610 --> 00:01:52,590
called a standard data stream.

29
00:01:52,620 --> 00:01:56,050
You can tell this from their names because they all start with the word standard.

30
00:01:56,070 --> 00:01:57,300
So you've got standard input.

31
00:01:57,510 --> 00:02:03,000
Standard output and standard error and they're all standard data streams whereas the command line arguments

32
00:02:03,000 --> 00:02:06,290
have a solid blue arrow and aren't a standard data stream.

33
00:02:06,300 --> 00:02:10,790
So in this video I'm going to explain to you what the different input or output options are and you'll

34
00:02:10,830 --> 00:02:15,690
also learn what is special about a standard data stream and how these data streams can be used to connect

35
00:02:15,690 --> 00:02:16,920
commands together.

36
00:02:16,920 --> 00:02:23,430
So let's Lester over to a buntu and see all this stuff in real time OK so for this discussion it makes

37
00:02:23,430 --> 00:02:25,160
more sense to start with the outputs.

38
00:02:25,170 --> 00:02:26,580
So let's start there.

39
00:02:26,580 --> 00:02:31,620
Now when a command has run successfully the primary way that the data is output from the command is

40
00:02:31,620 --> 00:02:34,180
on the channel called standard output.

41
00:02:34,380 --> 00:02:39,900
Now standard output is something called a standard data stream just like a stream of water data stream

42
00:02:39,900 --> 00:02:42,020
start somewhere and they end somewhere.

43
00:02:42,090 --> 00:02:44,120
So where does standard output lead.

44
00:02:44,370 --> 00:02:47,640
Well by default standard output will lead to your terminal.

45
00:02:47,640 --> 00:02:51,830
So that's why when we type commands the output of the command appears on the screen.

46
00:02:52,020 --> 00:02:57,240
So for example let's take the DATA command if we type date and press ENTER when we tell the date command

47
00:02:57,240 --> 00:03:02,700
to run the output will be sent from the date command and flow down the standard output stream which

48
00:03:02,700 --> 00:03:05,160
by default is connected to our terminal screen.

49
00:03:05,220 --> 00:03:08,050
Therefore we see the data appear below our command.

50
00:03:08,330 --> 00:03:08,720
OK.

51
00:03:08,820 --> 00:03:09,690
So that's pretty cool.

52
00:03:09,690 --> 00:03:13,920
But I want to plant a little seed in your mind first to come back to later and remember how I said that

53
00:03:13,920 --> 00:03:17,660
by default the standard output of a command comes to the terminal.

54
00:03:17,850 --> 00:03:22,950
Well the amazing thing about output data streams is that you can redirect where they go using a process

55
00:03:22,990 --> 00:03:25,760
imaginative imaginatively called redirection.

56
00:03:25,860 --> 00:03:30,780
So just like redirecting a pipe or change where water flows redirecting a data stream will change where

57
00:03:30,780 --> 00:03:31,750
the data goes.

58
00:03:32,100 --> 00:03:35,940
OK so of that seed has been planted and will come back to it in a moment.

59
00:03:35,940 --> 00:03:39,200
Now the second type of output is something called Standard era.

60
00:03:39,330 --> 00:03:44,550
So when a command gives an error message or a log message or something like that anything that isn't

61
00:03:44,640 --> 00:03:50,980
the primary output of the command that is outputted into the stream known as standard error.

62
00:03:51,210 --> 00:03:55,140
This helps keep useful output and log information separate.

63
00:03:55,260 --> 00:03:57,370
So for example let's take the data command again.

64
00:03:57,630 --> 00:04:03,130
If we make the date come on fail by giving it some invalid command arguments like this.

65
00:04:03,410 --> 00:04:03,920
OK.

66
00:04:04,140 --> 00:04:05,380
And then I press enter.

67
00:04:05,550 --> 00:04:10,100
You'll see that we get an error message and it says invalidate blah blah blah blah blah.

68
00:04:10,200 --> 00:04:10,670
OK.

69
00:04:10,680 --> 00:04:16,170
Now because it's an error message it was sent down the standard error stream and because the error message

70
00:04:16,200 --> 00:04:21,060
arrived at that terminal screen we can see that the standard error is also automatically connected to

71
00:04:21,060 --> 00:04:23,720
a terminal just like standard output is.

72
00:04:23,880 --> 00:04:30,030
But again because standard error is a data stream it can be redirected wherever we wish.

73
00:04:30,040 --> 00:04:34,430
So now that we understand that standard output is where the main output for the commands go.

74
00:04:34,450 --> 00:04:38,860
And that standard error is where the error and log messages for the command go and the both of those

75
00:04:38,860 --> 00:04:41,410
are by default connected to the terminal.

76
00:04:41,410 --> 00:04:47,150
Let's now turn our attention to inputs as mentioned there are also two ways for a command to get input.

77
00:04:47,170 --> 00:04:51,520
The first we would discuss is another type of standard data stream which as you can guess is called

78
00:04:51,610 --> 00:04:53,050
standard input.

79
00:04:53,080 --> 00:04:56,980
Now standard input is by default connected to the keyboard.

80
00:04:56,980 --> 00:05:01,000
So to demonstrate this I will introduce a new command called Cat.

81
00:05:01,030 --> 00:05:05,560
Now we're going to discuss cat in a later section but I'll just use it now to explain the concept of

82
00:05:05,560 --> 00:05:06,560
standard input.

83
00:05:06,760 --> 00:05:10,560
If we take a look at the man page for cat so we type man cat.

84
00:05:10,750 --> 00:05:11,260
OK.

85
00:05:11,530 --> 00:05:16,590
We see in its description section the cat is not given any.

86
00:05:16,630 --> 00:05:22,900
If it's not given any how can I say so given any command line arguments that that cat will read from

87
00:05:22,930 --> 00:05:23,680
standard input.

88
00:05:23,680 --> 00:05:27,520
So if no file is given then read it or it'll read from standard input.

89
00:05:27,640 --> 00:05:28,150
OK.

90
00:05:28,990 --> 00:05:29,810
So let's do that.

91
00:05:30,010 --> 00:05:36,250
If I just type cat and don't give it any other form of input we can see the terminal kind of just hangs

92
00:05:36,250 --> 00:05:36,720
there.

93
00:05:36,970 --> 00:05:43,060
But if I start typing and I type hello and press ENTER we see that the text is read from our keyboard.

94
00:05:43,100 --> 00:05:49,040
Are you from standard input and then cap processes and outputs the results to standard output.

95
00:05:49,060 --> 00:05:54,010
Now because standard output is by default attached to our terminal we see the output appear right in

96
00:05:54,010 --> 00:05:54,980
our terminal.

97
00:05:54,990 --> 00:05:55,230
OK.

98
00:05:55,250 --> 00:05:58,600
It's pretty awesome now because standard input is a data stream.

99
00:05:58,600 --> 00:06:00,550
It can be redirected as well.

100
00:06:00,550 --> 00:06:03,740
That means we can tell a command where it should read data from.

101
00:06:03,850 --> 00:06:08,500
And this could be a file where we already have some pre-configured input or more powerfully.

102
00:06:08,500 --> 00:06:10,890
It could be another data stream.

103
00:06:11,110 --> 00:06:14,120
And it's this ability for data streams to connect together.

104
00:06:14,170 --> 00:06:19,960
That makes them so powerful you can simply pass the standard output stream from one command to the standard

105
00:06:19,960 --> 00:06:24,850
input stream of another then pass the standard output stream of that second command to the standard

106
00:06:24,850 --> 00:06:30,520
input stream of the third command and so on and so on until you build up a very powerful pipeline connecting

107
00:06:30,550 --> 00:06:35,650
outputs to inputs in this way is known as piping together commands and it's an incredibly important

108
00:06:35,650 --> 00:06:40,240
concept in Linux as it's what makes working with the command line so powerful and effective as you you'll

109
00:06:40,240 --> 00:06:42,430
see in coming videos.

110
00:06:42,460 --> 00:06:46,630
Now the final type of import is command line arguments and we've already actually seen command line

111
00:06:46,630 --> 00:06:48,470
arguments in action already.

112
00:06:48,580 --> 00:06:52,870
For example when studying the command structure previously we took a look at the Cal command and we

113
00:06:52,870 --> 00:06:58,180
saw by the way I'm going to press control and see to cancel this control and see my counsels and press

114
00:06:58,180 --> 00:06:59,430
control not clear the screen.

115
00:06:59,650 --> 00:07:06,250
So we we're using the cow command we saw something like cowe 12 20:17 which allows us to see the calendar

116
00:07:06,340 --> 00:07:13,320
for December 2017 and the numbers 12 and 2017 were command line arguments.

117
00:07:13,420 --> 00:07:18,300
And you can tell that because they were added on the command line as an input to the command.

118
00:07:18,310 --> 00:07:23,080
We also made the command more advanced like this if you remember we had cow gave at the capital a option

119
00:07:23,290 --> 00:07:28,600
gave that option an input gave the capital B option gave the option it's own input and then gave the

120
00:07:28,810 --> 00:07:30,650
command to other inputs.

121
00:07:30,670 --> 00:07:35,410
OK so it was quite complicated and it showed us the calendar for December 2017 with one month after

122
00:07:35,560 --> 00:07:36,610
one month before.

123
00:07:36,850 --> 00:07:43,540
Now the A and B options have their own command line arguments here the option has the command line argument

124
00:07:43,630 --> 00:07:44,830
which is number one.

125
00:07:44,950 --> 00:07:48,320
And B also has a command line argument of the number one.

126
00:07:48,430 --> 00:07:55,410
And on top of those the overall cau command has 12 and 20:17 as its own command line arguments.

127
00:07:55,450 --> 00:08:00,310
In case of this one argument for the option one I'll give it for the B option and two arguments for

128
00:08:00,310 --> 00:08:05,080
the overall count command and the difference between command line arguments and data streams is that

129
00:08:05,080 --> 00:08:06,880
data streams can flow.

130
00:08:06,880 --> 00:08:12,460
They can be redirected and piped together command line arguments only associate with the command or

131
00:08:12,520 --> 00:08:15,040
option that they're dealing with at the moment.

132
00:08:15,040 --> 00:08:19,240
Now there are a command such as the X OGs command that allows you to blur the lines a little bit between

133
00:08:19,240 --> 00:08:20,620
data streams a command line arguments.

134
00:08:20,720 --> 00:08:25,180
But in general the difference is that data streams can flow and be patched together but command line

135
00:08:25,180 --> 00:08:29,950
arguments are more static and still there is one other key difference to keep in mind though in the

136
00:08:30,250 --> 00:08:33,010
not all commands accept standard input.

137
00:08:33,010 --> 00:08:38,020
For example the echo command doesn't accept standard input but pretty much every command can except

138
00:08:38,020 --> 00:08:39,480
command line arguments.

139
00:08:39,580 --> 00:08:43,860
And if you want to know whether a command can actually accept standard input just check its man page

140
00:08:43,870 --> 00:08:47,460
and if it's not there just to show you that it can awesome.

141
00:08:47,460 --> 00:08:52,500
So in this video you've learned some incredibly important concepts as a quick recap we learned that

142
00:08:52,500 --> 00:08:56,980
there are two ways to get data into commands and two ways to get data out.

143
00:08:57,090 --> 00:09:02,400
The ways in our standard input and command line arguments and the ways out our standard output and standard

144
00:09:02,490 --> 00:09:08,820
error there are three ways that start with the word standard are examples of standard data streams.

145
00:09:08,850 --> 00:09:13,500
We mentioned that standard output is where the output data for a commando's and that standard error

146
00:09:13,560 --> 00:09:16,300
is where the error and log messages for a command goes.

147
00:09:16,410 --> 00:09:20,560
And by default standard output and standard error are attached to your terminal.

148
00:09:20,580 --> 00:09:22,430
But this can be changed.

149
00:09:22,470 --> 00:09:27,840
You also learned about standard input now standard input by default is attached to your keyboard and

150
00:09:27,840 --> 00:09:34,260
is also a data stream which means it can take data from other places to using something called redirection.

151
00:09:34,260 --> 00:09:39,720
That's right data streams can be redirected from their default locations to where ever you wish using

152
00:09:39,720 --> 00:09:41,670
a process called redirection.

153
00:09:41,670 --> 00:09:47,340
We also mentioned that you can actually connect the output streams of one command to the standard input

154
00:09:47,400 --> 00:09:54,300
of another using a method called piping piping and redirection are incredibly powerful abilities that

155
00:09:54,300 --> 00:09:55,130
Linux gives us.

156
00:09:55,260 --> 00:10:00,060
And being able to use them effectively will basically give you super powers for interacting with your

157
00:10:00,060 --> 00:10:03,030
computer in ways that you never thought possible.

158
00:10:03,210 --> 00:10:08,010
And I hope that you're super excited because piping and redirection are going to be the topic of the

159
00:10:08,010 --> 00:10:09,160
next few lectures.

160
00:10:09,180 --> 00:10:12,960
So if you want to gain superpowers I'll see you in the next video.
