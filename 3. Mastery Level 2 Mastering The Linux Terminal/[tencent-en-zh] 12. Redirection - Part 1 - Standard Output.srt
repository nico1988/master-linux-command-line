1
00:00:00,240 --> 00:00:04,530
你好，你们这些漂亮的人知道你们最近学到的关于命令的不同方式的视频吗？
Hellova you beautiful people know the last video you learned about the different ways that commands

2
00:00:04,530 --> 00:00:05,800
可以处理输入和输出。
can handle input and output.

3
00:00:05,820 --> 00:00:10,290
我看到在你们的脑海中，Linux操作系统最强大的功能背后的概念
And I see that in your mind the concepts behind the most powerful abilities that the Linux operating

4
00:00:10,290 --> 00:00:13,250
系统可以为我们提供管道和重定向。
system can give us piping and redirection.

5
00:00:13,330 --> 00:00:18,270
现在，管道和重定向允许我们创建复杂的命令管道，并在我们的
Now piping and redirection allow us to create sophisticated command pipelines and move data around our

6
00:00:18,270 --> 00:00:23,320
计算机系统具有令人难以置信的易用性和灵活性，基本上它是一个超级大国。
computer system with such unbelievable ease and flexibility that it's basically a super power.

7
00:00:23,460 --> 00:00:27,870
在这段视频中，您将通过学习如何执行重定向来开始游戏超能力
So in this video you're going to begin gaming superpowers by learning how to perform redirection in

8
00:00:27,870 --> 00:00:31,160
Linux，在接下来的几个视频中，我们将介绍管道。
Linux and later on in the next few videos we'll be covering piping.

9
00:00:31,290 --> 00:00:35,250
但在本视频结束时，您将能够重定向标准输入、标准输出和标准
But by the end of this video you'll be able to redirect standard input standard output and standard

10
00:00:35,250 --> 00:00:39,370
只要你心满意足地犯错误，你就会觉得自己更像一个计算机天才了。
error to your heart's content and you'll feel much more like a computer genius already.

11
00:00:39,510 --> 00:00:41,890
所以，让我们继续直截了当地谈吧。
So let's go ahead and get right into it.

12
00:00:43,450 --> 00:00:48,600
好的，我们在这段视频中的主要朋友将是我们之前看到的cat命令。
OK so our main friend for this video is going to be the cat command that we saw a bit earlier.

13
00:00:48,610 --> 00:00:53,380
现在使用cat命令将所有粘合在一起的多个不同文件连接在一起。
Now the cat command is used to concatenate all stick together multiple different files.

14
00:00:53,410 --> 00:00:56,310
您将在本课程后面的视频中更详细地了解它是如何工作的。
You'll see how it works in more detail in a later video in the course.

15
00:00:56,350 --> 00:01:00,940
但是我在这段视频中使用cat命令的原因是因为它是一个简单的命令，可以从
But the reason I'm using the cat command in this video is because it's a simple command that reads from

16
00:01:00,940 --> 00:01:06,200
标准输入和写入标准输出，因此它完全符合我们学习重定向的目的。
standard input and writes to standard output so it fits our purposes of learning redirection perfectly.

17
00:01:06,400 --> 00:01:09,810
那么让我们看一下CAT从标准输入接收数据。
So let's watch cat received data from standard input.

18
00:01:09,850 --> 00:01:15,090
因此，如果我在这里只键入cat，cat命令将等待接收有关标准输入的一些数据。
So if I just type cat here the cat command waits to receive some data on standard input.

19
00:01:15,220 --> 00:01:19,720
现在CAT需要标准输入才能运行，但因为默认情况下标准输入连接到
Now cat needs standard input in order to run but because standard input is by default connected to the

20
00:01:19,720 --> 00:01:23,520
键盘猫只是坐在那里，等我们在键盘上输入一些东西。
keyboard cat just sits there and waits for us to enter something on the keyboard.

21
00:01:23,710 --> 00:01:31,620
所以，如果我像那样输入喵，一旦我们这样做了，它就会将相同的输入输出到标准输出中。
So if I type meow like that once we do it will output the same input into standard output.

22
00:01:31,720 --> 00:01:37,260
因为标准输出默认连接到我们的终端，所以它输出相同的单词
And because standard output is by default connected to our terminal it it outputs that the same word

23
00:01:37,270 --> 00:01:41,650
我们处于这种情况下，当然，这适用于cat命令，并且它会输出
that we are under which was meow which is appropriate for the cat command of course and it outputs that

24
00:01:41,860 --> 00:01:43,020
去航站楼。
to the terminal.

25
00:01:43,040 --> 00:01:48,010
现在，为了告诉cat命令标准输入已经完成，我们需要按Ctrl键并查看
Now in order to tell the cat command that standard input has finished we need to press control and see

26
00:01:48,280 --> 00:01:53,340
卡普将停止收听，我们将重新控制我们的节目终端。
and cap will stop listening and we will have back control of our terminal of our show.

27
00:01:53,400 --> 00:01:53,850
好的。
OK.

28
00:01:53,950 --> 00:01:54,880
所以这太棒了。
So that's awesome.

29
00:01:54,880 --> 00:02:00,700
所以，如果我想要更改标准输出的位置，而不是让它到达终端，那又如何呢？
So what if I wanted to change where the standard output goes instead of having it come to the terminal.

30
00:02:00,700 --> 00:02:03,470
换句话说，我如何重定向标准输出。
In other words how can I redirect standard output.

31
00:02:03,700 --> 00:02:09,880
假设我想要将标准输出重定向到一个名为output t x t的文件来实现这一点。
Well let's say that I wanted to redirect standard output to a file called output t x t to do that.

32
00:02:09,880 --> 00:02:13,270
我会用一个特殊的符号，我会像平常一样写猫。
I would use a special symbol I would write cat just like normal.

33
00:02:13,570 --> 00:02:19,020
然后我将键入数字1和大于号，然后键入OUTPUT。
Then I would type the number one and the greater than sign and then or type output.

34
00:02:19,090 --> 00:02:20,390
西蒂医生。
Dr. XTi.

35
00:02:20,430 --> 00:02:22,650
好的，让我给你们解释一下这是什么意思。
OK so let me explain to you what this means.

36
00:02:22,660 --> 00:02:28,810
我想记住，标准输出是流的名称，输出像标准一样下降
I want to remember that standard output is the name of the stream the output goes down like a standard

37
00:02:28,840 --> 00:02:34,900
输出不是目的地，但它是流的名称、管道的名称、是的名称或流的名称
output isn't the destination but it's the name of the stream or the pipe or the yes or the stream that

38
00:02:34,900 --> 00:02:36,210
数据会下降。
the data goes down.

39
00:02:36,210 --> 00:02:41,260
现在，每个数据流不仅有那个时代的标准输出和导入这样的名称，而且它还
Now every data stream not only has a name like standard outputs and imports on that era but it also

40
00:02:41,260 --> 00:02:43,400
有一个与之相关联的号码。
has a number associated with it.

41
00:02:43,510 --> 00:02:46,090
标准输入是数字零。
Standard Input is number zero.

42
00:02:46,090 --> 00:02:50,630
标准输出排名第一，标准误差排名第二。
Standard output is number one and standard error is number two.

43
00:02:50,830 --> 00:02:51,210
好的。
OK.

44
00:02:51,310 --> 00:02:56,760
所以我们在这里做的是改变一号流指向的目的地。
So what we're doing here is we're changing the destination of where stream number one points.

45
00:02:56,770 --> 00:03:02,440
换句话说，我们正在重定向或更改标准输出的目标，因为标准输出
In other words we are redirecting or changing the destination of standard output because standard output

46
00:03:02,500 --> 00:03:03,720
是第一名。
is number one.

47
00:03:03,880 --> 00:03:05,140
所以这就是为什么我们要谈第一名的原因。
So that's why we talk the number one.

48
00:03:05,140 --> 00:03:09,550
我们说把第一个放入输出，把第一个数据流放入输出。
And we said put the number one put data stream number one in output.

49
00:03:09,730 --> 00:03:10,240
xti.
XTi.

50
00:03:10,340 --> 00:03:10,710
好的。
OK.

51
00:03:10,780 --> 00:03:15,160
所以不是将标准输出流指向终端，而是缺省情况下我们
So instead of pointing the standard output stream at the terminal which is where points by default we're

52
00:03:15,160 --> 00:03:19,180
将其指向主文件夹中名为output DirectX t的文件。
pointing it towards a file called output directx t in our home folder.

53
00:03:19,270 --> 00:03:23,470
当我跑的时候，那只猫还在等待一些输入来运行。
And when I run that cat is still waiting for some input to run.

54
00:03:23,470 --> 00:03:26,440
所以，如果我输入linux，那就太棒了。
So if I type Linux is amazing.

55
00:03:26,800 --> 00:03:27,130
好的。
OK.

56
00:03:27,130 --> 00:03:33,130
然后按Enter键，我们现在注意到，实际上它并没有返回到终端。
And press ENTER we notice now that actually it didn't come back out to the terminal.

57
00:03:33,280 --> 00:03:37,960
当我按下Ctrl再次完成一些输入时，我们首先看到的是
And when I tell that some of the input is finished again by pressing control and see first thing we

58
00:03:37,960 --> 00:03:39,560
请注意，该命令不再运行。
notice is the command is no longer running.

59
00:03:39,700 --> 00:03:42,020
同样，我们也看不到任何输出。
And as well we also don't see any output.

60
00:03:42,250 --> 00:03:47,590
但是，如果我单击此处导航到我们的家庭照片，我会单击文件，当窗口打开时，如果
But if I click here to navigate to our home photos I click files and I when that window opens up if

61
00:03:47,590 --> 00:03:53,410
我导航到窗口的主页，查看名为output DirectX的文件夹或文件，使用Inside Out Put
I navigate to a home for a window see a folder or a file called output directx take an inside out put

62
00:03:53,410 --> 00:03:55,450
管道胶带XTi。
duct tape XTi.

63
00:03:55,450 --> 00:03:57,700
如果我打开它，我们会看到文本。
If I open it we see the text.

64
00:03:57,700 --> 00:03:59,320
Linux是令人惊叹的。
Linux is amazing.

65
00:03:59,320 --> 00:04:00,850
这真是太酷了。
How cool is that.

66
00:04:01,180 --> 00:04:04,330
现在，因为标准输出通常是您想要重定向的。
Now because standard output is usually what you want to redirect.

67
00:04:04,330 --> 00:04:07,700
Linux让它变得非常简单，你甚至不需要把数字放在第一位。
Linux makes it so that you don't actually even need to put the number one.

68
00:04:07,720 --> 00:04:15,040
因此，如果我只是删除，如果我只是删除高效的X-ers，请按键盘上的Delete键。
So if I just get rid of if I just delete productive X-ers press the delete key on my keyboard.

69
00:04:15,550 --> 00:04:15,990
嗯。
Yeah.

70
00:04:16,060 --> 00:04:19,150
实际上你甚至不需要把数字1放在这个符号里。
You don't actually even need to put the number one in this symbol here.

71
00:04:19,150 --> 00:04:24,440
实际上，如果我只做cat，那么大于符号的输出不是dxt。
So actually if I just do cat then the greater than sign an output not dx t.

72
00:04:24,760 --> 00:04:25,360
好的。
OK.

73
00:04:25,360 --> 00:04:26,320
我就进去了。
And I enter.

74
00:04:26,380 --> 00:04:28,400
Linux是令人惊叹的。
Linux is amazing.

75
00:04:28,660 --> 00:04:29,850
好的。
OK.

76
00:04:29,860 --> 00:04:30,570
并将其输出。
And outputs it.

77
00:04:30,610 --> 00:04:33,940
然后我按下Ctrl键并查看以停止该命令。
And then I press control and see to stop the command.

78
00:04:33,970 --> 00:04:36,540
您可以看到，我们得到的结果输出基本相同。
You can see that we basically get the same result output.

79
00:04:36,570 --> 00:04:37,970
他实际上是被创造出来的。
He actually has been created.

80
00:04:38,050 --> 00:04:40,600
在里面，Linux是令人惊叹的。
And inside there is Linux is amazing.

81
00:04:40,600 --> 00:04:41,620
所以这是一条不错的捷径。
So that's a nice shortcut.

82
00:04:41,620 --> 00:04:46,030
你不一定要把数字放在那里，但理解这一点是很有用的，因为当你真正
You don't have to put the number one there but it's useful to understand that for when you actually

83
00:04:46,030 --> 00:04:51,350
来重定向其他数据流，您可能会对间距感到疑惑。
come to redirect the other data streams maybe you might be wondering about the spacing.

84
00:04:51,490 --> 00:04:56,860
让我们再看一下长形，长形是Cat 1大于输出60。
So let's take the long form again the long form is Cat 1 greater than an output 60.

85
00:04:57,110 --> 00:04:59,640
好的，但是我不能。
OK but I couldn't.

86
00:04:59,680 --> 00:05:01,750
所以我可以这样写。
And so I could write it like this.

87
00:05:01,750 --> 00:05:05,330
我可以把那里的地方搬走，那就好了。
I could get rid of the space there and that would be fine.

88
00:05:05,440 --> 00:05:10,390
但是我不能在WAN和比我喜欢的更大的之间加一个空格，所以我不能这样做，我有一个
But I couldn't add a space between the wan and the greater than like I so I couldn't do that have a

89
00:05:10,390 --> 00:05:14,830
中间有空格，因为这必须是一个不起作用的符号。
space in between that because this has to be one symbol that wouldn't work.

90
00:05:14,890 --> 00:05:21,250
好的，但是这个我可以有，我可以把那里的空隙缩小，这样这个符号就会被保留下来。
OK but this would I could have I could close the gap there so this symbol is preserved.

91
00:05:21,250 --> 00:05:25,460
符号是保留的，但是我可以在它之后留一个空格，然后输出那个状态。
The symbol is preserved but I can have a space after it between that and output that state.

92
00:05:25,480 --> 00:05:26,480
这个不错。
This is fine.

93
00:05:26,590 --> 00:05:27,650
这个不错。
This is fine.

94
00:05:27,670 --> 00:05:28,570
这可不好。
This is not fine.

95
00:05:28,660 --> 00:05:28,970
好的。
OK.

96
00:05:28,990 --> 00:05:30,920
这有意义吗。
Does that make sense.

97
00:05:31,300 --> 00:05:34,360
B我只记得外壳在解释我们写的东西。
B I just remember that the shell is interpreting what we write.

98
00:05:34,450 --> 00:05:41,320
外壳程序正在查找大于或仅大于的一个作为符号，并且它必须找到该符号
The shell is looking for one greater than or just greater than as a symbol and it has to find that symbol

99
00:05:41,320 --> 00:05:42,850
以便了解它想要什么。
in order to understand what it wants.

100
00:05:42,920 --> 00:05:48,500
要做到这一点，如果我们现在用一个空间拆分一个网格，它将不再起作用，因为外壳看不到
To do so if we break up one grid with a space now it no longer works because the shell isn't looking

101
00:05:48,500 --> 00:05:48,810
就因为这个。
for that.

102
00:05:48,860 --> 00:05:49,370
好的。
OK.

103
00:05:49,580 --> 00:05:49,790
好的。
OK.

104
00:05:49,790 --> 00:05:50,150
太棒了。
Awesome.

105
00:05:50,150 --> 00:05:52,610
因此，让我们尝试向该文件添加更多文本。
So let's try adding more text to the file.

106
00:05:52,610 --> 00:05:54,220
让我们试着添加文本。
Let's try and add the text.

107
00:05:54,290 --> 00:05:55,050
哇。
Wow.

108
00:05:55,160 --> 00:05:57,040
所以它说Linux是令人惊叹的。
So it says Linux is amazing.

109
00:05:57,050 --> 00:05:58,110
然后哇哦。
And then wow.

110
00:05:58,250 --> 00:05:58,670
好的。
OK.

111
00:05:58,820 --> 00:06:05,200
因此，如果我们这样做，然后键入WOW，然后按Ctrl-C组合键停止。
So if we do that and we type Wow and then press control-C to stop.

112
00:06:05,840 --> 00:06:11,010
现在，当我们检查输出的RTX文件时，我们希望它会说Linux太棒了。
Now when we check the output RTX the file we expect it to say Linux is amazing.

113
00:06:11,030 --> 00:06:11,440
哇。
Wow.

114
00:06:11,480 --> 00:06:11,890
正确的。
Right.

115
00:06:11,990 --> 00:06:20,140
但当我们打开它时，它只显示了一个词，哇，文本发生了什么，它说Linux是令人惊叹的。
But when we open it it just says the word wow what happened to the text it says Linux is amazing.

116
00:06:20,480 --> 00:06:25,810
默认情况下，重定向将在写入文件之前删除文件中的所有内容。
Well redirection by default will remove everything in a file before writing to it.

117
00:06:25,820 --> 00:06:28,250
这个花哨的词叫做截断。
The fancy word for that is called truncation.

118
00:06:28,250 --> 00:06:32,240
但基本上发生的事情是，看起来清空了我们的文件，然后写下了哇。
But basically what happened is looks emptied our file and then wrote Wow.

119
00:06:32,300 --> 00:06:33,950
这有点烦人。
It was kind of annoying.

120
00:06:34,100 --> 00:06:39,990
那么，我们如何才能在不截断文件的情况下使用重定向再次写入文件呢？要做到这一点，我们将
So how can we write to a file again using redirection without truncating it well to do that we would

121
00:06:39,990 --> 00:06:41,990
这样编写重定向。
write the redirection like this.

122
00:06:42,030 --> 00:06:42,450
好的。
OK.

123
00:06:42,660 --> 00:06:51,490
所以你可以写1类大于80X-tex，你可以看到我们在那里用了两个箭头。
So you would write cat 1 greater than greater than 80 X-Tex you can see we've used two arrows there.

124
00:06:51,570 --> 00:06:52,040
好的。
OK.

125
00:06:52,230 --> 00:06:55,740
因此，我们不是只有一个Ira，而是一个接一个地有两个Ira。
So instead of having one Ira we have two right after one another.

126
00:06:55,750 --> 00:06:58,550
现在，当我输入linux时，它是令人惊叹的。
Now when I type Linux is amazing.

127
00:06:59,630 --> 00:07:00,090
好的。
OK.

128
00:07:00,260 --> 00:07:02,430
我按下Ctrl键，也看到了这个。
And I press control and see this too.

129
00:07:02,480 --> 00:07:05,370
现在我们来看看政治内部。
And that now we look inside politics.

130
00:07:05,610 --> 00:07:07,300
我们现在有了Linux是令人惊叹的。
We now have Linux is amazing.

131
00:07:07,370 --> 00:07:08,520
在那之后。
After Wow.

132
00:07:08,670 --> 00:07:09,280
好的。
OK.

133
00:07:09,300 --> 00:07:11,630
再说一次，捷径仍然适用。
And again the shortcut still applies.

134
00:07:11,730 --> 00:07:18,330
所以不是让一只灰色和愤怒的猫，顺便说一句，如果这是一条捷径，我只需按下
So instead of having cat one gray and angry and by the way if that's shortcut right there I just press

135
00:07:18,330 --> 00:07:19,240
街垒。
the barricade.

136
00:07:19,380 --> 00:07:24,330
当我这样做的时候，我能有越来越好的感觉，是不是有一种很大的遗憾。
Is it having one great regret that I can just have greater and greater OK when I do that.

137
00:07:24,360 --> 00:07:28,330
我要说Linux是非常令人惊叹的。
And I say Linux is very amazing.

138
00:07:28,350 --> 00:07:30,270
那就停止了吗。
Did that stop then.

139
00:07:30,330 --> 00:07:33,120
当我重新加载文件时，我们可以看到广告。
When I reload the file we can see the ads.

140
00:07:33,120 --> 00:07:34,800
Linux非常令人惊叹。
Linux is very amazing.

141
00:07:34,860 --> 00:07:39,450
好的，只要打开一个很棒的按钮，这个功能就可以很好地工作，就像使用
OK so this works just as well with just a great great great on and it works just as well as having the

142
00:07:39,450 --> 00:07:43,800
第一个原因是Linux让我们的工作变得更容易，因为通常您会重定向标准输出
number one because Linux makes it just easier for us because usually you're redirecting standard output

143
00:07:44,040 --> 00:07:46,010
这是第一数据流。
which is data stream number one.

144
00:07:46,020 --> 00:07:49,220
这就是重定向标准输出的方式。
So that's how you redirect standard output.

145
00:07:49,230 --> 00:07:56,240
正如我所说的，这个使用双aro的过程被称为追加到文件中。
And this process as I said of using the double Aros is called appending to a file.

146
00:07:56,280 --> 00:08:00,030
因此，为了节省时间，我们将在这段视频中缩短我们的讨论，我们将
So in the interest of time we're going to cut our discussion short in this video and we're going to

147
00:08:00,030 --> 00:08:01,530
在下一个视频中再次拿起它。
pick it up again in the next video.

148
00:08:01,620 --> 00:08:06,090
但总而言之，您在这段视频中看到的首先是数据流与数字相关联
But in summary what you've seen in this video is first of all that data streams have numbers associated

149
00:08:06,090 --> 00:08:12,210
其中，数据流编号0是标准输入数据流，编号1是标准输出和数据
with the data stream number zero is standard input data stream number one is standard output and data

150
00:08:12,210 --> 00:08:14,310
2号流是标准错误。
stream number two is standard error.

151
00:08:14,490 --> 00:08:19,760
您可以使用这些号码来实际访问您想要重定向的特定数据流。
And you can use these numbers to actually access the specific data streams that you want for redirection.

152
00:08:19,760 --> 00:08:24,290
现在您已经在这段视频中看到了如何重定向标准输出，这是第一号数据流。
Now you've in this video you've seen how to redirect standard output which is data stream number one.

153
00:08:24,300 --> 00:08:27,690
而且它可能是你大部分时间都会用到的。
And it's probably the one that you will be using most of the time.

154
00:08:27,870 --> 00:08:29,870
但你需要确保的是。
But what you need to make sure of it.

155
00:08:29,880 --> 00:08:33,920
这对所有数据流都有效，因为您需要小心截断您的文件。
And this works for all data streams is you need to be careful of truncating your files.

156
00:08:33,960 --> 00:08:38,100
当您还是一名读者时，在重定向某些输出时使用一个箭头时，您就看到了这一点
You saw that when you use one arrow when you were a reader when you were redirecting some of the output

157
00:08:38,670 --> 00:08:44,820
暂存时，shell将删除文件中或您要重定向的位置中的所有内容
stage the shell would delete everything that was in the file or in the place that you were redirecting

158
00:08:44,820 --> 00:08:47,210
在向中添加数据之前，请将。
to before adding the data in.

159
00:08:47,250 --> 00:08:53,490
但是，如果您使用两个箭头，那么您实际上可以将数据追加到可以添加数据的文件中
But if you use two arrows then you can actually append your data to the file you can add your data on

160
00:08:53,490 --> 00:08:54,810
在已经存在的东西之上。
top of what is already there.

161
00:08:54,810 --> 00:08:56,320
所以只要意识到这一点就行了。
So just be aware of that.

162
00:08:56,490 --> 00:09:00,720
在下一个视频中，我们现在来看一下如何重定向标准错误和标准
So in the next video we're going to take a look now at how you would redirect standard error and standard

163
00:09:00,750 --> 00:09:01,330
输入。
input.

164
00:09:01,440 --> 00:09:03,040
所以我会在下一个视频中见到你。
So I'll see you in the next video.

