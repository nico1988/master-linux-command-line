1
00:00:00,390 --> 00:00:05,100
Hello you beautiful people so when the last video you learn that there is something called the shell

2
00:00:05,280 --> 00:00:08,460
that is interpreting the commands that you type into the terminal.

3
00:00:08,610 --> 00:00:13,530
Now one reason that Linux is amazing is that the commands that you type all follow a similar type of

4
00:00:13,530 --> 00:00:15,790
structure in the way that you type them.

5
00:00:15,840 --> 00:00:19,950
Now by understanding the structure you'll be able to transition from simply just memorizing commands

6
00:00:19,950 --> 00:00:25,050
and hoping for the best to actually understanding the common language that all Linux commands use and

7
00:00:25,050 --> 00:00:28,680
that will give you a massive boost in your abilities.

8
00:00:28,680 --> 00:00:33,970
So in this video you're going to learn what commands actually are and how they are structured.

9
00:00:34,110 --> 00:00:38,460
And by the end of this video you'll have a much deeper understanding of what commands are and the commands

10
00:00:38,460 --> 00:00:44,060
themselves will actually start to look like a language rather than just random jibberish on the screen.

11
00:00:44,190 --> 00:00:47,350
So this is going to be a very game changing lecture.

12
00:00:47,430 --> 00:00:53,220
If you understand fully what I show you here it will make your work with the terminal so much easier.

13
00:00:53,220 --> 00:00:55,800
So let's not waste any time and get right into it.

14
00:00:57,790 --> 00:00:58,210
OK.

15
00:00:58,230 --> 00:01:02,700
So the first thing you need to know is that all commands are effectively just little computer programs

16
00:01:02,790 --> 00:01:05,360
that are installed somewhere on your computer.

17
00:01:05,370 --> 00:01:11,230
So for example date is a program Cal is a program Ecca was another program and so on.

18
00:01:11,280 --> 00:01:17,030
Now the command or program name that you want to use is always the first part of the command.

19
00:01:17,040 --> 00:01:21,780
So we start a command with the word data or with the word count with the word echo like you saw before.

20
00:01:21,790 --> 00:01:25,010
Right now each command has its own unique behavior.

21
00:01:25,080 --> 00:01:29,520
You can actually look up using something called the manual pages which I'll show you how to do later

22
00:01:29,520 --> 00:01:30,800
in this section of the course.

23
00:01:30,930 --> 00:01:34,260
But the general command structure goes like this.

24
00:01:34,350 --> 00:01:36,270
First you type out the command name.

25
00:01:36,300 --> 00:01:39,090
So I would be like date cow echo or whatever it would be.

26
00:01:39,170 --> 00:01:42,260
Then you give the comments of options to customize its behavior.

27
00:01:42,480 --> 00:01:46,720
Then you give the command some inputs to actually operate on.

28
00:01:46,740 --> 00:01:49,390
Now the first thing you type is the command name.

29
00:01:49,440 --> 00:01:52,860
Now that lets the shell know what program you actually want to run.

30
00:01:53,010 --> 00:01:56,880
And once the Shell knows what program you want to run it knows the name of the program you want to run

31
00:01:57,180 --> 00:02:02,730
the show will then search for that program on something called your Shell's path which is just a list

32
00:02:02,730 --> 00:02:05,610
of folders that contain these programs.

33
00:02:05,610 --> 00:02:09,120
Now you can actually see your Shell's path by typing echo.

34
00:02:09,570 --> 00:02:12,180
Then a dollar sign then path.

35
00:02:12,180 --> 00:02:18,900
OK so Ecko space than dollar sign and path and you press enter and you see this terrifying output come

36
00:02:18,900 --> 00:02:19,310
out.

37
00:02:19,440 --> 00:02:24,060
But it's actually it's actually very easy to understand when you notice that these are just different

38
00:02:24,060 --> 00:02:28,280
folder paths each separated by a colon by these two dots here.

39
00:02:28,410 --> 00:02:33,210
So for example there's a there's a set there's a folder here that's called slushed use a slash local

40
00:02:33,210 --> 00:02:34,270
slash Espin.

41
00:02:34,320 --> 00:02:39,090
Then you've got another folder here Slusser uses less local slushed bin than another folder here and

42
00:02:39,090 --> 00:02:41,510
another folder here and another folder here and so on and so on.

43
00:02:41,510 --> 00:02:41,930
OK.

44
00:02:42,120 --> 00:02:48,390
So what the shell will do is it'll start at the very left of the path and it will look inside that folder

45
00:02:48,600 --> 00:02:52,920
for a command called Echo or called Kallo called data or whatever you called it.

46
00:02:52,920 --> 00:02:53,490
OK.

47
00:02:53,490 --> 00:02:56,520
So it will look in the left most folder and it will if it doesn't find it there it will move to the

48
00:02:56,520 --> 00:02:57,010
next one.

49
00:02:57,060 --> 00:03:01,150
So it would start at the very left and it would move to maybe to this folder.

50
00:03:01,290 --> 00:03:04,800
OK then if it didn't find it then it would move to this folder and if it didn't find it there would

51
00:03:04,800 --> 00:03:08,350
move to this folder and so on and so on and so on until it got right to the ends.

52
00:03:08,430 --> 00:03:11,020
So to slash not slash been OK.

53
00:03:11,220 --> 00:03:15,520
And if it didn't find a folder with that name in any of those folders.

54
00:03:15,620 --> 00:03:16,000
OK.

55
00:03:16,110 --> 00:03:19,930
Then the show would give you a command an error like command not found.

56
00:03:19,950 --> 00:03:26,020
If I tried to do an article that was a command it says it couldn't find this command.

57
00:03:26,020 --> 00:03:29,910
So what the shell did is it looked for a command called this in each of these folders.

58
00:03:29,910 --> 00:03:32,220
Didn't find it and said command not found.

59
00:03:32,230 --> 00:03:36,130
Now this is some this has an interesting and interesting impact.

60
00:03:36,270 --> 00:03:39,570
The fact that it the fact that it reads from the very left all the way to the very right.

61
00:03:39,690 --> 00:03:43,420
Let's say you had a program called blah OK and blah.

62
00:03:43,420 --> 00:03:52,310
It was actually in this folder here is a slash Espen but it was also in the very far left folder.

63
00:03:52,470 --> 00:03:58,760
Which one do you think will actually be run well actually what would happen is it would only run the

64
00:03:58,760 --> 00:04:01,260
version in here because that's where it found it first.

65
00:04:01,370 --> 00:04:07,130
And if you wanted it to run this version was in this folder that wouldn't be possible because it found

66
00:04:07,130 --> 00:04:09,120
the same name here first.

67
00:04:09,200 --> 00:04:09,710
OK.

68
00:04:09,710 --> 00:04:13,910
So that's just something to bear in mind it's not something you'll really run into but it's just something

69
00:04:13,910 --> 00:04:14,700
to bear in mind.

70
00:04:14,770 --> 00:04:15,300
OK.

71
00:04:15,310 --> 00:04:19,410
Now you can actually see which folder the command is stored in by using the which command.

72
00:04:19,410 --> 00:04:21,700
So it's like which folder is this command in.

73
00:04:21,710 --> 00:04:24,110
So I could say which and then count.

74
00:04:24,230 --> 00:04:24,490
OK.

75
00:04:24,500 --> 00:04:30,960
And if I press enter it will tell me that the command is actually in the slowest user slash bin folder.

76
00:04:31,010 --> 00:04:36,080
And if we look at the path we can see that slash use a slash bin is located here.

77
00:04:36,080 --> 00:04:40,670
So it is on our path and therefore Cao was able to be found.

78
00:04:40,670 --> 00:04:41,870
And let's try that again for Echo.

79
00:04:41,870 --> 00:04:47,600
If we do which echo you can say slash been slash echo.

80
00:04:47,690 --> 00:04:54,720
And if we look on here we'll find somewhere slash bin is somewhere slash bin.

81
00:04:54,740 --> 00:04:55,190
There we go.

82
00:04:55,190 --> 00:04:57,590
So slash bin is also on our path.

83
00:04:57,610 --> 00:04:59,190
You actually also look at the which come on.

84
00:04:59,190 --> 00:05:03,020
So the which of which which folder is that which commanded.

85
00:05:03,050 --> 00:05:06,490
And we say it's in slushed use a slush bin which is here.

86
00:05:06,730 --> 00:05:11,510
There we go slushed user slash Ben Gay and we see the which command also runs as well so that's how

87
00:05:11,720 --> 00:05:14,950
the Shell knows where to find your commands.

88
00:05:14,960 --> 00:05:20,060
Now you can customize the way that commands work by giving them different options and different inputs.

89
00:05:20,270 --> 00:05:22,680
Let's go ahead and start with the inputs.

90
00:05:22,700 --> 00:05:29,030
So it's important to note that not all commands actually require inputs some inputs are optional.

91
00:05:29,060 --> 00:05:33,010
For example the date command doesn't strictly require an input.

92
00:05:33,010 --> 00:05:36,250
You can just type date and be you know be done with it.

93
00:05:36,320 --> 00:05:42,960
OK but most commands do require some form of input which can actually have a fancy name called an operand.

94
00:05:42,980 --> 00:05:43,410
OK.

95
00:05:43,550 --> 00:05:48,260
Because commands operate on the input the input is sometimes called an operand.

96
00:05:48,320 --> 00:05:54,290
OK so to give the command an input or an operand you simply type a space after the command name then

97
00:05:54,470 --> 00:05:55,360
type the input.

98
00:05:55,400 --> 00:05:57,910
OK that's assuming you don't have any options.

99
00:05:57,920 --> 00:06:05,450
So for example if we take the cow command I could just type cow OK and press enter and I would get this

100
00:06:05,450 --> 00:06:06,390
month's calendar.

101
00:06:06,530 --> 00:06:08,930
But to customize the behavior I can give it an input.

102
00:06:08,930 --> 00:06:15,300
So for example if I want to get the calendar for the year 2017 I could type cow 20 17.

103
00:06:15,400 --> 00:06:21,650
And if I press Enter now I get a completely different input output sorry because I gave the command

104
00:06:21,920 --> 00:06:22,960
this input.

105
00:06:23,110 --> 00:06:23,980
OK.

106
00:06:24,200 --> 00:06:26,090
You can also give more than 1 inputs.

107
00:06:26,090 --> 00:06:31,070
Let me clear the screen using control and all the nice shortcut so that you can give more than one input.

108
00:06:31,070 --> 00:06:36,110
So for example I could type cow 12 20:17 and press enter.

109
00:06:36,200 --> 00:06:43,310
You can see now that I get I've given Come on the calc command two inputs one being 12 which means the

110
00:06:43,310 --> 00:06:47,330
twelfth month and the next one being the year which is 2017.

111
00:06:47,330 --> 00:06:52,010
So I said here can you give me the calendar for December 2017.

112
00:06:52,310 --> 00:06:55,900
All right so we gave it to inputs and that also customize output.

113
00:06:56,180 --> 00:07:03,020
So basically you can just give commands inputs like you and if I say echo when I say hello then echo

114
00:07:03,420 --> 00:07:06,510
then hello sorry was the input to the echo command.

115
00:07:06,590 --> 00:07:07,610
So it's quite straightforward.

116
00:07:07,610 --> 00:07:11,690
All we did was type the command name which the shell then found on the path and we gave that command

117
00:07:11,930 --> 00:07:13,470
that that program some input.

118
00:07:13,590 --> 00:07:18,580
OK so that we understand inputs Let's discuss options because this is where stuff gets really interesting.

119
00:07:18,650 --> 00:07:19,160
OK.

120
00:07:19,280 --> 00:07:25,010
You've seen you seen as use an option with the Kalkhoven as well so the cow command we gave it the y

121
00:07:25,010 --> 00:07:25,900
option before.

122
00:07:25,970 --> 00:07:32,320
OK so if I do it by default the dash Y will show the current year's calendar.

123
00:07:32,840 --> 00:07:33,340
OK.

124
00:07:33,450 --> 00:07:38,720
So we've managed we gave the command command an option which the y option which you can see that has

125
00:07:38,720 --> 00:07:41,780
been preceded by this dash and that's common for commands.

126
00:07:41,780 --> 00:07:44,980
They tend to be preceded by dashes and hyphens and things.

127
00:07:44,990 --> 00:07:49,730
So let's take a look at the date command to understand how options work even better.

128
00:07:49,820 --> 00:07:50,240
OK.

129
00:07:50,330 --> 00:07:54,440
Date by default will show today's date in our current time zone.

130
00:07:54,450 --> 00:07:59,630
So if I say date it says here's the here's the date and time in the current time zone which is apparently

131
00:07:59,630 --> 00:08:02,280
British Summer Time OK.

132
00:08:02,330 --> 00:08:10,920
So get the day in universal time such as UTC or Greenwich mean time we can type a date slash you and

133
00:08:10,920 --> 00:08:16,770
we can see now the day I was gone back one OK because now we're in UTC rather than British Summer Time

134
00:08:16,770 --> 00:08:19,470
which is currently in our forward.

135
00:08:19,860 --> 00:08:22,470
So we gave the date command the you option.

136
00:08:22,470 --> 00:08:25,770
Now if we had other options to give the commands we could list them right after one another.

137
00:08:25,770 --> 00:08:33,750
So for example we could do date slash dash a dash B C D E F D and this would give it these different

138
00:08:33,750 --> 00:08:38,570
options or the option B option to see option the d option the eruption the f option the g option.

139
00:08:38,580 --> 00:08:39,040
OK.

140
00:08:39,090 --> 00:08:43,240
Or more simply you could just do dash A B C D G.

141
00:08:43,300 --> 00:08:43,630
OK.

142
00:08:43,680 --> 00:08:44,900
That's a nice shortcut.

143
00:08:44,900 --> 00:08:46,580
You can just stick them all together like that.

144
00:08:46,650 --> 00:08:47,300
OK.

145
00:08:47,370 --> 00:08:49,390
Now the specific example doesn't work.

146
00:08:49,400 --> 00:08:55,380
So if I try that it will say Invalid option but it just illustrates the point that if you change these

147
00:08:55,380 --> 00:09:00,060
options together you can actually chain them together and the order doesn't really matter.

148
00:09:00,060 --> 00:09:03,230
So I could do date.

149
00:09:03,510 --> 00:09:07,740
G d g f and it would have exactly the same effect.

150
00:09:07,800 --> 00:09:08,380
OK.

151
00:09:09,350 --> 00:09:09,990
All right then.

152
00:09:10,040 --> 00:09:13,370
So now it can be sometimes be difficult to understand what these options mean.

153
00:09:13,370 --> 00:09:16,790
So sometimes options actually have long form names.

154
00:09:16,790 --> 00:09:19,720
So for example data slots you ok.

155
00:09:19,950 --> 00:09:20,470
Sorry.

156
00:09:20,570 --> 00:09:23,570
Which gives it the date in universal time.

157
00:09:23,570 --> 00:09:29,560
You can also do date dash dash universal now long and gives us the same output.

158
00:09:29,570 --> 00:09:38,690
No universal long names are preceded by two dashes Z's a dash dash universal whereas the short form

159
00:09:38,840 --> 00:09:42,190
options which are just one letter usually preceded by one dash.

160
00:09:42,310 --> 00:09:42,810
OK.

161
00:09:42,890 --> 00:09:47,690
Now the long form commands can make commands easier to read but they're not available for all options.

162
00:09:47,690 --> 00:09:50,170
It really depends upon the command that you're using.

163
00:09:50,180 --> 00:09:56,140
And again just note is the fact that I use two dashes for long forms on one dash for short form commands.

164
00:09:56,150 --> 00:10:00,760
Now if you wanted to use for example three long form options you need to do something like this.

165
00:10:00,830 --> 00:10:03,380
So it has to do date dash dash universal.

166
00:10:03,470 --> 00:10:08,920
That's one long form option then dash dash long form option to then dash dash long form option 3.

167
00:10:08,930 --> 00:10:12,660
You can't really change those together like you can with the short form options.

168
00:10:12,790 --> 00:10:13,170
OK.

169
00:10:13,280 --> 00:10:14,800
So that's not going to work.

170
00:10:14,810 --> 00:10:16,160
But the short form options you can do.

171
00:10:16,160 --> 00:10:24,620
Dave slash a b c d e f g but with long form options you can have to separate them just universal dash

172
00:10:24,620 --> 00:10:29,860
dash long form option 2 and dash dash long form option 3.

173
00:10:29,870 --> 00:10:31,550
OK.

174
00:10:31,650 --> 00:10:35,770
Now it's important to know that everything on Linux including commands is case sensitive.

175
00:10:35,780 --> 00:10:38,920
So for example the date command in lowercase is valid.

176
00:10:38,960 --> 00:10:44,570
So they combine and locate is valid but the date command like with a capital D would not be valid.

177
00:10:44,570 --> 00:10:47,990
The date command we'd like a capital A here that would not be valid either.

178
00:10:48,290 --> 00:10:53,480
So you need to make sure that you spell your stuff correctly and with the right case sensitivity and

179
00:10:53,480 --> 00:10:55,950
that goes for options and inputs too.

180
00:10:56,000 --> 00:11:01,880
So it's not just the name of the commands and the date code on for example has a new option but I don't

181
00:11:01,880 --> 00:11:03,930
think it has a capital U option c it doesn't.

182
00:11:03,930 --> 00:11:10,130
So per capital human it didn't give me the universal output because it doesn't know that it has a capital

183
00:11:10,170 --> 00:11:10,630
you.

184
00:11:10,660 --> 00:11:12,470
I knows that it has a lowercase you options.

185
00:11:12,480 --> 00:11:18,200
Make sure that you spell your commands with the right case sensitivity.

186
00:11:18,200 --> 00:11:22,720
Now the only other thing to know is that sometimes options can have their own inputs.

187
00:11:22,730 --> 00:11:26,170
So for example if we go to a cow I'm going to play the screen if we get to.

188
00:11:26,630 --> 00:11:33,460
We could see the of deficit for December 2017 by giving it to inputs right now 12 2017 not options to

189
00:11:33,470 --> 00:11:34,220
inputs.

190
00:11:34,430 --> 00:11:38,170
But there is an option that will allow us to see a certain amount of months after that too.

191
00:11:38,360 --> 00:11:46,940
So for example if I did cow gave it the capital a option then rather number 1 12 2017.

192
00:11:47,180 --> 00:11:55,340
Okay this will show December 2017 with one month after and the the option gives you after but we did

193
00:11:55,360 --> 00:11:57,440
it also need to know how many months after.

194
00:11:57,470 --> 00:11:58,480
So I said one.

195
00:11:58,550 --> 00:12:05,410
So this one here is actually an input to the option and then you've got the inputs for the command.

196
00:12:05,660 --> 00:12:06,480
Okay.

197
00:12:06,650 --> 00:12:08,120
You can also show a month before.

198
00:12:08,120 --> 00:12:17,660
So for example KOUDDOUS be 1 12 2017 that will show us December 27 set to in December 2017 with one

199
00:12:17,660 --> 00:12:27,070
month before it's actually also combined together so now one month after one month before December 2017.

200
00:12:27,350 --> 00:12:27,740
Okay.

201
00:12:27,860 --> 00:12:32,960
So now you've got December 2017 with one month after which is generally 2018 and one month before November

202
00:12:33,140 --> 00:12:34,160
2017.

203
00:12:34,190 --> 00:12:39,140
So here you can see how you can actually provide options with their own inputs and how options are okay

204
00:12:39,140 --> 00:12:41,200
to use when you give commands it's own input.

205
00:12:41,270 --> 00:12:44,450
Okay so you can use those different ways to combine this stuff together.

206
00:12:44,450 --> 00:12:49,820
So here we have the A and B options with our own inputs and the cow come on has its own two inputs 12

207
00:12:50,150 --> 00:12:52,320
and 20 so 12 in 2017.

208
00:12:52,580 --> 00:12:56,660
So this is starting to get a bit crazy right like it's on to get a bit advanced and a bit hairy but

209
00:12:56,660 --> 00:13:01,360
this is just should just begin to highlight just how powerful Linux commands can actually become.

210
00:13:01,670 --> 00:13:05,660
And the only other thing you might need to know is that some commands allow you to put an equal sign

211
00:13:05,660 --> 00:13:10,580
to match up those options with the appropriate parts more explicitly to make stuff a bit easier to read.

212
00:13:10,580 --> 00:13:17,570
This doesn't work for cow but if it did it would be something like a cow after equals one before equals

213
00:13:17,580 --> 00:13:19,450
1 12 in 2017.

214
00:13:19,470 --> 00:13:24,040
Now that doesn't work for cow and because it's manual pages and let it happen.

215
00:13:24,380 --> 00:13:29,450
So we only get 12 to 17 that didn't quite work but that's how it would work if it was possible for the

216
00:13:29,640 --> 00:13:30,030
command.

217
00:13:30,050 --> 00:13:34,870
And it won't you know it might just make it a bit easier to read the options are linked up with the

218
00:13:34,880 --> 00:13:36,550
appropriate inputs.

219
00:13:36,650 --> 00:13:42,380
If there were long form options you would do something like cow dash dash before equals one dash dash

220
00:13:42,470 --> 00:13:45,680
after equals 1 and 12 20:17.

221
00:13:45,680 --> 00:13:52,240
So here you know you've got long form options also being linked with their inputs again that's not possible

222
00:13:52,240 --> 00:13:52,690
for the cow.

223
00:13:52,690 --> 00:13:55,760
Come on specifically you can see how features like that.

224
00:13:55,930 --> 00:14:01,330
You know joining up the inputs with the actual options can make commands easier to read.

225
00:14:02,540 --> 00:14:07,520
So in this admittedly rather in-depth video you've learned that commands are basically broken up into

226
00:14:07,520 --> 00:14:08,920
three main parts.

227
00:14:08,930 --> 00:14:15,170
First you've got the command name then you've got some options which are preceded by dashes and hyphens.

228
00:14:15,290 --> 00:14:18,380
And you've also then got some inputs for the command.

229
00:14:18,380 --> 00:14:23,260
Now the command name needs to match a program that is on the shelf search path.

230
00:14:23,320 --> 00:14:27,600
Now the path is just a piece of text that stored in the shell that lists a bunch of folders.

231
00:14:27,590 --> 00:14:32,870
The shell will start searching from the left to the right separating each folder with a colon which

232
00:14:32,870 --> 00:14:34,280
is the two dots on top of each other.

233
00:14:34,310 --> 00:14:39,350
And if the shell finds an appropriate program then that program will run and the shell will pass to

234
00:14:39,350 --> 00:14:40,280
that program.

235
00:14:40,310 --> 00:14:43,290
Any inputs that you have given in the command.

236
00:14:43,430 --> 00:14:48,460
OK so you can also customize a Command's behavior using options now.

237
00:14:48,470 --> 00:14:55,250
Options are usually just letters that are separated by hyphens so a dash like you see at the very top

238
00:14:55,250 --> 00:15:01,850
of the summary slide here you give each option a dash before it or you can change the little letters

239
00:15:01,850 --> 00:15:03,290
together in one go.

240
00:15:03,290 --> 00:15:04,690
The order does not matter.

241
00:15:04,790 --> 00:15:10,730
And sometimes they have long form versions which are need two dashes but allow you to use easier to

242
00:15:10,730 --> 00:15:15,660
read words so instead of having Dasch you for the universal option you can use dash dash universal.

243
00:15:15,740 --> 00:15:19,690
OK but that really depends on whether the command allows that to be possible.

244
00:15:19,760 --> 00:15:21,870
And each command is slightly different.

245
00:15:21,980 --> 00:15:27,080
And one thing that became very clear in this video is that each command behaves very differently to

246
00:15:27,140 --> 00:15:28,160
other commands.

247
00:15:28,160 --> 00:15:32,030
So for example some commands can take multiple inputs and others take none.

248
00:15:32,030 --> 00:15:34,970
Some can take long form options and others can't.

249
00:15:34,970 --> 00:15:39,870
Some can have an equal sign to match option inputs with the appropriate option and others can't.

250
00:15:39,890 --> 00:15:45,560
So now that you understand the overarching command name then options then input structure that commands

251
00:15:45,560 --> 00:15:49,720
follow and the different ways of implementing that and the different options that you've got.

252
00:15:49,790 --> 00:15:55,190
How can you know what is possible for a specific command and how you use each specific command.

253
00:15:55,190 --> 00:15:59,870
Well each command actually comes with their own manual page on man page for short.

254
00:15:59,870 --> 00:16:01,480
That shows you how to use them.

255
00:16:01,520 --> 00:16:05,830
And in the next video I'm going to show you how to access and read the man pages.

256
00:16:05,840 --> 00:16:10,820
So just imagine having all the deets on a big catalog of computer programs just sat there waiting to

257
00:16:10,820 --> 00:16:15,890
be explored using the man pages is going to be a complete game changer for you if you want to become

258
00:16:15,950 --> 00:16:18,590
independent in the way that you use the Linux operating system.

259
00:16:18,650 --> 00:16:20,110
And I really can't wait to show it to you.

260
00:16:20,110 --> 00:16:23,550
So for that goodness I'll see you in the next video.
