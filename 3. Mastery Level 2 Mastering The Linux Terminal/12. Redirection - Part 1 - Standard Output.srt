1
00:00:00,240 --> 00:00:04,530
Hellova you beautiful people know the last video you learned about the different ways that commands

2
00:00:04,530 --> 00:00:05,800
can handle input and output.

3
00:00:05,820 --> 00:00:10,290
And I see that in your mind the concepts behind the most powerful abilities that the Linux operating

4
00:00:10,290 --> 00:00:13,250
system can give us piping and redirection.

5
00:00:13,330 --> 00:00:18,270
Now piping and redirection allow us to create sophisticated command pipelines and move data around our

6
00:00:18,270 --> 00:00:23,320
computer system with such unbelievable ease and flexibility that it's basically a super power.

7
00:00:23,460 --> 00:00:27,870
So in this video you're going to begin gaming superpowers by learning how to perform redirection in

8
00:00:27,870 --> 00:00:31,160
Linux and later on in the next few videos we'll be covering piping.

9
00:00:31,290 --> 00:00:35,250
But by the end of this video you'll be able to redirect standard input standard output and standard

10
00:00:35,250 --> 00:00:39,370
error to your heart's content and you'll feel much more like a computer genius already.

11
00:00:39,510 --> 00:00:41,890
So let's go ahead and get right into it.

12
00:00:43,450 --> 00:00:48,600
OK so our main friend for this video is going to be the cat command that we saw a bit earlier.

13
00:00:48,610 --> 00:00:53,380
Now the cat command is used to concatenate all stick together multiple different files.

14
00:00:53,410 --> 00:00:56,310
You'll see how it works in more detail in a later video in the course.

15
00:00:56,350 --> 00:01:00,940
But the reason I'm using the cat command in this video is because it's a simple command that reads from

16
00:01:00,940 --> 00:01:06,200
standard input and writes to standard output so it fits our purposes of learning redirection perfectly.

17
00:01:06,400 --> 00:01:09,810
So let's watch cat received data from standard input.

18
00:01:09,850 --> 00:01:15,090
So if I just type cat here the cat command waits to receive some data on standard input.

19
00:01:15,220 --> 00:01:19,720
Now cat needs standard input in order to run but because standard input is by default connected to the

20
00:01:19,720 --> 00:01:23,520
keyboard cat just sits there and waits for us to enter something on the keyboard.

21
00:01:23,710 --> 00:01:31,620
So if I type meow like that once we do it will output the same input into standard output.

22
00:01:31,720 --> 00:01:37,260
And because standard output is by default connected to our terminal it it outputs that the same word

23
00:01:37,270 --> 00:01:41,650
that we are under which was meow which is appropriate for the cat command of course and it outputs that

24
00:01:41,860 --> 00:01:43,020
to the terminal.

25
00:01:43,040 --> 00:01:48,010
Now in order to tell the cat command that standard input has finished we need to press control and see

26
00:01:48,280 --> 00:01:53,340
and cap will stop listening and we will have back control of our terminal of our show.

27
00:01:53,400 --> 00:01:53,850
OK.

28
00:01:53,950 --> 00:01:54,880
So that's awesome.

29
00:01:54,880 --> 00:02:00,700
So what if I wanted to change where the standard output goes instead of having it come to the terminal.

30
00:02:00,700 --> 00:02:03,470
In other words how can I redirect standard output.

31
00:02:03,700 --> 00:02:09,880
Well let's say that I wanted to redirect standard output to a file called output t x t to do that.

32
00:02:09,880 --> 00:02:13,270
I would use a special symbol I would write cat just like normal.

33
00:02:13,570 --> 00:02:19,020
Then I would type the number one and the greater than sign and then or type output.

34
00:02:19,090 --> 00:02:20,390
Dr. XTi.

35
00:02:20,430 --> 00:02:22,650
OK so let me explain to you what this means.

36
00:02:22,660 --> 00:02:28,810
I want to remember that standard output is the name of the stream the output goes down like a standard

37
00:02:28,840 --> 00:02:34,900
output isn't the destination but it's the name of the stream or the pipe or the yes or the stream that

38
00:02:34,900 --> 00:02:36,210
the data goes down.

39
00:02:36,210 --> 00:02:41,260
Now every data stream not only has a name like standard outputs and imports on that era but it also

40
00:02:41,260 --> 00:02:43,400
has a number associated with it.

41
00:02:43,510 --> 00:02:46,090
Standard Input is number zero.

42
00:02:46,090 --> 00:02:50,630
Standard output is number one and standard error is number two.

43
00:02:50,830 --> 00:02:51,210
OK.

44
00:02:51,310 --> 00:02:56,760
So what we're doing here is we're changing the destination of where stream number one points.

45
00:02:56,770 --> 00:03:02,440
In other words we are redirecting or changing the destination of standard output because standard output

46
00:03:02,500 --> 00:03:03,720
is number one.

47
00:03:03,880 --> 00:03:05,140
So that's why we talk the number one.

48
00:03:05,140 --> 00:03:09,550
And we said put the number one put data stream number one in output.

49
00:03:09,730 --> 00:03:10,240
XTi.

50
00:03:10,340 --> 00:03:10,710
OK.

51
00:03:10,780 --> 00:03:15,160
So instead of pointing the standard output stream at the terminal which is where points by default we're

52
00:03:15,160 --> 00:03:19,180
pointing it towards a file called output directx t in our home folder.

53
00:03:19,270 --> 00:03:23,470
And when I run that cat is still waiting for some input to run.

54
00:03:23,470 --> 00:03:26,440
So if I type Linux is amazing.

55
00:03:26,800 --> 00:03:27,130
OK.

56
00:03:27,130 --> 00:03:33,130
And press ENTER we notice now that actually it didn't come back out to the terminal.

57
00:03:33,280 --> 00:03:37,960
And when I tell that some of the input is finished again by pressing control and see first thing we

58
00:03:37,960 --> 00:03:39,560
notice is the command is no longer running.

59
00:03:39,700 --> 00:03:42,020
And as well we also don't see any output.

60
00:03:42,250 --> 00:03:47,590
But if I click here to navigate to our home photos I click files and I when that window opens up if

61
00:03:47,590 --> 00:03:53,410
I navigate to a home for a window see a folder or a file called output directx take an inside out put

62
00:03:53,410 --> 00:03:55,450
duct tape XTi.

63
00:03:55,450 --> 00:03:57,700
If I open it we see the text.

64
00:03:57,700 --> 00:03:59,320
Linux is amazing.

65
00:03:59,320 --> 00:04:00,850
How cool is that.

66
00:04:01,180 --> 00:04:04,330
Now because standard output is usually what you want to redirect.

67
00:04:04,330 --> 00:04:07,700
Linux makes it so that you don't actually even need to put the number one.

68
00:04:07,720 --> 00:04:15,040
So if I just get rid of if I just delete productive X-ers press the delete key on my keyboard.

69
00:04:15,550 --> 00:04:15,990
Yeah.

70
00:04:16,060 --> 00:04:19,150
You don't actually even need to put the number one in this symbol here.

71
00:04:19,150 --> 00:04:24,440
So actually if I just do cat then the greater than sign an output not dx t.

72
00:04:24,760 --> 00:04:25,360
OK.

73
00:04:25,360 --> 00:04:26,320
And I enter.

74
00:04:26,380 --> 00:04:28,400
Linux is amazing.

75
00:04:28,660 --> 00:04:29,850
OK.

76
00:04:29,860 --> 00:04:30,570
And outputs it.

77
00:04:30,610 --> 00:04:33,940
And then I press control and see to stop the command.

78
00:04:33,970 --> 00:04:36,540
You can see that we basically get the same result output.

79
00:04:36,570 --> 00:04:37,970
He actually has been created.

80
00:04:38,050 --> 00:04:40,600
And inside there is Linux is amazing.

81
00:04:40,600 --> 00:04:41,620
So that's a nice shortcut.

82
00:04:41,620 --> 00:04:46,030
You don't have to put the number one there but it's useful to understand that for when you actually

83
00:04:46,030 --> 00:04:51,350
come to redirect the other data streams maybe you might be wondering about the spacing.

84
00:04:51,490 --> 00:04:56,860
So let's take the long form again the long form is Cat 1 greater than an output 60.

85
00:04:57,110 --> 00:04:59,640
OK but I couldn't.

86
00:04:59,680 --> 00:05:01,750
And so I could write it like this.

87
00:05:01,750 --> 00:05:05,330
I could get rid of the space there and that would be fine.

88
00:05:05,440 --> 00:05:10,390
But I couldn't add a space between the wan and the greater than like I so I couldn't do that have a

89
00:05:10,390 --> 00:05:14,830
space in between that because this has to be one symbol that wouldn't work.

90
00:05:14,890 --> 00:05:21,250
OK but this would I could have I could close the gap there so this symbol is preserved.

91
00:05:21,250 --> 00:05:25,460
The symbol is preserved but I can have a space after it between that and output that state.

92
00:05:25,480 --> 00:05:26,480
This is fine.

93
00:05:26,590 --> 00:05:27,650
This is fine.

94
00:05:27,670 --> 00:05:28,570
This is not fine.

95
00:05:28,660 --> 00:05:28,970
OK.

96
00:05:28,990 --> 00:05:30,920
Does that make sense.

97
00:05:31,300 --> 00:05:34,360
B I just remember that the shell is interpreting what we write.

98
00:05:34,450 --> 00:05:41,320
The shell is looking for one greater than or just greater than as a symbol and it has to find that symbol

99
00:05:41,320 --> 00:05:42,850
in order to understand what it wants.

100
00:05:42,920 --> 00:05:48,500
To do so if we break up one grid with a space now it no longer works because the shell isn't looking

101
00:05:48,500 --> 00:05:48,810
for that.

102
00:05:48,860 --> 00:05:49,370
OK.

103
00:05:49,580 --> 00:05:49,790
OK.

104
00:05:49,790 --> 00:05:50,150
Awesome.

105
00:05:50,150 --> 00:05:52,610
So let's try adding more text to the file.

106
00:05:52,610 --> 00:05:54,220
Let's try and add the text.

107
00:05:54,290 --> 00:05:55,050
Wow.

108
00:05:55,160 --> 00:05:57,040
So it says Linux is amazing.

109
00:05:57,050 --> 00:05:58,110
And then wow.

110
00:05:58,250 --> 00:05:58,670
OK.

111
00:05:58,820 --> 00:06:05,200
So if we do that and we type Wow and then press control-C to stop.

112
00:06:05,840 --> 00:06:11,010
Now when we check the output RTX the file we expect it to say Linux is amazing.

113
00:06:11,030 --> 00:06:11,440
Wow.

114
00:06:11,480 --> 00:06:11,890
Right.

115
00:06:11,990 --> 00:06:20,140
But when we open it it just says the word wow what happened to the text it says Linux is amazing.

116
00:06:20,480 --> 00:06:25,810
Well redirection by default will remove everything in a file before writing to it.

117
00:06:25,820 --> 00:06:28,250
The fancy word for that is called truncation.

118
00:06:28,250 --> 00:06:32,240
But basically what happened is looks emptied our file and then wrote Wow.

119
00:06:32,300 --> 00:06:33,950
It was kind of annoying.

120
00:06:34,100 --> 00:06:39,990
So how can we write to a file again using redirection without truncating it well to do that we would

121
00:06:39,990 --> 00:06:41,990
write the redirection like this.

122
00:06:42,030 --> 00:06:42,450
OK.

123
00:06:42,660 --> 00:06:51,490
So you would write cat 1 greater than greater than 80 X-Tex you can see we've used two arrows there.

124
00:06:51,570 --> 00:06:52,040
OK.

125
00:06:52,230 --> 00:06:55,740
So instead of having one Ira we have two right after one another.

126
00:06:55,750 --> 00:06:58,550
Now when I type Linux is amazing.

127
00:06:59,630 --> 00:07:00,090
OK.

128
00:07:00,260 --> 00:07:02,430
And I press control and see this too.

129
00:07:02,480 --> 00:07:05,370
And that now we look inside politics.

130
00:07:05,610 --> 00:07:07,300
We now have Linux is amazing.

131
00:07:07,370 --> 00:07:08,520
After Wow.

132
00:07:08,670 --> 00:07:09,280
OK.

133
00:07:09,300 --> 00:07:11,630
And again the shortcut still applies.

134
00:07:11,730 --> 00:07:18,330
So instead of having cat one gray and angry and by the way if that's shortcut right there I just press

135
00:07:18,330 --> 00:07:19,240
the barricade.

136
00:07:19,380 --> 00:07:24,330
Is it having one great regret that I can just have greater and greater OK when I do that.

137
00:07:24,360 --> 00:07:28,330
And I say Linux is very amazing.

138
00:07:28,350 --> 00:07:30,270
Did that stop then.

139
00:07:30,330 --> 00:07:33,120
When I reload the file we can see the ads.

140
00:07:33,120 --> 00:07:34,800
Linux is very amazing.

141
00:07:34,860 --> 00:07:39,450
OK so this works just as well with just a great great great on and it works just as well as having the

142
00:07:39,450 --> 00:07:43,800
number one because Linux makes it just easier for us because usually you're redirecting standard output

143
00:07:44,040 --> 00:07:46,010
which is data stream number one.

144
00:07:46,020 --> 00:07:49,220
So that's how you redirect standard output.

145
00:07:49,230 --> 00:07:56,240
And this process as I said of using the double Aros is called appending to a file.

146
00:07:56,280 --> 00:08:00,030
So in the interest of time we're going to cut our discussion short in this video and we're going to

147
00:08:00,030 --> 00:08:01,530
pick it up again in the next video.

148
00:08:01,620 --> 00:08:06,090
But in summary what you've seen in this video is first of all that data streams have numbers associated

149
00:08:06,090 --> 00:08:12,210
with the data stream number zero is standard input data stream number one is standard output and data

150
00:08:12,210 --> 00:08:14,310
stream number two is standard error.

151
00:08:14,490 --> 00:08:19,760
And you can use these numbers to actually access the specific data streams that you want for redirection.

152
00:08:19,760 --> 00:08:24,290
Now you've in this video you've seen how to redirect standard output which is data stream number one.

153
00:08:24,300 --> 00:08:27,690
And it's probably the one that you will be using most of the time.

154
00:08:27,870 --> 00:08:29,870
But what you need to make sure of it.

155
00:08:29,880 --> 00:08:33,920
And this works for all data streams is you need to be careful of truncating your files.

156
00:08:33,960 --> 00:08:38,100
You saw that when you use one arrow when you were a reader when you were redirecting some of the output

157
00:08:38,670 --> 00:08:44,820
stage the shell would delete everything that was in the file or in the place that you were redirecting

158
00:08:44,820 --> 00:08:47,210
to before adding the data in.

159
00:08:47,250 --> 00:08:53,490
But if you use two arrows then you can actually append your data to the file you can add your data on

160
00:08:53,490 --> 00:08:54,810
top of what is already there.

161
00:08:54,810 --> 00:08:56,320
So just be aware of that.

162
00:08:56,490 --> 00:09:00,720
So in the next video we're going to take a look now at how you would redirect standard error and standard

163
00:09:00,750 --> 00:09:01,330
input.

164
00:09:01,440 --> 00:09:03,040
So I'll see you in the next video.
