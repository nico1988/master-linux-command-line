1
00:00:00,150 --> 00:00:02,960
大家好，欢迎各位美女收看这个视频。
Hello you beautiful people are welcome to this video.

2
00:00:02,950 --> 00:00:07,470
现在，您将学习通配符，而不是拥有一个很棒的名称。
Well you're going to be learning about wildcards now other than having an awesome name.

3
00:00:07,470 --> 00:00:12,230
通配符是非常有用的工具，可以使您的命令更精确、更有表现力
Wild cards are very useful tools that will make your commands a lot more precise a lot more expressive

4
00:00:12,480 --> 00:00:14,150
而且要强大得多。
and a lot more powerful.

5
00:00:14,160 --> 00:00:18,120
现在，在本课程中，您将了解最常见的通配符类型，并了解如何
Now in this lecture you're going to learn about the most common types of wildcards and you'll see how

6
00:00:18,120 --> 00:00:21,360
它们对于在Linux中操作文件非常有用。
they can be very useful for manipulating files in Linux.

7
00:00:21,390 --> 00:00:24,900
在视频结束时，您将了解如何使用一些最常见的墙卡类型，您还可以
By the end of the video you'll know how to use some of the most common types of wall cards and you also

8
00:00:24,900 --> 00:00:27,830
能够创建更强大的命令。
have the ability to create more powerful commands.

9
00:00:27,930 --> 00:00:30,070
所以，让我们继续直截了当地谈吧。
So let's go ahead and get right into it.

10
00:00:31,290 --> 00:00:31,750
好的。
OK.

11
00:00:31,800 --> 00:00:37,440
因此，首先让我们再看一下L s命令，现在ls命令将列出每个
So first let's take a look again at the L s command now the ls command will list the contents of every

12
00:00:37,440 --> 00:00:39,830
我们为其提供有效路径的目录。
directory that we give it a valid path to.

13
00:00:40,020 --> 00:00:43,820
例如，假设我们想要列出Documents目录的内容。
So for example let's say we wanted to list the contents of our documents directory.

14
00:00:43,860 --> 00:00:47,700
我们可以使用ls，然后给它一个指向我们的文档目录的路径。
We could do ls and then give it a path to our documents directory.

15
00:00:47,850 --> 00:00:53,070
好的，当你在劈开上发微博的时候，我们可能会加上一些制表符补全，然后让它列出我们的文档
OK so when you slash that maybe we'd throw in a bit of tab completion and get it to list our documents

16
00:00:53,370 --> 00:00:58,230
或者，如果我们已经在主文件夹中，就像您现在看到的那样，我们可以只说LIST LIST OUT
or if we're already in our home folder like we are now as you can see we could just say list list out

17
00:00:58,520 --> 00:01:00,570
文件，这样就可以了。
documents and that will do fine.

18
00:01:00,570 --> 00:01:06,210
但是，如果我们想要查看Documents文件夹、Downloads文件夹和
But what if we wanted to have a look at what's inside our documents folder our downloads folder and

19
00:01:06,210 --> 00:01:08,410
我们的图片文件夹同时打开。
our Pictures folder at the same time.

20
00:01:08,520 --> 00:01:14,700
很明显，在屏幕上我们这样做的方式是，我们只说不到文档，有点厚颜无耻的Tab键顺序
Well it's clear the screen the way we do that is we just say less than documents bit of cheeky tab order

21
00:01:14,700 --> 00:01:20,490
完成下载一些厚颜无耻的Tabata完成和一些带有一些厚颜无耻的Tabel的图片到
completion downloads bit of cheeky Tabata completion and some pictures with a bit of cheeky tabel to

22
00:01:20,490 --> 00:01:26,490
完成，然后如果我们现在继续，您会看到我们实际上可以看到每个
completion and then if we go ahead right now you'll see that we can actually see the contents of each

23
00:01:26,490 --> 00:01:27,770
列出的目录。
directory listed.

24
00:01:27,960 --> 00:01:29,830
到目前一切尚好。
So far so good.

25
00:01:30,000 --> 00:01:35,520
但是您可以看到这个过程是如何手动进行的，这就是在哪里键入文档，然后键入Downloads
But you can see how manual of a process this was right where to type out documents then type out downloads

26
00:01:35,550 --> 00:01:40,860
然后键入图片，即使用Tabel来完成，以便将它们作为公共参数传递
and then type at pictures even with even with tabel to completion in order to pass them as common arguments

27
00:01:41,040 --> 00:01:42,760
添加到ls命令。
to the ls command.

28
00:01:42,830 --> 00:01:48,290
现在，通配符基本上是特殊符号，shell将其解释为具有特殊含义。
Now wildcards are basically special symbols that the shell interprets to have a special meaning.

29
00:01:48,330 --> 00:01:54,060
通配符背后的想法是构建称为正则表达式的强大模式，以便
The idea behind wildcards is to build up powerful patterns known as regular expressions so that instead

30
00:01:54,060 --> 00:01:59,850
在手动键入每个命令行参数的情况下，您可以说类似于嘿Linux make
of typing out every command line argument manually you can instead say something like hey linux make

31
00:01:59,850 --> 00:02:03,080
此命令作用于与此模式匹配的任何内容。
this command act on anything that matches this pattern.

32
00:02:03,360 --> 00:02:08,520
这些模式称为正则表达式，您可以将通配符视为一些有用的
The patterns are known as regular expressions and you can think of wildcards as being some of the useful

33
00:02:08,520 --> 00:02:14,580
用于创建正则表达式和使用通配符构建正则表达式的构建块提供了
building blocks for creating regular expressions and using wildcards to build regular expressions gives

34
00:02:14,580 --> 00:02:20,760
您可以非常灵活地控制命令的工作方式，并且可以省去大量的打字工作
you lots of flexibility and control of how your commands work and can save you a whole bunch of typing

35
00:02:21,150 --> 00:02:24,690
使用正则表达式可以确保命令更具表现力。
and using regular expressions make sure commands a lot more expressive.

36
00:02:24,690 --> 00:02:30,450
例如，不是像这样表示ls命令，而是列出此文件夹的内容，如下所示
So for example instead of expressing the ls command like list out the contents of this folder and this

37
00:02:30,450 --> 00:02:34,650
文件夹和这个文件夹，这是我们通常使用它的方式，不带逗号和参数，对吧
folder and this folder which is the way that we would usually be using it with comma non-arguments right

38
00:02:34,650 --> 00:02:42,920
我们会说LS做文档、下载和图片下载器、下载和图片。
we'd be saying LS Do documents and downloads and pictures downloaders down downloads and pictures.

39
00:02:42,990 --> 00:02:43,450
好的。
OK.

40
00:02:43,590 --> 00:02:44,420
这就是它的运作方式。
That's how it works.

41
00:02:44,420 --> 00:02:45,970
您必须手动列出它们。
You've got to list them manually.

42
00:02:46,200 --> 00:02:52,400
相反，您可以只做一些类似的操作，比如不会使用列出每个文件开始的内容
Instead you could just do something like hey wouldn't use list out the contents of every file starts

43
00:02:52,410 --> 00:02:53,490
字母D
with the letter D.

44
00:02:53,760 --> 00:02:58,800
例如，如果您要删除文件，而不是说删除此文件，今年秋天和今年秋天
For example if you're removing files instead of saying remove this file and this fall and this fall

45
00:02:58,980 --> 00:03:04,050
例如，您可以说删除此文件夹中的每个文件，只要其名称以datti xti结尾即可。
you can say remove every file in this folder as long as its name ends in Datti XTi for example.

46
00:03:04,050 --> 00:03:08,520
或者，如果您要复制文件，而不是在此文件中说复制此文件，您可以说复制间隔
Or if you're copying files instead of saying copy this file this far in this file you can say copy every

47
00:03:08,520 --> 00:03:14,850
只要文件名以Dot PTF Case结尾，即可将文件从此文件夹复制到此另一个文件夹。
file from this folder and to this other folder as long as its name ends with Dot PTF case.

48
00:03:14,860 --> 00:03:20,100
现在我们明白了，我们正在使用通配符来构建这些模式，这些正则表达式。
So now that we understand that we're using wild cards to build these patterns these regular expressions.

49
00:03:20,260 --> 00:03:23,440
让我们开始使用通配符构建一些正则表达式。
Let's start building some regular expressions using wildcards.

50
00:03:23,520 --> 00:03:28,210
然后最常用的通配符之一是星号或星号通配符。
And then one of the most used wildcards is the asterisk or the star wildcard.

51
00:03:28,360 --> 00:03:33,330
现在我通过按Shift键和键盘上的8键来找到星星，这是8个班次中的第一个班次。
Now I find the star by pressing shift and eight on my keyboard the first shift in eight.

52
00:03:33,370 --> 00:03:40,420
如果你用过Microsoft Accelerate，你知道一个软件电子表格包，我就会看到星号。
I get the star come up if you ever use Microsoft accelerate you know a software spreadsheet package.

53
00:03:40,420 --> 00:03:43,230
这是你用来做乘法的符号。
It's the symbol you use to do multiplication.

54
00:03:43,320 --> 00:03:48,810
但是我发现在我的键盘上使用Shift和8可能与你的有所不同，但就这么简单
But I find that using shift and 8 on my keyboard it might be different on yours but it's that simple

55
00:03:48,850 --> 00:03:51,270
我们现在要找的是通配符。
we're looking for now wildcards.

56
00:03:51,310 --> 00:03:59,320
每个匹配特定的模式，星号或星通配符匹配任何一段文本
Each match a specific pattern and the asterisk or the star wildcard matches any piece of text regardless

57
00:03:59,320 --> 00:04:02,340
该文本的长度，并且它也与数字匹配。
of the length of that text and it also matches numbers.

58
00:04:02,620 --> 00:04:07,550
因此，假设我们想要检查主文件夹中每个目录的内容。
So let's say that we wanted to check the contents of every directory in the home folder.

59
00:04:07,550 --> 00:04:08,420
让我清理一下屏幕。
Let me clear the screen.

60
00:04:08,500 --> 00:04:14,110
如果我播放屏幕，而不是全部列出，好的，因为这里有相当多的折叠，对吧
If I play the screen instead of listing them all out OK because it's quite a few folds in here right

61
00:04:14,120 --> 00:04:19,980
而不是说OK LS桌面、文档和下载等等。
instead of saying OK LS desktop and documents and downloads and so on and so on.

62
00:04:20,230 --> 00:04:24,150
我们所要做的就是做lsstar。
All we have to do is just do ls star.

63
00:04:24,790 --> 00:04:31,540
好的，如果我按下它，如果我按了，你可以看到它只是列出了家里的所有东西
OK so if I press it if I do that you can see that it is just listed out all of the contents of the home

64
00:04:31,540 --> 00:04:42,180
文件夹、桌面文档、下载音乐、图片、公共模板和视频一气呵成。
folder the desktop documents downloads music pictures public templates and videos all in one go.

65
00:04:42,220 --> 00:04:43,330
所以我们要清空屏幕。
So we clear the screen.

66
00:04:43,620 --> 00:04:44,860
好的。
OK.

67
00:04:44,950 --> 00:04:45,770
那这是怎么发生的。
So how did that happen.

68
00:04:45,790 --> 00:04:50,820
发生这种情况的原因是因为商店匹配任何东西。
The reason that happened is because the store matches anything.

69
00:04:50,860 --> 00:04:56,480
好的，所以你需要考虑的是，当你给一个命令一个正则表达式来使用的时候。
OK so you will you need to think of is when you give a command a regular expression to work with.

70
00:04:56,590 --> 00:04:59,290
想象一下将其作为命令行参数。
Imagine it putting as command line arguments.

71
00:04:59,290 --> 00:05:01,640
任何符合这个模式的东西。
Anything that matches that pattern.

72
00:05:02,050 --> 00:05:02,530
好的。
OK.

73
00:05:02,740 --> 00:05:12,370
因此，因为星通配符匹配任何内容，所以它将所有内容作为命令行参数放入LS
So because the star wildcard matches anything it puts everything as command line arguments to the LS

74
00:05:12,370 --> 00:05:13,070
指挥部。
command.

75
00:05:13,210 --> 00:05:13,850
这事儿可以理解。
That makes sense.

76
00:05:13,930 --> 00:05:14,930
我们再举一个例子。
Let's take another example.

77
00:05:14,980 --> 00:05:19,530
好的，假设我只想列出以D开头的文件夹的内容。
OK so let's say I just wanted to list the contents of the folders starting with D.

78
00:05:19,690 --> 00:05:22,150
所以桌面下载和文档文件夹。
So the desktop downloads and documents folders.

79
00:05:22,150 --> 00:05:22,620
好的。
OK.

80
00:05:22,870 --> 00:05:29,500
我能做的是，我可以说，好的，让我们做不到大写的D，然后是一个星号。
What I can do is I could say OK let's do less than a capital D and then a star.

81
00:05:29,560 --> 00:05:32,360
现在的模式是这样的。
Now the pattern is this bit.

82
00:05:32,420 --> 00:05:35,270
好的，图案是D，他们是星星。
OK the pattern is the D them the star.

83
00:05:35,470 --> 00:05:36,030
好的。
OK.

84
00:05:36,310 --> 00:05:39,010
星号是带有字母D的积木之一。
And the star is one of the building blocks with the letter D.

85
00:05:39,010 --> 00:05:46,840
所以我们在这里说的是listo，然后把它作为命令参数，任何有D a大写的东西
So what we're saying here is listo then giving it as a command argument anything that has a D a capital

86
00:05:46,840 --> 00:05:49,180
d，然后跟任何东西。
D and then followed by anything.

87
00:05:49,180 --> 00:05:51,930
所以基本上所有以大写D开头的东西。
So basically anything that starts with a capital D.

88
00:05:51,950 --> 00:05:58,250
如果我这样做，您可以看到我们只看到桌面文档和下载，您可以看到
So if I do the you can see that we just see the desktop documents and downloads and you can see that

89
00:05:58,250 --> 00:06:03,920
它们都与这个图案相匹配，这个D-Star，它们以大写D开头，如果后面跟任何东西
they all match this pattern this D-Star they start with a capital D and then if followed by anything

90
00:06:04,130 --> 00:06:06,950
它们以大写D开头，然后跟任何字母。
they start with a capital D and then are followed by anything.

91
00:06:07,010 --> 00:06:09,180
如果我们只想要文档和下载呢？
What if we just want documents and downloads.

92
00:06:09,200 --> 00:06:12,680
嗯，它们以d‘eau开头，然后是任何正确的东西。
Well they start with d'eau and then followed by anything right.

93
00:06:12,800 --> 00:06:18,760
所以如果我做ls D O，那么你能看到的任何东西，我们只得到文档和下载。
So if I do ls D O then anything you can see we just get documents and downloads.

94
00:06:18,890 --> 00:06:21,580
但是桌面会被忽略。
But desktop is ignored.

95
00:06:21,830 --> 00:06:27,800
这里需要记住的重要一点是，这些通配符和这些正则表达式
Now something that is important to remember here is that these wild cards and these regular expressions

96
00:06:27,860 --> 00:06:29,590
区分大小写。
are case sensitive.

97
00:06:29,630 --> 00:06:35,810
所以，如果我们做了LS D，然后Savoned有DS小写，你可以看到我们什么也得不到，什么也得不到
So if we did LS D and then astonied does have the DS lowercase you can see that we get nothing nothing

98
00:06:35,810 --> 00:06:37,920
返回是因为所有内容都不以小写D开头。
comes back because nothing starts with the lowercase D.

99
00:06:37,940 --> 00:06:40,790
但是如果我们做大写B。
But if we do capital B.

100
00:06:40,790 --> 00:06:43,190
现在这样就行了。
Now that will work OK.

101
00:06:43,190 --> 00:06:44,180
所以这真的很棒。
So that's really awesome.

102
00:06:44,180 --> 00:06:49,490
让我来清理一下屏幕，您已经看到了明星通配符可以用来匹配任何
Let me just clear the screen you've seen a few ways that the star wild card can be used to match any

103
00:06:49,490 --> 00:06:53,540
文本，您已经看到了它可以用来构建正则表达式的一些方法。
text and you've seen some ways that it can be used to build regular expressions.

104
00:06:53,540 --> 00:06:57,680
现在，在使用正则表达式时，您可能会使用其他一些常用通配符
Now there are a few other common wild cards that you'll likely use when working with regular expressions

105
00:06:57,680 --> 00:06:58,500
还有通配符。
and wild cards.

106
00:06:58,640 --> 00:07:01,150
第一个是问号通配符。
And the first is the question mark wildcard.

107
00:07:01,220 --> 00:07:05,480
现在星通配符将匹配任何内容，而不考虑长度。
Now the star wildcard will match anything regardless of length.

108
00:07:05,480 --> 00:07:12,410
例如，如果我做像Stardock T-Rex t这样的事情，只要它结束，就可以匹配任何东西
So for example if I do something like Stardock T-Rex t that could match anything as long as it ends

109
00:07:12,470 --> 00:07:19,890
因为如果我从60开始，你会看到我们只看到以点T结尾的东西。
in Dot XTi t because if I do ls start up to 60 you'll see that we only see things that end in dot T.

110
00:07:19,910 --> 00:07:21,270
X-Take。
X take.

111
00:07:21,320 --> 00:07:27,950
现在，如果在取t之前出现的开头是1都无关紧要，更不用说
Now it doesn't matter if what at the beginning of the of the comes before that takes t is 1 let alone

112
00:07:28,130 --> 00:07:32,180
一个数字长，或者你知道一百个字母长，总是充满数字或其他无关紧要的东西
1 number long or you know a hundred letters long always full of numbers or whatever it doesn't matter

113
00:07:32,180 --> 00:07:38,960
如果它有一千个字符，但仍然匹配，因为星号可以匹配任何内容。
if it's a thousand characters long and it'll still match because the star matches anything.

114
00:07:38,960 --> 00:07:44,200
但是问号通配符只能匹配一个位置。
But the question mark wildcard will only match one place.

115
00:07:44,220 --> 00:07:44,810
所以如果我这么做了。
So if I do.

116
00:07:44,810 --> 00:07:45,840
问号。
Question mark.

117
00:07:45,870 --> 00:07:47,060
西蒂医生。
Dr. XTi.

118
00:07:47,170 --> 00:07:51,220
好的，如果我现在这样做，什么都不会出现。
OK if I do ls now nothing will actually show up.

119
00:07:51,310 --> 00:07:51,780
好的。
OK.

120
00:07:51,860 --> 00:07:53,350
因为问题是这样的。
Because the question is this.

121
00:07:53,430 --> 00:07:56,720
这基本上说明了这说明的是。
This says basically what this says is.

122
00:07:57,440 --> 00:08:01,750
所以任何以点结尾的东西都需要t，但在它之前只有一件事。
So anything that ends in Dot takes t but only has one thing before it.

123
00:08:01,930 --> 00:08:02,320
好的。
OK.

124
00:08:02,480 --> 00:08:10,670
所以这将与点txti或提示高达60，或Elda T-Rex T或1.60相匹配。
So this would match things like a dot t XTi or cued up to 60 or Elda T-Rex T or 1.60.

125
00:08:10,680 --> 00:08:15,040
好的，你注意到他们都只有一个位置，就在Datti XTi之前。
OK you notice how they've all just got one place just before the Datti XTi.

126
00:08:15,200 --> 00:08:15,690
好的。
OK.

127
00:08:15,800 --> 00:08:21,770
问号是一种方式，表示它就像是星星所在位置的占位符。
The question mark is a way of saying it's like a placeholder for just that place where's the star.

128
00:08:21,770 --> 00:08:23,680
有多长时间并不重要。
It doesn't matter how long it is.

129
00:08:23,990 --> 00:08:28,850
因此，问号通配符允许您保持星型通配符的通用性，因为它
So the question mark wild card allows you to maintain the generality of the star wildcard because it

130
00:08:28,850 --> 00:08:32,720
不管它匹配什么，它可以匹配一个数字，也可以匹配一个字母。
doesn't matter what it matches it can match a number or it can match a letter.

131
00:08:33,000 --> 00:08:35,830
但它允许您限制长度。
But it allows you to limit the length.

132
00:08:35,870 --> 00:08:39,510
好的，明星没有长度限制。
OK the star doesn't put a limit on length.

133
00:08:39,860 --> 00:08:40,820
问号在哪里。
Where's the question mark.

134
00:08:40,820 --> 00:08:43,770
是的，但用什么填满那个地方其实并不重要。
Does but it doesn't really matter what fills that place.

135
00:08:43,850 --> 00:08:44,320
好的。
OK.

136
00:08:44,420 --> 00:08:49,910
现在，当您想要构建常规模式但又关心以下内容时，通常会使用问号通配符
Now you usually use the question mark wildcard when you want to build a general pattern but care about

137
00:08:49,910 --> 00:08:51,240
文件名的长度。
the length of the filename.

138
00:08:51,320 --> 00:08:59,880
好的，如果我们做一些类似问号、问号、PTF的事情，那么就会匹配像1这样的东西
OK so if we did something like question mark question mark PTF then that would match things like a 1

139
00:08:59,930 --> 00:09:08,200
点PDA或B2或PTF或AID或PTF，或者你知道的ZED，7点PTF或类似7：7点的百科。
dot PDA or B2 or PTF or aid or PTF or you know Zed seven dot PTF or something like 7:7 dot pedia.

140
00:09:08,210 --> 00:09:14,720
您可以看到我们只占用了两个空间，然后没有PTF，这就是问号时钟问号
You see how we're just taking up two spaces and then not PTF that's what question clock question mark

141
00:09:14,780 --> 00:09:15,810
或者PTF也行。
or PTF would do.

142
00:09:15,860 --> 00:09:18,220
好的，我们说我们要用两样东西填满它。
OK we're saying we're going to fill it with two things.

143
00:09:18,320 --> 00:09:22,670
两个空间，我们不确定它会不会到那里，但肯定有两个空间，两个地方。
Two spaces we're not sure it's going to go there but there's got to be two spaces two places.

144
00:09:22,850 --> 00:09:24,100
然后是PTF。
And then PTF.

145
00:09:24,210 --> 00:09:24,530
好的。
OK.

146
00:09:24,560 --> 00:09:25,530
所以这就是它的工作原理。
So that's how that works.

147
00:09:25,530 --> 00:09:27,310
这是现在的问号。
That's the question mark now.

148
00:09:27,350 --> 00:09:32,230
另一种类型的通配符称为方括号，这里的方括号就是这些。
Another type of wild card is called is the square brackets which are these ones here.

149
00:09:32,230 --> 00:09:33,400
这里的方括号。
The square brackets here.

150
00:09:33,500 --> 00:09:34,610
好的。
OK.

151
00:09:35,180 --> 00:09:40,430
方括号通配符与问号相似，因为它只匹配一个位置。
And the square brackets wildcard is similar to the question mark in that it will only match one place.

152
00:09:40,520 --> 00:09:46,850
但是，不匹配问号之类的内容，将只允许使用方括号中的模式
But instead of matching anything like the question mark will square brackets allow only allow the pattern

153
00:09:46,850 --> 00:09:52,760
更具体地说，只有在字母或数字属于给定集合时才匹配它们
to be there to be more specific and only match the letters or numbers if they belong to a given set

154
00:09:52,760 --> 00:09:53,290
一系列的选择。
of options.

155
00:09:53,300 --> 00:09:55,410
对我来说展示可能比解释容易。
Probably easier for me to show than to explain.

156
00:09:55,460 --> 00:09:55,860
好的。
OK.

157
00:09:55,970 --> 00:10:04,820
假设我们有6个文件作为文本，我们有文件B DirectX t，我们有Falce Dotty x t，我们是
So say we had six files we had for a text we had file B directx t we had falce Dotty x t and we are

158
00:10:04,820 --> 00:10:09,520
2.6T跟踪1.60，3.6D跟踪。
followed 1.60 for 2.6 T and for 3.6 D.

159
00:10:09,720 --> 00:10:12,120
好的，哪个意图。
OK which intent.

160
00:10:12,320 --> 00:10:17,120
如果我这样做了，除非我们的主目录中实际上已经有这些文件。
If I do unless we actually already have those in a in our home directory.

161
00:10:17,160 --> 00:10:17,570
好的。
OK.

162
00:10:17,840 --> 00:10:21,610
因此，假设我们想要匹配文件名中只包含数字的文件。
So let's say we wanted to match the files that just had numbers in the filename.

163
00:10:21,720 --> 00:10:25,870
因此，对于1.60，2.2XTi和3.6。
So for 1.60 for 2.2 XTi and for 3.6.

164
00:10:25,880 --> 00:10:34,640
但我们不想让Abian同意这样做，我们可以做的比提交更少，因为
But we don't want the ones that have Abian say OK to do this we could do less than file because the

165
00:10:34,640 --> 00:10:38,620
名称必须以file开头，然后打开方括号，给它一堆选项。
name's got to start with file then open the square brackets and give it a bunch of options.

166
00:10:38,630 --> 00:10:44,590
我们可以说12，3，4，5，6，7，8，9，0点文本。
We could say 1 2 3 4 5 6 7 8 9 0 dot text.

167
00:10:44,930 --> 00:10:46,090
好的，这是什么。
Ok so what's this.

168
00:10:46,160 --> 00:10:50,870
基本上，这些方括号中的所有东西都是一个可以填补这个位置的选项。
Basically everything in these square brackets is an option that could fill that one place.

169
00:10:50,900 --> 00:11:01,350
所以任何文件都会被归档，然后是1 2 3 4 5 6 7 8 9 0，其中任何一个都是Dotti XTi案例，如果
So anything goes file and then either 1 2 3 4 5 6 7 8 9 0 0 any one of those then Dotti XTi case if

170
00:11:01,350 --> 00:11:08,310
我们这样做了，你看，我们得到了4，1，4，2和4，3，但是我们没有得到A，B和C，因为它们不是
we do that you see that we get 4 1 4 2 and 4 3 but we don't get the A B and C because they're not part

171
00:11:08,370 --> 00:11:09,290
所有选择中的一部分。
of the options.

172
00:11:09,330 --> 00:11:09,820
正确的。
Right.

173
00:11:10,020 --> 00:11:15,070
从一组仅与一个Faltu和所有三个Faltu匹配的文件中提取。
From a given set of files that just matches for one Faltu and for all three.

174
00:11:15,350 --> 00:11:21,150
但我不想让你知道这怎么可能用星号通配符或
But I don't want you to know is how this wouldn't be possible using either the star wildcard or the

175
00:11:21,150 --> 00:11:23,560
如果我们这样做，请使用问号通配符。
question mark wildcard if we do.

176
00:11:23,580 --> 00:11:29,250
最后一个问号t问号将与任何内容匹配。
LS final question mark t the question mark will match anything.

177
00:11:29,310 --> 00:11:31,080
好的，但只有一个地方。
AK but only one place.

178
00:11:31,160 --> 00:11:34,070
如果我们拍明星的话你会看到的。
If we do the star you're going to get though.

179
00:11:34,290 --> 00:11:39,210
我需要LSN，你也会得到基本上相同的东西，因为这些不会限制
I need to LSN you're going to get basically the same thing as well because these don't restrict what

180
00:11:39,210 --> 00:11:40,710
去那个地方。
goes in that place.

181
00:11:40,770 --> 00:11:43,280
不管长短，这批货什么都有。
The stock will have anything regardless of length.

182
00:11:43,290 --> 00:11:47,700
问号只需要一个位置，但它并不关心是什么填满了它。
The question mark will need just one place but it doesn't care what fills it.

183
00:11:47,760 --> 00:11:53,860
方括号也只有一个位置，但它们允许您限制去那里的内容。
The square brackets also only have one place but they allow you to restrict what goes there.

184
00:11:53,850 --> 00:11:59,730
所以他们就像是最严格的，就像是一种非常严格的沃克哈特。
So they're like the most restrictive it's like a very restrictive kind of kind of Wockhardt.

185
00:11:59,730 --> 00:12:05,850
现在您可能已经注意到，键入所有这些数字0 1 2 3 4 5 6 7 8 9有点麻烦
Now you may have noticed that typing out all these numbers 0 1 2 3 4 5 6 7 8 9 is a bit of a hassle

186
00:12:05,850 --> 00:12:06,310
正确的。
right.

187
00:12:06,450 --> 00:12:08,310
所以舒姆让我们的比赛变得更容易了。
So the Schum makes it a bit easier for us.

188
00:12:08,310 --> 00:12:13,710
我们有一条从0到9的捷径，这给了我们完全相同的东西。
We've got a shortcut we can do for 0 to 9 and that gives us exactly the same thing.

189
00:12:13,710 --> 00:12:16,110
因此，不必键入所有的数字，这要容易得多。
So instead of having to type out all the numbers it's it's much easier.

190
00:12:16,170 --> 00:12:22,290
当您想要使用字母表时，这真的很有用，您可以继续操作，这将
Which is really useful for when you want to work with the alphabet and you can go ahead and that will

191
00:12:22,290 --> 00:12:23,960
工作完全正常。
work perfectly OK.

192
00:12:24,330 --> 00:12:27,440
如果你想刻上两位数呢。
What if you want to notched two digits.

193
00:12:27,450 --> 00:12:30,070
好的，那么如果您想要类似于文件11的内容，那又如何呢？
OK so what if you wanted something like file 11.

194
00:12:30,150 --> 00:12:30,720
好的。
OK.

195
00:12:31,020 --> 00:12:32,360
我该怎么做呢。
How would I do that.

196
00:12:32,850 --> 00:12:39,480
好的，你这样做的方法是，你会说LS文件，然后今晚的第一个数字是0，然后再给它一个数字
Well the way you do that is you'd say LS file then for the first digit 0 tonight then just give it another

197
00:12:39,480 --> 00:12:42,520
一个0到9，然后是Datti Xti。
one zero to nine then Datti XTi.

198
00:12:42,730 --> 00:12:43,160
好的。
OK.

199
00:12:43,290 --> 00:12:45,860
所以这个数字变成了第一个数字。
So this one becomes the first digit.

200
00:12:45,870 --> 00:12:47,680
这个数字变成第二个数字。
This one becomes the second digit.

201
00:12:47,820 --> 00:12:50,930
如果我想要一个数字，然后是一个字母呢？
What if I wanted to have a number and then a letter.

202
00:12:51,020 --> 00:12:51,700
嗯，那很简单。
Well that's easy.

203
00:12:51,720 --> 00:12:54,290
把它改成字母就行了。
Just change that to letters.

204
00:12:54,600 --> 00:12:57,790
如果我想要一个数字，然后是一个字母，然后是一个小写字母，那怎么办？
What if I wanted to have a number then a letter then a lowercase letter.

205
00:12:57,840 --> 00:13:00,550
这个简单的改变就像那样。
Well that simple change that like that.

206
00:13:00,580 --> 00:13:02,540
您可以看到In文件。
And you can see the in file.

207
00:13:03,030 --> 00:13:09,360
然后是一个可以有数字0到9的空格，然后是另一个可以有数字0到9的空格
Then one space which can have the number zero to nine then another space which can have the number of

208
00:13:09,360 --> 00:13:14,400
字母8先添加大写字母，然后添加另一个空格，该空格可以将字母8作为‘ad’小写
the letters 8 is adding uppercase then another space which can have the letters eight As'ad in lowercase

209
00:13:14,640 --> 00:13:17,020
然后以Dotti X Take结尾。
and then ends in Dotti X take.

210
00:13:17,430 --> 00:13:24,060
因此，只需添加几个简单的通配符，您就可以看到这些正则表达式可以变得多么强大。
So you can see just how powerful these regular expressions can become just by adding a few simple wildcards.

211
00:13:24,060 --> 00:13:31,200
如果我们想要数字0到9，也可以有字母A、B和C，您可以这样做吗
We could also what if we wanted to have the numbers 0 to 9 but also the letters A B and C you can do

212
00:13:31,200 --> 00:13:31,720
那也是一样的。
that as well.

213
00:13:31,740 --> 00:13:32,370
简单得不得了。
Just like that.

214
00:13:32,370 --> 00:13:36,230
而这一点将会出现在Shope中，这正是你所期待的。
And that's going to show up in Shope exactly what you'd expect.

215
00:13:36,240 --> 00:13:38,180
任何有单词file的东西。
Anything that has the word file.

216
00:13:38,310 --> 00:13:43,900
然后从0到9或者字母A、B和C中的一个大写，然后不给我发短信。
Then one of the numbers from 0 to 9 or the letters A B and C and uppercase then not text me.

217
00:13:43,950 --> 00:13:50,490
如果我将其缩小为小写ABC，他们将只得到4、1、2和3，因为这些通配符和
If I reduce that to lowercase ABC they will just get 4 one two and three because these wildcards and

218
00:13:50,490 --> 00:13:52,380
这些组织区分大小写。
these organizations are case sensitive.

219
00:13:52,470 --> 00:13:55,120
所以你可以看到非常非常强大的家伙的疯狂原因。
So you can see wild cause of really really powerful stuff guys.

220
00:13:55,140 --> 00:13:59,560
你真正需要知道的只有三个，那就是匹配任何东西的那颗星。
And the the only three that you really need to know are the star which matches anything.

221
00:13:59,640 --> 00:14:04,110
仅从一个位置匹配任何内容的问号和允许的方括号
The question mark which matches anything but only from one place and the square brackets which allow

222
00:14:04,110 --> 00:14:05,960
你只需要匹配一个地方。
you to match just one place.

223
00:14:05,970 --> 00:14:09,900
但他们也喜欢定义什么是匹配的。
But they also like to define what matches.

224
00:14:10,120 --> 00:14:12,690
好了，现在的通配符好就到此为止。
OK so that's enough wild card goodness for now.

225
00:14:12,690 --> 00:14:17,720
通配符可以使您的命令更具表现力，并使您能够更好地控制
Wild Cards can make your commands a lot more expressive and give you much greater control over how the

226
00:14:17,720 --> 00:14:23,960
命令是有效的，以这种方式使用通配符搜索文件名实际上有一个他妈的有趣的名字。
commands work and using wildcards in this way to search for filenames actually has a fucking funny name.

227
00:14:24,180 --> 00:14:25,620
这就是所谓的投球。
And it's called globbing.

228
00:14:25,670 --> 00:14:30,730
因此，如果您曾经听到单词globping在它周围漂浮，那么它的意思就是使用通配符来查找文件
So if you ever hear the word globbing floating around it just means using wildcards to look for file

229
00:14:30,730 --> 00:14:35,450
名字就像我们在这段视频中所做的那样，所以在结束之前，请快速回顾一下我们所做的
names just like we've done in this video so before closing out just take a quick recap of what we've

230
00:14:35,450 --> 00:14:36,140
学到了东西。
learned.

231
00:14:36,170 --> 00:14:41,600
首先，您将了解正则表达式的概念，正则表达式基本上是模式
First you learn about the concept of regular expressions and regular expressions are basically patterns

232
00:14:41,600 --> 00:14:43,840
一段文字需要匹配。
that a piece of text needs to match.

233
00:14:43,940 --> 00:14:44,420
好的。
OK.

234
00:14:44,630 --> 00:14:50,870
任何与该模式匹配的内容都将作为命令行参数传递给命令。
And anything that matches that pattern will be passed as a command line argument to the command.

235
00:14:50,870 --> 00:14:54,860
现在星通配符匹配任何内容，而不考虑长度。
Now the star wildcard matches anything regardless of length.

236
00:14:54,950 --> 00:15:00,500
问号匹配任何位置，而不是只匹配一个位置，方括号只匹配一个位置
The question mark matches anything but just for one place and the square brackets match just one place

237
00:15:00,740 --> 00:15:05,050
但允许您指定您知道将实际匹配的选项。
but allow you to specify options that you know will actually be matched.

238
00:15:05,050 --> 00:15:09,800
因此，与问号中的开头匹配任何内容不同，方括号始终是您选择的
So unlike the start in the questionmark which will match anything the square brackets alays you choose

239
00:15:09,890 --> 00:15:10,720
什么会是匹配的。
what will be match.

240
00:15:10,730 --> 00:15:15,120
当然，您也可以只键入您特别想要显示的字母和数字。
And of course you can just type letters and numbers in that you want specifically to appear as well.

241
00:15:15,140 --> 00:15:20,990
所以如果我用大写D，那么start就意味着任何以D开头的东西，然后是后面的任何东西。
So if I did capital D then start that means anything that starts with a D and then has anything afterwards.

242
00:15:21,020 --> 00:15:22,640
你也可以在里面输入字母和数字。
You can type letters and numbers in there as well.

243
00:15:22,640 --> 00:15:26,230
您不需要只使用星号和方括号。
You don't just have to only use the star questionmark and square brackets.

244
00:15:26,360 --> 00:15:32,270
好的，理解了通配符之后，您就有了学习不同方法的非常坚实的基础
OK so with wildcards understood you have a very solid foundation for learning about the different ways

245
00:15:32,270 --> 00:15:34,350
操作文件系统中的文件。
to manipulate files in the file system.

246
00:15:34,380 --> 00:15:39,120
主要用于创建、删除、移动、复制和粘贴文件等命令。
Major the commands to create delete move copy and paste files and so on.

247
00:15:39,170 --> 00:15:43,100
它实际上相当简单，当你学习它们的时候，你可能会想知道真正学习的意义是什么
It's actually rather simple and when you learn them you might wonder what's the point of actually learning

248
00:15:43,100 --> 00:15:45,320
如何使用它们，而不仅仅是指向和单击。
how to use them instead of just pointing and clicking.

249
00:15:45,650 --> 00:15:51,080
但是，通过了解如何结合使用这些命令和通配符，您将能够操作数百个
But by knowing how to use these commands along with wildcards you'll be able to manipulate hundreds

250
00:15:51,080 --> 00:15:55,940
在完全控制的情况下，指向和点击很快就会看起来像这样
of files at once and with complete control to the point the pointing and clicking will soon seem like

251
00:15:55,940 --> 00:15:58,370
一种非常缓慢和迟缓的做事方式。
a very slow and sluggish way of doing things.

252
00:15:58,370 --> 00:15:59,480
相信我。
Believe me.

253
00:15:59,480 --> 00:16:03,470
因此，接下来您可以进行一个快速测验来帮助您巩固对通配符的理解，因为您
So up next you can have a quick quiz to help you cement your understanding of wildcards because you

254
00:16:03,470 --> 00:16:04,830
要知道熟能生巧。
know practice makes perfect.

255
00:16:04,910 --> 00:16:09,800
然后，您要领导的下一个视频必须使用一些新命令创建文件和目录
And then the next video you're going to lead had to create files and directories using some new commands

256
00:16:10,040 --> 00:16:14,750
您还将把这些命令与通配符结合起来，使它们更加强大。
and you're also going to combine those commands with wildcards to make them even more powerful.

257
00:16:14,750 --> 00:16:19,310
您甚至会了解到一种称为支撑扩展的东西，它将向您展示如何
You'll even learn about something called brace expansion which will see which will show you how you

258
00:16:19,310 --> 00:16:24,730
仅使用一个或两个命令即可创建3个文件夹，每个文件夹包含100个文件。
can create 3 folders with 100 files in each of them using just one or two commands.

259
00:16:24,740 --> 00:16:25,580
不要相信我。
Don't believe me.

260
00:16:25,760 --> 00:16:28,040
好的，我想我会在下一个视频中见到你。
Well I guess I'll see you in the next video.

