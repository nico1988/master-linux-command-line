1
00:00:00,420 --> 00:00:01,740
Hello you beautiful people.

2
00:00:01,740 --> 00:00:02,550
And welcome back.

3
00:00:02,550 --> 00:00:07,800
We're going to be continuing on our discussion of the find command in this video by starting off showing

4
00:00:07,800 --> 00:00:10,780
you how to search for things by name.

5
00:00:10,890 --> 00:00:14,950
So let's say we want to find this file here called $5.60.

6
00:00:15,120 --> 00:00:17,140
And we're back in our home folder.

7
00:00:17,160 --> 00:00:21,840
OK we're not in our documents folder anymore we're just in our home folder and we know that this file

8
00:00:21,850 --> 00:00:27,430
you've got here he is somewhere in our home directory somewhere below this point in the file system

9
00:00:27,660 --> 00:00:32,030
but we're not exactly sure where and we're going to use the find command to find it for us.

10
00:00:32,100 --> 00:00:32,450
OK.

11
00:00:32,610 --> 00:00:35,670
So if we clear the screen let's say if we can the find command.

12
00:00:35,670 --> 00:00:39,780
We're going to start from this point in the file system by the way this is just a matter of personal

13
00:00:39,780 --> 00:00:41,470
preference actually having the dot.

14
00:00:41,490 --> 00:00:42,330
You don't need it.

15
00:00:42,330 --> 00:00:45,020
But I like to put it there just to make it a bit more complete.

16
00:00:45,090 --> 00:00:45,530
OK.

17
00:00:45,600 --> 00:00:50,120
So there we are find was starting in this position the file directory and we want to search by name.

18
00:00:50,160 --> 00:00:56,430
So we give it the name option again just with one dash and then in speech marks so in double quotes

19
00:00:56,700 --> 00:01:01,710
we want to say we were going to put the pattern that we're searching for we're going to put 5.6.

20
00:01:01,910 --> 00:01:07,230
And it does need to be in quotes otherwise the find command plays up sometimes so make sure you put

21
00:01:07,240 --> 00:01:10,780
in speech marks in these double quotes.

22
00:01:10,950 --> 00:01:13,310
And you know that that will be that will be much better.

23
00:01:13,400 --> 00:01:13,810
OK.

24
00:01:13,950 --> 00:01:20,820
So if we do if we do that and press ENTER we see that the command has indeed found for the $5.60.

25
00:01:20,910 --> 00:01:26,880
And it's given us the path all the way to it starting at the current working directory.

26
00:01:26,880 --> 00:01:31,350
OK so what if we want to define 3.6 t that will work as well.

27
00:01:31,590 --> 00:01:33,720
So is find a path to 3 up to 60.

28
00:01:33,750 --> 00:01:36,130
You can build regular expressions in here.

29
00:01:36,150 --> 00:01:43,710
If I put a store it will find every dot text file from this point in the file system so we see we've

30
00:01:43,710 --> 00:01:48,130
got one music we've got fined me for that actually which I forgot I'd created earlier in the in the

31
00:01:48,950 --> 00:01:50,170
in the course.

32
00:01:50,280 --> 00:01:52,380
We've got some in some hidden folders.

33
00:01:52,380 --> 00:01:54,570
We have them all over the place.

34
00:01:54,570 --> 00:01:57,690
We can actually also limit the depth that we search to.

35
00:01:57,690 --> 00:02:02,280
So if we go to a maximum depth of let's say to remembering that we're going to put the max depth option

36
00:02:02,610 --> 00:02:03,840
as the first option.

37
00:02:03,930 --> 00:02:04,420
OK.

38
00:02:04,590 --> 00:02:06,450
Otherwise we get a big warning don't we.

39
00:02:06,450 --> 00:02:12,060
So if I do max depth to name any name that ends in directx team will see that we found all the files

40
00:02:12,090 --> 00:02:16,650
and you know two actually but only going to depths in some really really cool right.

41
00:02:16,650 --> 00:02:20,180
You can search by name like that and you can also have.

42
00:02:20,940 --> 00:02:23,640
You can also have wild cards so I could do file.

43
00:02:23,660 --> 00:02:27,060
And then a number that takes XTi and nothing comes up.

44
00:02:27,070 --> 00:02:28,380
What if I did.

45
00:02:29,070 --> 00:02:32,900
What if I did something like questionmark.

46
00:02:33,000 --> 00:02:36,270
Nothing comes up but if I go to a big depth of like let's say 10.

47
00:02:36,480 --> 00:02:41,620
Now we see that we just get four it takes 60 5.6 a 3.6 and 2.6.

48
00:02:41,760 --> 00:02:47,670
But these Find me one find me to find me four etc. are ignored because they don't match this world.

49
00:02:47,730 --> 00:02:49,110
This regular expression.

50
00:02:49,230 --> 00:02:54,870
So that is a really powerful ability just by building upon your knowledge of regular expressions and

51
00:02:54,870 --> 00:02:56,500
wild cards.

52
00:02:56,670 --> 00:02:59,980
You can really tailor the find command to your needs.

53
00:03:00,090 --> 00:03:05,520
And the one thing I should note here is that you can't do brace expansion inside and inside the name

54
00:03:05,640 --> 00:03:07,810
command because such is something to bear in mind.

55
00:03:08,070 --> 00:03:08,780
OK.

56
00:03:09,010 --> 00:03:10,800
At least at least inside double quotes.

57
00:03:10,860 --> 00:03:12,330
Let's just leave it there.

58
00:03:12,840 --> 00:03:13,330
OK.

59
00:03:13,410 --> 00:03:19,850
So the other thing is that you can search in a case insensitive way by searching dot on name.

60
00:03:19,860 --> 00:03:27,030
So if I change this here to dot THC all in uppercase I believe the screen takes an upper case that will

61
00:03:27,570 --> 00:03:28,860
now match up.

62
00:03:28,860 --> 00:03:29,930
I did that wrong way round.

63
00:03:29,940 --> 00:03:30,760
I do like this.

64
00:03:30,900 --> 00:03:31,920
Just search name.

65
00:03:31,920 --> 00:03:32,490
OK.

66
00:03:32,760 --> 00:03:36,410
Now you'll see nothing matches because now it's search in case sensitive.

67
00:03:36,480 --> 00:03:42,690
But if I change it to name so is case insensitive searching for the name so uppercase and lowercase

68
00:03:42,690 --> 00:03:49,560
don't matter now it will match because it doesn't care that this T T is in uppercase So that's good

69
00:03:49,560 --> 00:03:52,280
if you're not sure why you put up a case in the file name.

70
00:03:52,350 --> 00:03:56,790
It's good to search with a name to make that search just a bit more general.

71
00:03:56,820 --> 00:04:02,570
Now another interesting way to search for files with the find command is by file size.

72
00:04:02,580 --> 00:04:09,000
So let's say that we wanted to search the entire file system for every file that is larger than 100

73
00:04:09,180 --> 00:04:09,940
kilobytes.

74
00:04:09,980 --> 00:04:11,490
OK so let's clear the screen.

75
00:04:11,490 --> 00:04:12,420
How would we do that.

76
00:04:12,600 --> 00:04:18,570
Well what we do is we try to find code and then we need to give it of course a place to start searching

77
00:04:18,570 --> 00:04:18,940
from.

78
00:04:18,960 --> 00:04:23,940
So let's start from the very base of the file system because we want to find every file on the system

79
00:04:23,940 --> 00:04:30,190
so let's start at the very base of the system we want to search for files that are larger than 100 kilobytes.

80
00:04:30,210 --> 00:04:33,960
So let's say that we want files so let's specify a type of f..

81
00:04:33,950 --> 00:04:36,250
So because we're just looking for files not folders.

82
00:04:36,460 --> 00:04:38,920
I mean what size so we're going to give it a size option.

83
00:04:38,940 --> 00:04:40,170
Again one dash.

84
00:04:40,380 --> 00:04:44,130
And now this is how you'd say greater than 100 kilobytes.

85
00:04:44,130 --> 00:04:49,110
OK so you see the plus meaning greater if it was less than you'd have minus so that's much less than

86
00:04:49,110 --> 00:04:49,820
100 kilobytes.

87
00:04:49,830 --> 00:04:55,650
But we want more and so more than 100 than a lowercase K for kilobytes.

88
00:04:55,650 --> 00:05:02,240
So if I press Enter you'll see that we get a whole bunch of it as we look for all the files that are

89
00:05:02,240 --> 00:05:06,120
bigger than 100 kilobytes starting at the very base of our file system.

90
00:05:06,290 --> 00:05:11,210
But one thing you might have noticed if you had a quick eye if I scroll up to the top is that we got

91
00:05:11,210 --> 00:05:13,920
a lot of permission denied errors.

92
00:05:14,180 --> 00:05:17,190
If I can show you by scrolling all the way up back up there we go.

93
00:05:17,270 --> 00:05:20,580
You can see that we've got a lot of permission denied permission denied permission denied.

94
00:05:20,600 --> 00:05:23,970
And the reason is that's because we started at the base of our file system.

95
00:05:24,170 --> 00:05:29,030
And remember the fine command would try to enter every folder but it couldn't because it didn't have

96
00:05:29,030 --> 00:05:33,680
the required privileges to enter some of the folders in our base directory that are only accessible

97
00:05:33,920 --> 00:05:37,110
to the root user to the super user to the Administrator account.

98
00:05:37,250 --> 00:05:43,790
So to fix that we just prefix the command with the pseudo commands when it goes sudo and then do the

99
00:05:43,790 --> 00:05:46,360
rest of it and we'll get a whole lot less errors.

100
00:05:46,370 --> 00:05:49,730
OK because we're not going to have those access areas before.

101
00:05:49,910 --> 00:05:56,510
Now we can count the results that we actually got out of this by piping the entire thing into the word

102
00:05:56,510 --> 00:05:58,190
camp come on with the option.

103
00:05:58,280 --> 00:06:02,870
And what this will do is it will count the amount of lines in the output that you give it.

104
00:06:02,900 --> 00:06:06,590
So if you notice when we run this you get one result per line.

105
00:06:06,640 --> 00:06:07,080
OK.

106
00:06:07,190 --> 00:06:11,390
So if we pipe all of that into the word can't come out and give it the option this will count how many

107
00:06:11,390 --> 00:06:12,050
lines.

108
00:06:12,110 --> 00:06:18,080
And if we do that we get three thousand one hundred and forty four results which is a whole bunch of

109
00:06:18,140 --> 00:06:19,180
results.

110
00:06:19,190 --> 00:06:23,600
Now one thing that's interesting is you can train together and different sizes.

111
00:06:23,600 --> 00:06:26,290
So here we're saying it needs to be greater than 100 kilobytes.

112
00:06:26,420 --> 00:06:29,920
And this is how we'd say it has to be less than 5 megabytes.

113
00:06:29,930 --> 00:06:30,290
OK.

114
00:06:30,440 --> 00:06:34,790
So here's what we're doing is we're chaining together all these different requirements we're saying

115
00:06:35,150 --> 00:06:42,890
it has to be a file and the file size has to be bigger than 100 kilobytes and the file size has to be

116
00:06:42,890 --> 00:06:44,750
less than 5 megabytes.

117
00:06:44,750 --> 00:06:49,100
And if we count how many of them there are we see that we get quite a few less.

118
00:06:49,100 --> 00:06:57,710
Now we're going to get 3000 and 30 files instead of 3000 144 So there's about 114 files that aren't

119
00:06:57,710 --> 00:07:02,690
being shown anymore because they they were bigger than 5 megabytes.

120
00:07:02,690 --> 00:07:08,360
So if I click the screen one thing that I really want to highlight here is the way that we're chaining

121
00:07:08,360 --> 00:07:10,040
together different requirements.

122
00:07:10,040 --> 00:07:10,410
OK.

123
00:07:10,550 --> 00:07:18,590
So here we're saying it has to be a file and the size has to be greater than 100 kilobytes and the size

124
00:07:18,590 --> 00:07:21,100
has to be less than 5 megabytes.

125
00:07:21,170 --> 00:07:24,640
In order for it to be contained in our requirements.

126
00:07:24,710 --> 00:07:31,670
OK so how would we say something like OK I want to find all the files that are less than 100 kilobytes

127
00:07:32,120 --> 00:07:34,550
or bigger than 5 megabytes.

128
00:07:34,700 --> 00:07:35,790
OK.

129
00:07:35,900 --> 00:07:37,430
Well the way that we do that.

130
00:07:37,490 --> 00:07:41,750
I mean first of all if we wanted to say less than 100 kilobytes we do that and if one say greater than

131
00:07:41,750 --> 00:07:44,060
5 megabytes we need to change that to a plus.

132
00:07:44,150 --> 00:07:45,800
But at the minute here.

133
00:07:46,170 --> 00:07:48,210
Let's see how many results we get.

134
00:07:48,320 --> 00:07:54,440
We're going to get zero results because it's impossible for a file to be less than 100 kilobytes and

135
00:07:54,620 --> 00:07:56,220
greater than 5 megabytes.

136
00:07:56,310 --> 00:08:00,160
You can't be bigger than five megabytes at the same time that you're less than 100 gigabytes.

137
00:08:00,160 --> 00:08:01,240
That's not possible.

138
00:08:01,250 --> 00:08:07,400
What we want to say is it needs to be less than a hundred kilobytes or greater than five megabytes and

139
00:08:07,460 --> 00:08:11,940
it needs to be less than a hundred good words or greater than 100 great and five megabytes.

140
00:08:11,990 --> 00:08:17,990
The way that you do that if you type a dash 0 in between the two requirements.

141
00:08:17,990 --> 00:08:23,990
So what we're saying is it's going to be a file and it's size needs to be less than 100 kilobytes or

142
00:08:24,050 --> 00:08:24,970
greater than five.

143
00:08:25,010 --> 00:08:29,030
So if we do that you can see now that we got a whole bunch of results.

144
00:08:29,120 --> 00:08:33,330
One hundred ninety nine thousand one hundred and twelve results.

145
00:08:33,500 --> 00:08:35,250
You can go quite wild with this.

146
00:08:35,250 --> 00:08:37,890
This anding and oring but I think that will do.

147
00:08:38,300 --> 00:08:39,540
I think that will do for now.

148
00:08:39,560 --> 00:08:42,960
You can also do not and loaded all the different logical operations.

149
00:08:42,960 --> 00:08:48,500
I mean if you're familiar with Boolean logic but I'll leave that up to you if you want to find more

150
00:08:48,920 --> 00:08:52,430
by looking at the man pages it would be a bit of a mess to show by video.

151
00:08:52,430 --> 00:08:54,050
So we've covered quite a lot in this video.

152
00:08:54,050 --> 00:08:59,960
We've seen how to use the name option for the find command to search for things by name.

153
00:08:59,960 --> 00:09:06,250
So you'd use Dasch name and then gave it in double quotes a certain regular expression that you wanted

154
00:09:06,260 --> 00:09:07,920
file names to match.

155
00:09:08,000 --> 00:09:13,010
So I could do anything ending in Dot text for example using the Star wildcard and that would give us

156
00:09:13,340 --> 00:09:16,100
all the files that ended in Dot text.

157
00:09:16,220 --> 00:09:19,110
And you can make the search case insensitive.

158
00:09:19,190 --> 00:09:26,170
So the uppercase and lowercase don't matter by using the by using the name options and they're there

159
00:09:26,180 --> 00:09:32,140
even though we have said Dotty XTi uppercase it doesn't matter because we're using the name option.

160
00:09:32,180 --> 00:09:35,600
So the first thing we look to how to find files by name.

161
00:09:35,630 --> 00:09:41,550
Then we took a look at how you could find files by their file size and you saw that you use the saw

162
00:09:41,690 --> 00:09:48,530
option and then you give it a certain file size and the plus means above the minus means.

163
00:09:48,530 --> 00:09:54,150
Below you can actually give it just exactly for example 500 megabytes that's exactly 500 megabytes.

164
00:09:54,170 --> 00:09:55,680
This is above 500 megabytes.

165
00:09:55,700 --> 00:09:58,420
This is below 500 megabytes a capital G.

166
00:09:58,460 --> 00:10:00,060
By the way is gigabyte.

167
00:10:00,330 --> 00:10:04,530
And you can find more on that in the man page for the find command.

168
00:10:04,660 --> 00:10:08,640
But in the next video we're going to be doing is we're going be jumping on some very exciting stuff.

169
00:10:08,670 --> 00:10:12,930
And what we're going to be showing you is how you can use the find command to not only give you a whole

170
00:10:12,930 --> 00:10:19,620
bunch of results but in the same command also execute another command or even another pipeline on every

171
00:10:19,620 --> 00:10:21,530
single one of those results.

172
00:10:21,530 --> 00:10:27,800
This is this is a turbocharger for your work on the Linux command line and I hope you're very very excited

173
00:10:27,810 --> 00:10:32,430
so let's cut the video here and jump over into the next one where we're going to learn how to gain even

174
00:10:32,430 --> 00:10:33,570
more superpower's.
