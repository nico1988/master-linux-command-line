1
00:00:00,150 --> 00:00:02,960
Hello you beautiful people are welcome to this video.

2
00:00:02,950 --> 00:00:07,470
Well you're going to be learning about wildcards now other than having an awesome name.

3
00:00:07,470 --> 00:00:12,230
Wild cards are very useful tools that will make your commands a lot more precise a lot more expressive

4
00:00:12,480 --> 00:00:14,150
and a lot more powerful.

5
00:00:14,160 --> 00:00:18,120
Now in this lecture you're going to learn about the most common types of wildcards and you'll see how

6
00:00:18,120 --> 00:00:21,360
they can be very useful for manipulating files in Linux.

7
00:00:21,390 --> 00:00:24,900
By the end of the video you'll know how to use some of the most common types of wall cards and you also

8
00:00:24,900 --> 00:00:27,830
have the ability to create more powerful commands.

9
00:00:27,930 --> 00:00:30,070
So let's go ahead and get right into it.

10
00:00:31,290 --> 00:00:31,750
OK.

11
00:00:31,800 --> 00:00:37,440
So first let's take a look again at the L s command now the ls command will list the contents of every

12
00:00:37,440 --> 00:00:39,830
directory that we give it a valid path to.

13
00:00:40,020 --> 00:00:43,820
So for example let's say we wanted to list the contents of our documents directory.

14
00:00:43,860 --> 00:00:47,700
We could do ls and then give it a path to our documents directory.

15
00:00:47,850 --> 00:00:53,070
OK so when you slash that maybe we'd throw in a bit of tab completion and get it to list our documents

16
00:00:53,370 --> 00:00:58,230
or if we're already in our home folder like we are now as you can see we could just say list list out

17
00:00:58,520 --> 00:01:00,570
documents and that will do fine.

18
00:01:00,570 --> 00:01:06,210
But what if we wanted to have a look at what's inside our documents folder our downloads folder and

19
00:01:06,210 --> 00:01:08,410
our Pictures folder at the same time.

20
00:01:08,520 --> 00:01:14,700
Well it's clear the screen the way we do that is we just say less than documents bit of cheeky tab order

21
00:01:14,700 --> 00:01:20,490
completion downloads bit of cheeky Tabata completion and some pictures with a bit of cheeky tabel to

22
00:01:20,490 --> 00:01:26,490
completion and then if we go ahead right now you'll see that we can actually see the contents of each

23
00:01:26,490 --> 00:01:27,770
directory listed.

24
00:01:27,960 --> 00:01:29,830
So far so good.

25
00:01:30,000 --> 00:01:35,520
But you can see how manual of a process this was right where to type out documents then type out downloads

26
00:01:35,550 --> 00:01:40,860
and then type at pictures even with even with tabel to completion in order to pass them as common arguments

27
00:01:41,040 --> 00:01:42,760
to the ls command.

28
00:01:42,830 --> 00:01:48,290
Now wildcards are basically special symbols that the shell interprets to have a special meaning.

29
00:01:48,330 --> 00:01:54,060
The idea behind wildcards is to build up powerful patterns known as regular expressions so that instead

30
00:01:54,060 --> 00:01:59,850
of typing out every command line argument manually you can instead say something like hey linux make

31
00:01:59,850 --> 00:02:03,080
this command act on anything that matches this pattern.

32
00:02:03,360 --> 00:02:08,520
The patterns are known as regular expressions and you can think of wildcards as being some of the useful

33
00:02:08,520 --> 00:02:14,580
building blocks for creating regular expressions and using wildcards to build regular expressions gives

34
00:02:14,580 --> 00:02:20,760
you lots of flexibility and control of how your commands work and can save you a whole bunch of typing

35
00:02:21,150 --> 00:02:24,690
and using regular expressions make sure commands a lot more expressive.

36
00:02:24,690 --> 00:02:30,450
So for example instead of expressing the ls command like list out the contents of this folder and this

37
00:02:30,450 --> 00:02:34,650
folder and this folder which is the way that we would usually be using it with comma non-arguments right

38
00:02:34,650 --> 00:02:42,920
we'd be saying LS Do documents and downloads and pictures downloaders down downloads and pictures.

39
00:02:42,990 --> 00:02:43,450
OK.

40
00:02:43,590 --> 00:02:44,420
That's how it works.

41
00:02:44,420 --> 00:02:45,970
You've got to list them manually.

42
00:02:46,200 --> 00:02:52,400
Instead you could just do something like hey wouldn't use list out the contents of every file starts

43
00:02:52,410 --> 00:02:53,490
with the letter D.

44
00:02:53,760 --> 00:02:58,800
For example if you're removing files instead of saying remove this file and this fall and this fall

45
00:02:58,980 --> 00:03:04,050
you can say remove every file in this folder as long as its name ends in Datti XTi for example.

46
00:03:04,050 --> 00:03:08,520
Or if you're copying files instead of saying copy this file this far in this file you can say copy every

47
00:03:08,520 --> 00:03:14,850
file from this folder and to this other folder as long as its name ends with Dot PTF case.

48
00:03:14,860 --> 00:03:20,100
So now that we understand that we're using wild cards to build these patterns these regular expressions.

49
00:03:20,260 --> 00:03:23,440
Let's start building some regular expressions using wildcards.

50
00:03:23,520 --> 00:03:28,210
And then one of the most used wildcards is the asterisk or the star wildcard.

51
00:03:28,360 --> 00:03:33,330
Now I find the star by pressing shift and eight on my keyboard the first shift in eight.

52
00:03:33,370 --> 00:03:40,420
I get the star come up if you ever use Microsoft accelerate you know a software spreadsheet package.

53
00:03:40,420 --> 00:03:43,230
It's the symbol you use to do multiplication.

54
00:03:43,320 --> 00:03:48,810
But I find that using shift and 8 on my keyboard it might be different on yours but it's that simple

55
00:03:48,850 --> 00:03:51,270
we're looking for now wildcards.

56
00:03:51,310 --> 00:03:59,320
Each match a specific pattern and the asterisk or the star wildcard matches any piece of text regardless

57
00:03:59,320 --> 00:04:02,340
of the length of that text and it also matches numbers.

58
00:04:02,620 --> 00:04:07,550
So let's say that we wanted to check the contents of every directory in the home folder.

59
00:04:07,550 --> 00:04:08,420
Let me clear the screen.

60
00:04:08,500 --> 00:04:14,110
If I play the screen instead of listing them all out OK because it's quite a few folds in here right

61
00:04:14,120 --> 00:04:19,980
instead of saying OK LS desktop and documents and downloads and so on and so on.

62
00:04:20,230 --> 00:04:24,150
All we have to do is just do ls star.

63
00:04:24,790 --> 00:04:31,540
OK so if I press it if I do that you can see that it is just listed out all of the contents of the home

64
00:04:31,540 --> 00:04:42,180
folder the desktop documents downloads music pictures public templates and videos all in one go.

65
00:04:42,220 --> 00:04:43,330
So we clear the screen.

66
00:04:43,620 --> 00:04:44,860
OK.

67
00:04:44,950 --> 00:04:45,770
So how did that happen.

68
00:04:45,790 --> 00:04:50,820
The reason that happened is because the store matches anything.

69
00:04:50,860 --> 00:04:56,480
OK so you will you need to think of is when you give a command a regular expression to work with.

70
00:04:56,590 --> 00:04:59,290
Imagine it putting as command line arguments.

71
00:04:59,290 --> 00:05:01,640
Anything that matches that pattern.

72
00:05:02,050 --> 00:05:02,530
OK.

73
00:05:02,740 --> 00:05:12,370
So because the star wildcard matches anything it puts everything as command line arguments to the LS

74
00:05:12,370 --> 00:05:13,070
command.

75
00:05:13,210 --> 00:05:13,850
That makes sense.

76
00:05:13,930 --> 00:05:14,930
Let's take another example.

77
00:05:14,980 --> 00:05:19,530
OK so let's say I just wanted to list the contents of the folders starting with D.

78
00:05:19,690 --> 00:05:22,150
So the desktop downloads and documents folders.

79
00:05:22,150 --> 00:05:22,620
OK.

80
00:05:22,870 --> 00:05:29,500
What I can do is I could say OK let's do less than a capital D and then a star.

81
00:05:29,560 --> 00:05:32,360
Now the pattern is this bit.

82
00:05:32,420 --> 00:05:35,270
OK the pattern is the D them the star.

83
00:05:35,470 --> 00:05:36,030
OK.

84
00:05:36,310 --> 00:05:39,010
And the star is one of the building blocks with the letter D.

85
00:05:39,010 --> 00:05:46,840
So what we're saying here is listo then giving it as a command argument anything that has a D a capital

86
00:05:46,840 --> 00:05:49,180
D and then followed by anything.

87
00:05:49,180 --> 00:05:51,930
So basically anything that starts with a capital D.

88
00:05:51,950 --> 00:05:58,250
So if I do the you can see that we just see the desktop documents and downloads and you can see that

89
00:05:58,250 --> 00:06:03,920
they all match this pattern this D-Star they start with a capital D and then if followed by anything

90
00:06:04,130 --> 00:06:06,950
they start with a capital D and then are followed by anything.

91
00:06:07,010 --> 00:06:09,180
What if we just want documents and downloads.

92
00:06:09,200 --> 00:06:12,680
Well they start with d'eau and then followed by anything right.

93
00:06:12,800 --> 00:06:18,760
So if I do ls D O then anything you can see we just get documents and downloads.

94
00:06:18,890 --> 00:06:21,580
But desktop is ignored.

95
00:06:21,830 --> 00:06:27,800
Now something that is important to remember here is that these wild cards and these regular expressions

96
00:06:27,860 --> 00:06:29,590
are case sensitive.

97
00:06:29,630 --> 00:06:35,810
So if we did LS D and then astonied does have the DS lowercase you can see that we get nothing nothing

98
00:06:35,810 --> 00:06:37,920
comes back because nothing starts with the lowercase D.

99
00:06:37,940 --> 00:06:40,790
But if we do capital B.

100
00:06:40,790 --> 00:06:43,190
Now that will work OK.

101
00:06:43,190 --> 00:06:44,180
So that's really awesome.

102
00:06:44,180 --> 00:06:49,490
Let me just clear the screen you've seen a few ways that the star wild card can be used to match any

103
00:06:49,490 --> 00:06:53,540
text and you've seen some ways that it can be used to build regular expressions.

104
00:06:53,540 --> 00:06:57,680
Now there are a few other common wild cards that you'll likely use when working with regular expressions

105
00:06:57,680 --> 00:06:58,500
and wild cards.

106
00:06:58,640 --> 00:07:01,150
And the first is the question mark wildcard.

107
00:07:01,220 --> 00:07:05,480
Now the star wildcard will match anything regardless of length.

108
00:07:05,480 --> 00:07:12,410
So for example if I do something like Stardock T-Rex t that could match anything as long as it ends

109
00:07:12,470 --> 00:07:19,890
in Dot XTi t because if I do ls start up to 60 you'll see that we only see things that end in dot T.

110
00:07:19,910 --> 00:07:21,270
X take.

111
00:07:21,320 --> 00:07:27,950
Now it doesn't matter if what at the beginning of the of the comes before that takes t is 1 let alone

112
00:07:28,130 --> 00:07:32,180
1 number long or you know a hundred letters long always full of numbers or whatever it doesn't matter

113
00:07:32,180 --> 00:07:38,960
if it's a thousand characters long and it'll still match because the star matches anything.

114
00:07:38,960 --> 00:07:44,200
But the question mark wildcard will only match one place.

115
00:07:44,220 --> 00:07:44,810
So if I do.

116
00:07:44,810 --> 00:07:45,840
Question mark.

117
00:07:45,870 --> 00:07:47,060
Dr. XTi.

118
00:07:47,170 --> 00:07:51,220
OK if I do ls now nothing will actually show up.

119
00:07:51,310 --> 00:07:51,780
OK.

120
00:07:51,860 --> 00:07:53,350
Because the question is this.

121
00:07:53,430 --> 00:07:56,720
This says basically what this says is.

122
00:07:57,440 --> 00:08:01,750
So anything that ends in Dot takes t but only has one thing before it.

123
00:08:01,930 --> 00:08:02,320
OK.

124
00:08:02,480 --> 00:08:10,670
So this would match things like a dot t XTi or cued up to 60 or Elda T-Rex T or 1.60.

125
00:08:10,680 --> 00:08:15,040
OK you notice how they've all just got one place just before the Datti XTi.

126
00:08:15,200 --> 00:08:15,690
OK.

127
00:08:15,800 --> 00:08:21,770
The question mark is a way of saying it's like a placeholder for just that place where's the star.

128
00:08:21,770 --> 00:08:23,680
It doesn't matter how long it is.

129
00:08:23,990 --> 00:08:28,850
So the question mark wild card allows you to maintain the generality of the star wildcard because it

130
00:08:28,850 --> 00:08:32,720
doesn't matter what it matches it can match a number or it can match a letter.

131
00:08:33,000 --> 00:08:35,830
But it allows you to limit the length.

132
00:08:35,870 --> 00:08:39,510
OK the star doesn't put a limit on length.

133
00:08:39,860 --> 00:08:40,820
Where's the question mark.

134
00:08:40,820 --> 00:08:43,770
Does but it doesn't really matter what fills that place.

135
00:08:43,850 --> 00:08:44,320
OK.

136
00:08:44,420 --> 00:08:49,910
Now you usually use the question mark wildcard when you want to build a general pattern but care about

137
00:08:49,910 --> 00:08:51,240
the length of the filename.

138
00:08:51,320 --> 00:08:59,880
OK so if we did something like question mark question mark PTF then that would match things like a 1

139
00:08:59,930 --> 00:09:08,200
dot PDA or B2 or PTF or aid or PTF or you know Zed seven dot PTF or something like 7:7 dot pedia.

140
00:09:08,210 --> 00:09:14,720
You see how we're just taking up two spaces and then not PTF that's what question clock question mark

141
00:09:14,780 --> 00:09:15,810
or PTF would do.

142
00:09:15,860 --> 00:09:18,220
OK we're saying we're going to fill it with two things.

143
00:09:18,320 --> 00:09:22,670
Two spaces we're not sure it's going to go there but there's got to be two spaces two places.

144
00:09:22,850 --> 00:09:24,100
And then PTF.

145
00:09:24,210 --> 00:09:24,530
OK.

146
00:09:24,560 --> 00:09:25,530
So that's how that works.

147
00:09:25,530 --> 00:09:27,310
That's the question mark now.

148
00:09:27,350 --> 00:09:32,230
Another type of wild card is called is the square brackets which are these ones here.

149
00:09:32,230 --> 00:09:33,400
The square brackets here.

150
00:09:33,500 --> 00:09:34,610
OK.

151
00:09:35,180 --> 00:09:40,430
And the square brackets wildcard is similar to the question mark in that it will only match one place.

152
00:09:40,520 --> 00:09:46,850
But instead of matching anything like the question mark will square brackets allow only allow the pattern

153
00:09:46,850 --> 00:09:52,760
to be there to be more specific and only match the letters or numbers if they belong to a given set

154
00:09:52,760 --> 00:09:53,290
of options.

155
00:09:53,300 --> 00:09:55,410
Probably easier for me to show than to explain.

156
00:09:55,460 --> 00:09:55,860
OK.

157
00:09:55,970 --> 00:10:04,820
So say we had six files we had for a text we had file B directx t we had falce Dotty x t and we are

158
00:10:04,820 --> 00:10:09,520
followed 1.60 for 2.6 T and for 3.6 D.

159
00:10:09,720 --> 00:10:12,120
OK which intent.

160
00:10:12,320 --> 00:10:17,120
If I do unless we actually already have those in a in our home directory.

161
00:10:17,160 --> 00:10:17,570
OK.

162
00:10:17,840 --> 00:10:21,610
So let's say we wanted to match the files that just had numbers in the filename.

163
00:10:21,720 --> 00:10:25,870
So for 1.60 for 2.2 XTi and for 3.6.

164
00:10:25,880 --> 00:10:34,640
But we don't want the ones that have Abian say OK to do this we could do less than file because the

165
00:10:34,640 --> 00:10:38,620
name's got to start with file then open the square brackets and give it a bunch of options.

166
00:10:38,630 --> 00:10:44,590
We could say 1 2 3 4 5 6 7 8 9 0 dot text.

167
00:10:44,930 --> 00:10:46,090
Ok so what's this.

168
00:10:46,160 --> 00:10:50,870
Basically everything in these square brackets is an option that could fill that one place.

169
00:10:50,900 --> 00:11:01,350
So anything goes file and then either 1 2 3 4 5 6 7 8 9 0 0 any one of those then Dotti XTi case if

170
00:11:01,350 --> 00:11:08,310
we do that you see that we get 4 1 4 2 and 4 3 but we don't get the A B and C because they're not part

171
00:11:08,370 --> 00:11:09,290
of the options.

172
00:11:09,330 --> 00:11:09,820
Right.

173
00:11:10,020 --> 00:11:15,070
From a given set of files that just matches for one Faltu and for all three.

174
00:11:15,350 --> 00:11:21,150
But I don't want you to know is how this wouldn't be possible using either the star wildcard or the

175
00:11:21,150 --> 00:11:23,560
question mark wildcard if we do.

176
00:11:23,580 --> 00:11:29,250
LS final question mark t the question mark will match anything.

177
00:11:29,310 --> 00:11:31,080
AK but only one place.

178
00:11:31,160 --> 00:11:34,070
If we do the star you're going to get though.

179
00:11:34,290 --> 00:11:39,210
I need to LSN you're going to get basically the same thing as well because these don't restrict what

180
00:11:39,210 --> 00:11:40,710
goes in that place.

181
00:11:40,770 --> 00:11:43,280
The stock will have anything regardless of length.

182
00:11:43,290 --> 00:11:47,700
The question mark will need just one place but it doesn't care what fills it.

183
00:11:47,760 --> 00:11:53,860
The square brackets also only have one place but they allow you to restrict what goes there.

184
00:11:53,850 --> 00:11:59,730
So they're like the most restrictive it's like a very restrictive kind of kind of Wockhardt.

185
00:11:59,730 --> 00:12:05,850
Now you may have noticed that typing out all these numbers 0 1 2 3 4 5 6 7 8 9 is a bit of a hassle

186
00:12:05,850 --> 00:12:06,310
right.

187
00:12:06,450 --> 00:12:08,310
So the Schum makes it a bit easier for us.

188
00:12:08,310 --> 00:12:13,710
We've got a shortcut we can do for 0 to 9 and that gives us exactly the same thing.

189
00:12:13,710 --> 00:12:16,110
So instead of having to type out all the numbers it's it's much easier.

190
00:12:16,170 --> 00:12:22,290
Which is really useful for when you want to work with the alphabet and you can go ahead and that will

191
00:12:22,290 --> 00:12:23,960
work perfectly OK.

192
00:12:24,330 --> 00:12:27,440
What if you want to notched two digits.

193
00:12:27,450 --> 00:12:30,070
OK so what if you wanted something like file 11.

194
00:12:30,150 --> 00:12:30,720
OK.

195
00:12:31,020 --> 00:12:32,360
How would I do that.

196
00:12:32,850 --> 00:12:39,480
Well the way you do that is you'd say LS file then for the first digit 0 tonight then just give it another

197
00:12:39,480 --> 00:12:42,520
one zero to nine then Datti XTi.

198
00:12:42,730 --> 00:12:43,160
OK.

199
00:12:43,290 --> 00:12:45,860
So this one becomes the first digit.

200
00:12:45,870 --> 00:12:47,680
This one becomes the second digit.

201
00:12:47,820 --> 00:12:50,930
What if I wanted to have a number and then a letter.

202
00:12:51,020 --> 00:12:51,700
Well that's easy.

203
00:12:51,720 --> 00:12:54,290
Just change that to letters.

204
00:12:54,600 --> 00:12:57,790
What if I wanted to have a number then a letter then a lowercase letter.

205
00:12:57,840 --> 00:13:00,550
Well that simple change that like that.

206
00:13:00,580 --> 00:13:02,540
And you can see the in file.

207
00:13:03,030 --> 00:13:09,360
Then one space which can have the number zero to nine then another space which can have the number of

208
00:13:09,360 --> 00:13:14,400
the letters 8 is adding uppercase then another space which can have the letters eight As'ad in lowercase

209
00:13:14,640 --> 00:13:17,020
and then ends in Dotti X take.

210
00:13:17,430 --> 00:13:24,060
So you can see just how powerful these regular expressions can become just by adding a few simple wildcards.

211
00:13:24,060 --> 00:13:31,200
We could also what if we wanted to have the numbers 0 to 9 but also the letters A B and C you can do

212
00:13:31,200 --> 00:13:31,720
that as well.

213
00:13:31,740 --> 00:13:32,370
Just like that.

214
00:13:32,370 --> 00:13:36,230
And that's going to show up in Shope exactly what you'd expect.

215
00:13:36,240 --> 00:13:38,180
Anything that has the word file.

216
00:13:38,310 --> 00:13:43,900
Then one of the numbers from 0 to 9 or the letters A B and C and uppercase then not text me.

217
00:13:43,950 --> 00:13:50,490
If I reduce that to lowercase ABC they will just get 4 one two and three because these wildcards and

218
00:13:50,490 --> 00:13:52,380
these organizations are case sensitive.

219
00:13:52,470 --> 00:13:55,120
So you can see wild cause of really really powerful stuff guys.

220
00:13:55,140 --> 00:13:59,560
And the the only three that you really need to know are the star which matches anything.

221
00:13:59,640 --> 00:14:04,110
The question mark which matches anything but only from one place and the square brackets which allow

222
00:14:04,110 --> 00:14:05,960
you to match just one place.

223
00:14:05,970 --> 00:14:09,900
But they also like to define what matches.

224
00:14:10,120 --> 00:14:12,690
OK so that's enough wild card goodness for now.

225
00:14:12,690 --> 00:14:17,720
Wild Cards can make your commands a lot more expressive and give you much greater control over how the

226
00:14:17,720 --> 00:14:23,960
commands work and using wildcards in this way to search for filenames actually has a fucking funny name.

227
00:14:24,180 --> 00:14:25,620
And it's called globbing.

228
00:14:25,670 --> 00:14:30,730
So if you ever hear the word globbing floating around it just means using wildcards to look for file

229
00:14:30,730 --> 00:14:35,450
names just like we've done in this video so before closing out just take a quick recap of what we've

230
00:14:35,450 --> 00:14:36,140
learned.

231
00:14:36,170 --> 00:14:41,600
First you learn about the concept of regular expressions and regular expressions are basically patterns

232
00:14:41,600 --> 00:14:43,840
that a piece of text needs to match.

233
00:14:43,940 --> 00:14:44,420
OK.

234
00:14:44,630 --> 00:14:50,870
And anything that matches that pattern will be passed as a command line argument to the command.

235
00:14:50,870 --> 00:14:54,860
Now the star wildcard matches anything regardless of length.

236
00:14:54,950 --> 00:15:00,500
The question mark matches anything but just for one place and the square brackets match just one place

237
00:15:00,740 --> 00:15:05,050
but allow you to specify options that you know will actually be matched.

238
00:15:05,050 --> 00:15:09,800
So unlike the start in the questionmark which will match anything the square brackets alays you choose

239
00:15:09,890 --> 00:15:10,720
what will be match.

240
00:15:10,730 --> 00:15:15,120
And of course you can just type letters and numbers in that you want specifically to appear as well.

241
00:15:15,140 --> 00:15:20,990
So if I did capital D then start that means anything that starts with a D and then has anything afterwards.

242
00:15:21,020 --> 00:15:22,640
You can type letters and numbers in there as well.

243
00:15:22,640 --> 00:15:26,230
You don't just have to only use the star questionmark and square brackets.

244
00:15:26,360 --> 00:15:32,270
OK so with wildcards understood you have a very solid foundation for learning about the different ways

245
00:15:32,270 --> 00:15:34,350
to manipulate files in the file system.

246
00:15:34,380 --> 00:15:39,120
Major the commands to create delete move copy and paste files and so on.

247
00:15:39,170 --> 00:15:43,100
It's actually rather simple and when you learn them you might wonder what's the point of actually learning

248
00:15:43,100 --> 00:15:45,320
how to use them instead of just pointing and clicking.

249
00:15:45,650 --> 00:15:51,080
But by knowing how to use these commands along with wildcards you'll be able to manipulate hundreds

250
00:15:51,080 --> 00:15:55,940
of files at once and with complete control to the point the pointing and clicking will soon seem like

251
00:15:55,940 --> 00:15:58,370
a very slow and sluggish way of doing things.

252
00:15:58,370 --> 00:15:59,480
Believe me.

253
00:15:59,480 --> 00:16:03,470
So up next you can have a quick quiz to help you cement your understanding of wildcards because you

254
00:16:03,470 --> 00:16:04,830
know practice makes perfect.

255
00:16:04,910 --> 00:16:09,800
And then the next video you're going to lead had to create files and directories using some new commands

256
00:16:10,040 --> 00:16:14,750
and you're also going to combine those commands with wildcards to make them even more powerful.

257
00:16:14,750 --> 00:16:19,310
You'll even learn about something called brace expansion which will see which will show you how you

258
00:16:19,310 --> 00:16:24,730
can create 3 folders with 100 files in each of them using just one or two commands.

259
00:16:24,740 --> 00:16:25,580
Don't believe me.

260
00:16:25,760 --> 00:16:28,040
Well I guess I'll see you in the next video.
