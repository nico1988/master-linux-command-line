1
00:00:00,150 --> 00:00:01,650
Hello you beautiful people.

2
00:00:01,710 --> 00:00:07,170
Probably one of the most confusing things for new users of a new Linux operating system is understanding

3
00:00:07,170 --> 00:00:09,070
how to get new software.

4
00:00:09,240 --> 00:00:13,680
Now all other operating systems like Windows or Mac everytime that you want to install a piece of software

5
00:00:13,740 --> 00:00:18,700
you probably just use to downloading an executable file opening it hitting next next next next next

6
00:00:18,720 --> 00:00:19,590
a load of times.

7
00:00:19,590 --> 00:00:24,000
Avoid re avoiding reading terms and conditions but agreeing anyway and celebrating internally when your

8
00:00:24,000 --> 00:00:27,480
new software is installed in Linux it works a bit of a different way.

9
00:00:27,480 --> 00:00:31,740
I mean you still celebrate internally when the software is installed but you tend to install it in a

10
00:00:31,740 --> 00:00:35,590
way that is much more integrated standardized secure and scalable.

11
00:00:35,610 --> 00:00:40,290
That is possible with the other operating systems but to get those benefits from using a package manager

12
00:00:40,350 --> 00:00:45,210
will first need to let go of our preconceptions from Windows and Mac and actually get a solid understanding

13
00:00:45,240 --> 00:00:49,200
of what is going on in Linux package management because it's not the same at all.

14
00:00:49,200 --> 00:00:50,570
But it is a lot better.

15
00:00:50,610 --> 00:00:55,650
So in this video you're going to learn about how to search for packages using apt but building off our

16
00:00:55,650 --> 00:00:57,700
existing knowledge of the software repositories.

17
00:00:57,900 --> 00:01:01,770
And we're going to show you how you can search the software repositories using the apt package manager

18
00:01:02,130 --> 00:01:07,170
and you also get to learn about how the package manager uses caching to speed up performance and ensure

19
00:01:07,170 --> 00:01:09,640
that you have a fast installation experience.

20
00:01:09,660 --> 00:01:14,430
So by the end of this video you're going to be able to know how to search the software repositories

21
00:01:14,430 --> 00:01:18,370
for new packages and that's going to give you the fundamental understanding that you'll need in order

22
00:01:18,420 --> 00:01:19,310
to install them.

23
00:01:19,320 --> 00:01:21,300
So let's go ahead and get right into it.

24
00:01:22,330 --> 00:01:26,820
OK so as of now we understand that there are a bunch of packages that exist and that we'll be using

25
00:01:26,820 --> 00:01:30,560
a package manager called apt to download and install them.

26
00:01:30,580 --> 00:01:31,910
So far so good.

27
00:01:32,170 --> 00:01:35,600
So let's start off by getting the apt program to search for packages.

28
00:01:35,670 --> 00:01:40,150
And let's say that we want to search for packages that will help us when working with Microsoft Word

29
00:01:40,150 --> 00:01:41,040
files.

30
00:01:41,040 --> 00:01:46,660
The Microsoft Word files have conventionally had the extension dot doc X so it's fun all the packages

31
00:01:46,660 --> 00:01:49,010
that are relevant to the text doc x.

32
00:01:49,200 --> 00:01:51,190
So to do that we would type the command.

33
00:01:51,190 --> 00:01:54,440
Apt dash cache.

34
00:01:54,520 --> 00:01:57,750
OK search doc x.

35
00:01:57,870 --> 00:02:04,320
OK well we did that we see that we get a few results back with one package per line when we see the

36
00:02:04,330 --> 00:02:07,780
for each package we get the name of the package on the left.

37
00:02:08,110 --> 00:02:11,280
So you can see we've got one here called Doc ext to TXI.

38
00:02:11,440 --> 00:02:16,750
We've got one here called libber patchy and so on and then on the right we get a short description about

39
00:02:16,810 --> 00:02:23,770
that package so this will turn Microsoft Excel files to plain text and this one is a general markup

40
00:02:23,770 --> 00:02:24,500
converter.

41
00:02:24,630 --> 00:02:31,110
OK and it's the Libres for that general markup converter so you can see at a glance what what is available.

42
00:02:31,120 --> 00:02:35,200
For example if we wanted to search for things to do with text we could always use grep and search for

43
00:02:35,200 --> 00:02:40,840
the word text and we would get just a few results there so you can also narrow this down using grep.

44
00:02:40,930 --> 00:02:47,800
OK so it appears here that we may be interested in Rizwan here called Doc x t x take.

45
00:02:48,070 --> 00:02:54,430
OK so how would we get a bit more information about what we could do if we claim a script is Doo's is

46
00:02:54,430 --> 00:02:59,670
use apt cache show Doc x x t.

47
00:02:59,800 --> 00:03:07,060
So instead of upcast search and then a keyword we're going to use apt cache show and then the package

48
00:03:07,060 --> 00:03:12,090
name and when we enter that can see that we get a whole bunch of information about that package.

49
00:03:12,100 --> 00:03:16,660
This is exactly the kind of information that's good to pipe through the last command to make it a bit

50
00:03:16,660 --> 00:03:17,620
easier to deal with.

51
00:03:17,620 --> 00:03:21,220
There we go so we can see the package name is Doc ex-city XTi.

52
00:03:21,370 --> 00:03:26,970
It's available for all architectures gives you the version number and it also tells you where it's from

53
00:03:26,980 --> 00:03:33,400
so it's from the universe repository and the text section that tells you the maintainer's with the contact

54
00:03:33,400 --> 00:03:38,670
information tells you where to report any bugs and it tells you loads with the stuff.

55
00:03:38,740 --> 00:03:44,840
Down here is also a description and it says it converts of XML files to plain text.

56
00:03:44,870 --> 00:03:49,330
It gives you more information doc doctor Dr. T is a tool that attempts to generate equivalent ASCII

57
00:03:49,330 --> 00:03:51,850
text files for Mochis of docs documents.

58
00:03:52,020 --> 00:03:53,880
And you can read that if you wish.

59
00:03:53,920 --> 00:04:01,740
OK I see you can see by using apt cash so we can see plenty of information about the Doc X TXI package.

60
00:04:01,840 --> 00:04:04,320
So that's a really useful ability there.

61
00:04:04,330 --> 00:04:05,460
Now let me show you something.

62
00:04:05,650 --> 00:04:07,990
So we've done all that with access to the Internet right.

63
00:04:07,990 --> 00:04:13,600
So if I click up here you can see that I've got a connected internet connection when I'm trying to disconnect

64
00:04:13,600 --> 00:04:17,940
my virtual machine from the internet and try that again so I'm going to turn off my connection and I

65
00:04:17,940 --> 00:04:23,470
can see now I've got no internet connection whatsoever if I open Firefox and will probably see it tell

66
00:04:23,470 --> 00:04:24,850
us that there's no internet connection.

67
00:04:24,850 --> 00:04:32,710
If I go to somewhere like I don't know that say YouTube dot com it determined that the server is not

68
00:04:32,710 --> 00:04:34,440
found because there's no internet connection.

69
00:04:34,510 --> 00:04:38,210
OK so with that let's try and do it again.

70
00:04:38,320 --> 00:04:46,470
OK let's search for the term Web server because if I do apt cache search I don't want the term Web server

71
00:04:47,170 --> 00:04:49,720
because there's because those two words in here.

72
00:04:49,720 --> 00:04:56,680
I'm going to enclose them in quotes here so they go as one search term rather than two separate search

73
00:04:56,680 --> 00:04:57,250
terms.

74
00:04:57,250 --> 00:05:03,100
If I didn't have quotes and a web server it is if I search for web on its own and then server on its

75
00:05:03,100 --> 00:05:03,270
own.

76
00:05:03,280 --> 00:05:05,860
But I want to search for web server together.

77
00:05:05,860 --> 00:05:10,540
Like I said apt cache search and we get actually a whole bunch of results.

78
00:05:10,540 --> 00:05:15,080
Let me clear the screen and pipe through last to make it a bit easier to handle.

79
00:05:16,190 --> 00:05:18,640
But actually wait a second isn't that quite strange.

80
00:05:18,640 --> 00:05:24,570
How was apt able to search for all these packages without having any Internet connection.

81
00:05:24,880 --> 00:05:25,440
Mm hmm.

82
00:05:25,580 --> 00:05:31,910
And there appears to be a package here called Apache 2 that gives us the very popular Apache web server.

83
00:05:31,910 --> 00:05:32,560
OK.

84
00:05:32,740 --> 00:05:35,020
So let's try and get more information about that.

85
00:05:35,060 --> 00:05:42,230
OK so it's called Apache to the stewe apt cache show Apache 2 and piped up through Les just to make

86
00:05:42,230 --> 00:05:43,700
it easier to read.

87
00:05:43,700 --> 00:05:49,070
And yeah we managed to get information about about how strange to even get detailed information about

88
00:05:49,070 --> 00:05:50,800
the package.

89
00:05:51,170 --> 00:05:54,140
So how is that possible if we don't have an internet connection.

90
00:05:54,470 --> 00:05:58,430
Well if information is not stored on the Internet and it's not being downloaded from the Internet then

91
00:05:58,430 --> 00:06:02,290
it must be stored somewhere on this computer and it is.

92
00:06:02,330 --> 00:06:05,900
So this information is stored in something called a cache.

93
00:06:05,900 --> 00:06:06,960
Now what's a cache.

94
00:06:07,190 --> 00:06:11,270
Well having come across you may have come across the word cache when browsing web sites and you know

95
00:06:11,270 --> 00:06:12,890
when you browse it gets a bit slow.

96
00:06:12,950 --> 00:06:16,990
So you decided to clear out your browsers cache to speed of performance.

97
00:06:17,060 --> 00:06:22,130
But what is a cache exactly what a cache is a kind of storage place for information that's supposed

98
00:06:22,130 --> 00:06:24,640
to be efficient and easy to access.

99
00:06:24,680 --> 00:06:27,190
To explain this let me tell you a little story.

100
00:06:27,260 --> 00:06:33,590
So let's say that you wanted to keep looking at a certain web site that it was called the VW or awesome

101
00:06:33,590 --> 00:06:35,740
site dot com.

102
00:06:35,870 --> 00:06:36,460
OK.

103
00:06:36,500 --> 00:06:41,190
Now without a cache every time that you wanted to visit awesome site dot com your computer would send

104
00:06:41,190 --> 00:06:44,100
the requests all the way across the Internet.

105
00:06:44,300 --> 00:06:48,740
So a computer knows a web server that holds all the files for WDW.

106
00:06:48,810 --> 00:06:54,470
Awesome site dot com and this web server could potentially be across the other side of the world and

107
00:06:54,470 --> 00:06:57,310
sending messages back and forth can take some time.

108
00:06:57,410 --> 00:07:01,370
But to say that you visit awesome site dot com and your computer sends the message all the way to the

109
00:07:01,370 --> 00:07:06,060
web so that there happens to be on the other side of the world after its long journey.

110
00:07:06,100 --> 00:07:12,030
Your request arrives and it waits patiently in line behind all of the other requests that have arrive

111
00:07:12,050 --> 00:07:13,150
there first.

112
00:07:13,170 --> 00:07:17,240
So after dealing with all the other requests that have come before you in the queue the observer will

113
00:07:17,240 --> 00:07:18,650
ask How can I help.

114
00:07:18,650 --> 00:07:22,630
And your request would say Can you give me a copy of your home page please.

115
00:07:22,710 --> 00:07:23,760
And the web server would reply.

116
00:07:23,820 --> 00:07:24,210
Sure.

117
00:07:24,260 --> 00:07:25,240
Let me find it for you.

118
00:07:25,250 --> 00:07:28,720
It's such as around for a little while and then goes on you go and transmits.

119
00:07:28,730 --> 00:07:34,070
Bit by bit a copy of that file all the way back to your computer over the Internet across the entire

120
00:07:34,070 --> 00:07:34,830
world.

121
00:07:35,160 --> 00:07:38,360
Now you can imagine the whole process might take a bit of time wouldn't it.

122
00:07:38,360 --> 00:07:41,910
And with that a cache the next time that you want access to the reader would up.

123
00:07:41,960 --> 00:07:45,550
Awesome site dot com the same thing happens all over again.

124
00:07:45,560 --> 00:07:47,360
Your quest to see the side of the world.

125
00:07:47,450 --> 00:07:51,110
Wait in line and the file is sent bit by bit all the way back across the world.

126
00:07:51,240 --> 00:07:54,750
And this happens again and again and again.

127
00:07:54,830 --> 00:08:00,800
Now imagine that it's not just you but thousands or even millions of people all at the same time requesting

128
00:08:01,130 --> 00:08:01,880
awesome sight.

129
00:08:01,890 --> 00:08:04,370
Dot com I mean it is awesome after all.

130
00:08:04,470 --> 00:08:09,290
And if everyone in the world has to do the same process over and over and over again you can imagine

131
00:08:09,290 --> 00:08:11,870
that the web server might start to become a bit overburdened.

132
00:08:11,960 --> 00:08:13,160
The queues get really long.

133
00:08:13,160 --> 00:08:17,870
There's a backup on the data highway and your Web experience just slows way down.

134
00:08:17,930 --> 00:08:21,380
So to fix this problem that's where a crash comes and that's what crashes come in.

135
00:08:21,420 --> 00:08:21,920
OK.

136
00:08:21,920 --> 00:08:27,040
So instead of being the only one copy of the file stored on the web server instead.

137
00:08:27,170 --> 00:08:29,730
The very first time your request comes back your.

138
00:08:29,810 --> 00:08:33,650
It will keep a copy on the local computer in what's called a cache.

139
00:08:33,730 --> 00:08:39,140
The cache is nothing more than a place to store files locally so that you get performance benefits later.

140
00:08:39,180 --> 00:08:43,730
The second time that you want to visit or visit or some site dot com your computer doesn't need to shoot

141
00:08:43,730 --> 00:08:45,410
messages all over the Internet.

142
00:08:45,500 --> 00:08:49,130
It realizes the awesome site dot coms files are already in your cash.

143
00:08:49,120 --> 00:08:54,080
And then it just looks in the cache on your computer locally and loads the page which is much much faster.

144
00:08:54,110 --> 00:08:58,390
Now the only issue is that the cache must be kept up to date with what's on the actual web server.

145
00:08:58,550 --> 00:09:02,450
Otherwise you keep viewing an outdated copy of the files.

146
00:09:02,480 --> 00:09:04,860
So that's what a cache is now that we in the want to caches.

147
00:09:04,910 --> 00:09:08,850
We now understand the reason why the command is called apt cache.

148
00:09:08,860 --> 00:09:09,390
OK.

149
00:09:09,410 --> 00:09:15,620
And when we run at cache search what we're doing is we're telling the apt package manager to look inside

150
00:09:15,620 --> 00:09:19,180
the cache for any packages matching the text that you give it.

151
00:09:19,310 --> 00:09:27,590
So if we did apt cache search text it's looking inside its cache or packages that match the word text.

152
00:09:27,590 --> 00:09:36,410
And if we run apt cache show Apache to it's going to look for the Apache to package in its cache and

153
00:09:36,410 --> 00:09:39,110
bring up all the information that it's got about it.

154
00:09:39,110 --> 00:09:40,850
So where is this cache then.

155
00:09:41,000 --> 00:09:47,380
Well on a buntu the cache is located at slash var slash apt slash lists.

156
00:09:47,390 --> 00:09:50,070
So if we C.D into their let's go ahead and take a look.

157
00:09:50,180 --> 00:09:50,760
OK.

158
00:09:51,010 --> 00:09:58,670
Such var slash opt slash sorry slash var slash lib slash Opt. slash lists.

159
00:09:58,700 --> 00:10:00,710
OK so now we're in there.

160
00:10:00,710 --> 00:10:04,330
If we take a look we can see there's a whole bunch of different Listen here let me just list them out

161
00:10:04,340 --> 00:10:05,350
into the last comment.

162
00:10:05,630 --> 00:10:12,870
And we can see that we've got a whole bunch of files in here that are actually just lists of packages.

163
00:10:13,010 --> 00:10:17,760
Now these are the lists of all the packages available from repositories that have enabled on my system

164
00:10:17,860 --> 00:10:24,120
and the lists also cover specific type of packages then let me clear the screen and let me just maximize

165
00:10:24,120 --> 00:10:26,410
it as well and lists again.

166
00:10:26,410 --> 00:10:30,810
But piping it through the last command with the capital an option and this allows us to have some line

167
00:10:30,810 --> 00:10:34,110
numberings which will be make it a bit easier to explain what I'm talking about.

168
00:10:34,110 --> 00:10:39,120
So here we are we've now got each of the lines with some line numberings they can see that are so many

169
00:10:39,120 --> 00:10:40,610
different lists in this folder.

170
00:10:40,670 --> 00:10:42,010
OK.

171
00:10:43,020 --> 00:10:48,210
Each with a specific each containing less of a specific type of package depending upon where it came

172
00:10:48,210 --> 00:10:51,470
from and what type of computer architecture it for.

173
00:10:51,480 --> 00:10:56,370
Now a lot of mine start with the G-B dot archive dot to dot com.

174
00:10:56,370 --> 00:10:56,900
OK.

175
00:10:56,970 --> 00:11:04,360
Now that's because my nearest open to archive server will be in the UK because I'm based from the UK.

176
00:11:04,390 --> 00:11:08,640
McCain MGB is for Great Britain and because I'm in the UK that's where it sends its requests because

177
00:11:08,640 --> 00:11:12,930
it's a bit more efficient to send your requests to a server that's closer to you but yours might be

178
00:11:12,930 --> 00:11:14,850
different depending upon where you are in the world.

179
00:11:14,850 --> 00:11:20,940
OK so if you're in the U.S. it might say something like US DOT archived or buntu dot com and so on.

180
00:11:20,940 --> 00:11:26,270
So don't worry about not having G-B that everything else should be more or less the same though now

181
00:11:26,270 --> 00:11:28,820
on line 3.

182
00:11:29,080 --> 00:11:36,390
There's a list of available artful for packages so for the OR for code name version of a buntu you can

183
00:11:36,390 --> 00:11:41,850
see that we've got the binary packages or the precompiled packages that are for the AM the 64 computer

184
00:11:41,850 --> 00:11:44,530
architecture from the main repository.

185
00:11:44,530 --> 00:11:44,960
OK.

186
00:11:45,150 --> 00:11:51,420
And if we take a look on line 15 we can see that we've got again for the artful version we've got the

187
00:11:51,420 --> 00:11:59,730
binary pre-compiled packages for the HMD 64 Kopitar architectures a 64 bit architecture from the restricted

188
00:11:59,730 --> 00:12:02,920
repository and you can see here we've got some from multi-verse and so on.

189
00:12:02,960 --> 00:12:08,680
OK so the lists are broken up very specifically by where they came from and what they're for.

190
00:12:08,780 --> 00:12:09,250
OK.

191
00:12:09,360 --> 00:12:13,410
Now these are not the packages that are installed on my computer but they are the packages that are

192
00:12:13,410 --> 00:12:17,260
available in the software repositories that I've chosen to access these.

193
00:12:17,310 --> 00:12:22,350
I don't like these lists of packages that I have installed but their list of packages that I could install

194
00:12:22,490 --> 00:12:23,780
for the software repositories.

195
00:12:23,880 --> 00:12:24,340
OK.

196
00:12:24,510 --> 00:12:28,950
So let's take a take a quick look at one of these files that are injured.

197
00:12:29,010 --> 00:12:29,540
OK.

198
00:12:29,550 --> 00:12:34,680
So let's say that we want to edit the entry for the GCC package that we downloaded a couple of videos

199
00:12:34,680 --> 00:12:35,240
ago.

200
00:12:35,580 --> 00:12:40,950
Well we know that it's going to be in the main repository because it's open source and there is free

201
00:12:40,950 --> 00:12:43,580
software but it's not maintained by the community.

202
00:12:43,590 --> 00:12:50,250
So we know that gcc should be the main repository of this pre-compiled and it's therefore a binary package.

203
00:12:50,250 --> 00:12:54,450
OK we didn't have to download GCC and then compile it we just installed it straight away in the last

204
00:12:54,450 --> 00:12:56,310
few videos which means that pre-compiled.

205
00:12:56,550 --> 00:13:05,400
So if we look for the list that we see that's for artful main directory main repository with a preconfigured

206
00:13:05,420 --> 00:13:07,620
pre-configured 64 bit binary.

207
00:13:07,670 --> 00:13:16,860
Let's have a look for that regardful and we see from main our main binary HMD 64 so it should be in

208
00:13:16,860 --> 00:13:17,740
this list.

209
00:13:17,970 --> 00:13:23,000
So if I just copied out OK and I could this and I open up with Nonno.

210
00:13:23,050 --> 00:13:27,250
So I do Nano and paste that if I can.

211
00:13:27,420 --> 00:13:27,930
There we go.

212
00:13:28,050 --> 00:13:33,240
So now if I press Enter say that we've opened the list and we've got a whole bunch of different packages

213
00:13:33,480 --> 00:13:38,460
in here and you can see that this is starting to look but the results from apt cache show and that's

214
00:13:38,460 --> 00:13:39,720
exactly what happens.

215
00:13:39,900 --> 00:13:46,090
That cache will search through the files and print out the information regarding that package.

216
00:13:46,200 --> 00:13:52,690
So now that way in this fall what do we just go ahead and search for the package called GCC.

217
00:13:52,710 --> 00:13:57,300
So the way we can find that easy instead of just searching for gcc you can notice that the actual package

218
00:13:57,310 --> 00:14:02,450
bit starts with the word package then a colon then a space then the actual package names.

219
00:14:02,460 --> 00:14:03,870
Let's try and do that for gcc.

220
00:14:03,870 --> 00:14:07,270
So we're going to package code space.

221
00:14:07,400 --> 00:14:12,990
Gcc if I press enter will say we've ended up at the GCC package and you can see that we get all the

222
00:14:12,990 --> 00:14:17,020
information about the GCC package that we installed a few minutes ago.

223
00:14:17,080 --> 00:14:18,600
OK in the last video so.

224
00:14:18,650 --> 00:14:19,170
OK.

225
00:14:19,200 --> 00:14:20,080
And it comes up.

226
00:14:20,190 --> 00:14:29,210
So let's change the priority from saying optional here to saying optional but awesome.

227
00:14:29,480 --> 00:14:36,210
OK so if I if I save that right that far opposite same permission denied because this is a special file

228
00:14:36,210 --> 00:14:37,850
going to open it with sudo.

229
00:14:37,950 --> 00:14:44,550
OK so it's open it with sudo nano where you can do that and just press the barricade and type sudo at

230
00:14:44,550 --> 00:14:52,570
the beginning and enter your password then we're going to search for package package code on gcc that

231
00:14:52,590 --> 00:14:54,700
we are now instead of having it say optional.

232
00:14:54,760 --> 00:15:02,730
I would say optional but also with the exclamation mark of course save the file and exit.

233
00:15:02,850 --> 00:15:03,390
OK.

234
00:15:03,390 --> 00:15:05,560
Now if we just close the terminal open it up again.

235
00:15:05,670 --> 00:15:05,910
OK.

236
00:15:05,920 --> 00:15:13,290
Now if we do opt cache show GCC and maximize the term a little bit piped up through less

237
00:15:16,060 --> 00:15:21,130
we can see here that it's pulled the information for GCC and the priority is optional but awesome which

238
00:15:21,130 --> 00:15:22,030
is fantastic.

239
00:15:22,100 --> 00:15:23,790
How cool is that.

240
00:15:23,830 --> 00:15:29,470
So you can see here that what's actually happening is you've got a cache I guess I'll place a folder

241
00:15:29,530 --> 00:15:34,270
on your computer that stores lists that your package manager can search through regardless of whether

242
00:15:34,270 --> 00:15:37,560
you've got internet connection or not and that is located at.

243
00:15:37,780 --> 00:15:44,170
Slash var slash lib slap slash slash lists.

244
00:15:44,250 --> 00:15:44,640
OK.

245
00:15:44,740 --> 00:15:49,000
So if we go that a massive difficulty to say if you look in there you've got all these different lists

246
00:15:49,330 --> 00:15:51,560
each for specific purposes.

247
00:15:51,580 --> 00:15:51,920
OK.

248
00:15:51,940 --> 00:15:57,310
And because we wanted to look for the GCC package we used a little bit of our understanding of repositories

249
00:15:57,310 --> 00:16:03,550
to and the GCC package would be located in the main repository because it's it's probably it's maintained

250
00:16:03,550 --> 00:16:10,510
by Canonical because it's so old you see you've got the it's pre-compiled is ready to go so it's going

251
00:16:10,510 --> 00:16:14,790
to be binary and we aren't HMD 64 can be practical.

252
00:16:14,950 --> 00:16:16,450
So that's the list that we're looking at.

253
00:16:16,450 --> 00:16:20,890
So we kind of took this this file here this file name which is very long but it's a file name than the

254
00:16:20,890 --> 00:16:21,580
last.

255
00:16:21,790 --> 00:16:30,400
And we took a look at it with natto and we opened it up and we are open to enter my password.

256
00:16:30,400 --> 00:16:37,510
So we open it up and we saw that this is where when you try to show more information about a package

257
00:16:37,510 --> 00:16:39,420
the package manager gets his information.

258
00:16:39,520 --> 00:16:44,840
And we looked for the GCC package OK and we found out that this is where it is.

259
00:16:45,070 --> 00:16:49,960
And then we edited some of that information to demonstrate that this is exactly where the information

260
00:16:49,960 --> 00:16:50,890
is coming from.

261
00:16:50,890 --> 00:16:59,510
So if we now look at apt cache show GCC we can see that now that information is no longer optional.

262
00:16:59,510 --> 00:17:01,040
Awesome but it's just optional.

263
00:17:01,040 --> 00:17:06,390
Like I said you can see a bit behind the scenes how your package manager is working.

264
00:17:06,430 --> 00:17:10,870
So now we understand that for performance benefits app it saves a cache of all available.

265
00:17:10,930 --> 00:17:17,960
Two packages on your local system in the slash var slash lib slash Opt. slash lists directory.

266
00:17:18,070 --> 00:17:18,770
OK.

267
00:17:18,910 --> 00:17:21,470
And that's called the apt cache.

268
00:17:21,520 --> 00:17:24,190
OK that folder is called the apt cache.

269
00:17:24,280 --> 00:17:30,640
And by searching the apt cache using apt cache search and there's a search term Aptos search all of

270
00:17:30,640 --> 00:17:37,720
the lists in those in that cache in a folder for any package names that have something to do with that

271
00:17:37,720 --> 00:17:42,700
search term so we will search the package name and the package description in all of those lists and

272
00:17:42,700 --> 00:17:47,680
return to the package names with a little snippet a little description of each package so that you can

273
00:17:47,680 --> 00:17:49,030
look for more information if you want.

274
00:17:49,090 --> 00:17:53,680
And you would look for more information using apt cache show and then the package name that app cache

275
00:17:53,680 --> 00:17:55,240
search would give you back.

276
00:17:55,270 --> 00:18:01,270
This will show you detailed information about the package OK things anything from the size of a description

277
00:18:01,270 --> 00:18:05,230
to what it does who the maintainers are where to report bugs and everything that you could possibly

278
00:18:05,230 --> 00:18:06,770
know about that package.

279
00:18:06,970 --> 00:18:13,690
Now all of this is done using lists that are installed in the cache so lists are downloaded to the slots

280
00:18:13,690 --> 00:18:21,820
of our slash lib slash and slash lists folder and all of those files in there are just lists of packages

281
00:18:21,820 --> 00:18:24,070
and they all have basically the same format.

282
00:18:24,220 --> 00:18:30,720
But that's where everything is saved and it just uses the lists in that folder to produce all this functionality.

283
00:18:30,730 --> 00:18:35,580
But this makes us wonder how did the lists actually get into the cache in the first place.

284
00:18:35,710 --> 00:18:38,030
And just like any cash it must be kept up to date.

285
00:18:38,120 --> 00:18:40,450
Otherwise new packages could be released and you wouldn't know.

286
00:18:40,450 --> 00:18:42,290
So how do we keep the catch up today.

287
00:18:42,610 --> 00:18:43,410
Well you're in luck.

288
00:18:43,540 --> 00:18:46,950
These questions and many more will be answered in the next video.
