1
00:00:00,150 --> 00:00:01,650
你好，你们这些漂亮的人。
Hello you beautiful people.

2
00:00:01,710 --> 00:00:07,170
对于新的Linux操作系统的新用户来说，最令人困惑的事情之一可能是理解
Probably one of the most confusing things for new users of a new Linux operating system is understanding

3
00:00:07,170 --> 00:00:09,070
如何获取新软件。
how to get new software.

4
00:00:09,240 --> 00:00:13,680
现在所有其他操作系统，如Windows或Mac，每次您想要安装一款软件时
Now all other operating systems like Windows or Mac everytime that you want to install a piece of software

5
00:00:13,740 --> 00:00:18,700
您可能只是习惯于下载一个可执行文件，打开它，然后点击下一步
you probably just use to downloading an executable file opening it hitting next next next next next

6
00:00:18,720 --> 00:00:19,590
很多次。
a load of times.

7
00:00:19,590 --> 00:00:24,000
避免重新阅读条款和条件，但无论如何都要同意，并在内部庆祝当您的
Avoid re avoiding reading terms and conditions but agreeing anyway and celebrating internally when your

8
00:00:24,000 --> 00:00:27,480
Linux中安装了新软件，它的工作方式有点不同。
new software is installed in Linux it works a bit of a different way.

9
00:00:27,480 --> 00:00:31,740
我的意思是，当安装软件时，您仍然在内部庆祝，但您倾向于将其安装在
I mean you still celebrate internally when the software is installed but you tend to install it in a

10
00:00:31,740 --> 00:00:35,590
这种方式更具集成性、标准化、安全性和可扩展性。
way that is much more integrated standardized secure and scalable.

11
00:00:35,610 --> 00:00:40,290
这在其他操作系统上也是可能的，但是可以从使用包管理器中获得这些好处
That is possible with the other operating systems but to get those benefits from using a package manager

12
00:00:40,350 --> 00:00:45,210
我首先需要摆脱我们对Windows和Mac的先入为主的观念，并真正对此有一个扎实的理解
will first need to let go of our preconceptions from Windows and Mac and actually get a solid understanding

13
00:00:45,240 --> 00:00:49,200
Linux包管理中正在发生的事情，因为它完全不同。
of what is going on in Linux package management because it's not the same at all.

14
00:00:49,200 --> 00:00:50,570
但是它好多了。
But it is a lot better.

15
00:00:50,610 --> 00:00:55,650
因此，在这段视频中，您将了解如何使用APT搜索软件包，但要在我们的
So in this video you're going to learn about how to search for packages using apt but building off our

16
00:00:55,650 --> 00:00:57,700
现有的软件存储库知识。
existing knowledge of the software repositories.

17
00:00:57,900 --> 00:01:01,770
我们将向您展示如何使用APT包管理器搜索软件存储库
And we're going to show you how you can search the software repositories using the apt package manager

18
00:01:02,130 --> 00:01:07,170
您还将了解包管理器如何使用缓存来提高性能并确保
and you also get to learn about how the package manager uses caching to speed up performance and ensure

19
00:01:07,170 --> 00:01:09,640
您拥有快速安装体验。
that you have a fast installation experience.

20
00:01:09,660 --> 00:01:14,430
因此，在本视频结束时，您将能够了解如何搜索软件存储库
So by the end of this video you're going to be able to know how to search the software repositories

21
00:01:14,430 --> 00:01:18,370
对于新的套餐，这将使您对排序所需的基本知识有一个基本的了解
for new packages and that's going to give you the fundamental understanding that you'll need in order

22
00:01:18,420 --> 00:01:19,310
来安装它们。
to install them.

23
00:01:19,320 --> 00:01:21,300
所以，让我们继续直截了当地谈吧。
So let's go ahead and get right into it.

24
00:01:22,330 --> 00:01:26,820
好的，到目前为止，我们了解到有一大堆包存在，并且我们将使用
OK so as of now we understand that there are a bunch of packages that exist and that we'll be using

25
00:01:26,820 --> 00:01:30,560
一个名为APT的包管理器下载并安装它们。
a package manager called apt to download and install them.

26
00:01:30,580 --> 00:01:31,910
到目前一切尚好。
So far so good.

27
00:01:32,170 --> 00:01:35,600
因此，让我们从让apt程序搜索包开始。
So let's start off by getting the apt program to search for packages.

28
00:01:35,670 --> 00:01:40,150
假设我们想要搜索在使用Microsoft Word时可以帮助我们的软件包
And let's say that we want to search for packages that will help us when working with Microsoft Word

29
00:01:40,150 --> 00:01:41,040
文件。
files.

30
00:01:41,040 --> 00:01:46,660
Microsoft Word文件通常都有扩展名.doc X，所以所有的包都很有趣
The Microsoft Word files have conventionally had the extension dot doc X so it's fun all the packages

31
00:01:46,660 --> 00:01:49,010
其与文本DOCX相关。
that are relevant to the text doc x.

32
00:01:49,200 --> 00:01:51,190
因此，要做到这一点，我们需要键入命令。
So to do that we would type the command.

33
00:01:51,190 --> 00:01:54,440
APT DASH缓存。
Apt dash cache.

34
00:01:54,520 --> 00:01:57,750
好的，搜索文档x。
OK search doc x.

35
00:01:57,870 --> 00:02:04,320
好的，我们这样做了，我们看到每行只有一个包返回了一些结果，当我们看到
OK well we did that we see that we get a few results back with one package per line when we see the

36
00:02:04,330 --> 00:02:07,780
对于每个包，我们在左边得到包的名称。
for each package we get the name of the package on the left.

37
00:02:08,110 --> 00:02:11,280
所以你可以看到我们这里有一个叫Doc ext to TXI的。
So you can see we've got one here called Doc ext to TXI.

38
00:02:11,440 --> 00:02:16,750
我们这里有一个叫libber patchy的，等等，然后在右边我们得到一个简短的描述
We've got one here called libber patchy and so on and then on the right we get a short description about

39
00:02:16,810 --> 00:02:23,770
这个包可以将Microsoft Excel文件转换为纯文本，这是一个通用标记
that package so this will turn Microsoft Excel files to plain text and this one is a general markup

40
00:02:23,770 --> 00:02:24,500
转换器。
converter.

41
00:02:24,630 --> 00:02:31,110
好的，这是通用标记转换器的libres，所以您可以一目了然地看到可用的内容。
OK and it's the Libres for that general markup converter so you can see at a glance what what is available.

42
00:02:31,120 --> 00:02:35,200
例如，如果我们想要搜索要对文本执行的操作，我们总是可以使用grep并搜索
For example if we wanted to search for things to do with text we could always use grep and search for

43
00:02:35,200 --> 00:02:40,840
单词text，我们在那里只会得到几个结果，所以您也可以使用grep来缩小范围。
the word text and we would get just a few results there so you can also narrow this down using grep.

44
00:02:40,930 --> 00:02:47,800
好的，看起来我们可能对里兹旺感兴趣，这里叫做DOC x T，Take。
OK so it appears here that we may be interested in Rizwan here called Doc x t x take.

45
00:02:48,070 --> 00:02:54,430
好的，那么如果我们声称一个脚本是Doo的，那么我们如何才能获得更多关于我们可以做什么的信息呢
OK so how would we get a bit more information about what we could do if we claim a script is Doo's is

46
00:02:54,430 --> 00:02:59,670
使用APT缓存显示文档x x t。
use apt cache show Doc x x t.

47
00:02:59,800 --> 00:03:07,060
因此，我们将使用apt cache show，然后是包，而不是向上转换搜索，然后是关键字
So instead of upcast search and then a keyword we're going to use apt cache show and then the package

48
00:03:07,060 --> 00:03:12,090
名字，当我们输入它时，可以看到我们获得了关于该包的一大堆信息。
name and when we enter that can see that we get a whole bunch of information about that package.

49
00:03:12,100 --> 00:03:16,660
这正是通过管道传递最后一个命令以使其稍微
This is exactly the kind of information that's good to pipe through the last command to make it a bit

50
00:03:16,660 --> 00:03:17,620
更容易处理。
easier to deal with.

51
00:03:17,620 --> 00:03:21,220
这样我们就可以看到包名为Doc ex-City xti。
There we go so we can see the package name is Doc ex-city XTi.

52
00:03:21,370 --> 00:03:26,970
它对所有架构都可用，它会告诉您版本号，还会告诉您它来自哪里
It's available for all architectures gives you the version number and it also tells you where it's from

53
00:03:26,980 --> 00:03:33,400
所以它来自语义库和文本部分，它告诉您维护人员与联系人
so it's from the universe repository and the text section that tells you the maintainer's with the contact

54
00:03:33,400 --> 00:03:38,670
信息告诉您在哪里报告任何错误，并且它会告诉您加载了大量的内容。
information tells you where to report any bugs and it tells you loads with the stuff.

55
00:03:38,740 --> 00:03:44,840
下面还有一个描述，它说它将XML文件转换为纯文本。
Down here is also a description and it says it converts of XML files to plain text.

56
00:03:44,870 --> 00:03:49,330
它为您提供了更多信息Doctor Dr.T是一种尝试生成等效ASCII的工具
It gives you more information doc doctor Dr. T is a tool that attempts to generate equivalent ASCII

57
00:03:49,330 --> 00:03:51,850
文档文档的mochi文本文件。
text files for Mochis of docs documents.

58
00:03:52,020 --> 00:03:53,880
如果你愿意，你可以读这本书。
And you can read that if you wish.

59
00:03:53,920 --> 00:04:01,740
好的，我明白了，您可以通过使用APT现金来查看，这样我们就可以看到关于Doc X TXI包的大量信息。
OK I see you can see by using apt cash so we can see plenty of information about the Doc X TXI package.

60
00:04:01,840 --> 00:04:04,320
所以这是一个非常有用的能力。
So that's a really useful ability there.

61
00:04:04,330 --> 00:04:05,460
现在让我给你看点东西。
Now let me show you something.

62
00:04:05,650 --> 00:04:07,990
因此，我们已经通过访问互联网的权利完成了所有这些工作。
So we've done all that with access to the Internet right.

63
00:04:07,990 --> 00:04:13,600
因此，如果我单击此处，您可以看到，当我尝试断开连接时，我已连接到互联网
So if I click up here you can see that I've got a connected internet connection when I'm trying to disconnect

64
00:04:13,600 --> 00:04:17,940
我的虚拟机从互联网上，然后再试一次，所以我要关闭我的连接，然后我
my virtual machine from the internet and try that again so I'm going to turn off my connection and I

65
00:04:17,940 --> 00:04:23,470
我现在可以看到，如果我打开Firefox，我没有任何互联网连接，可能会看到它显示
can see now I've got no internet connection whatsoever if I open Firefox and will probably see it tell

66
00:04:23,470 --> 00:04:24,850
我们知道这里没有互联网连接。
us that there's no internet connection.

67
00:04:24,850 --> 00:04:32,710
如果我去一个我不知道的地方，比如说YouTube.com，它确定服务器不是
If I go to somewhere like I don't know that say YouTube dot com it determined that the server is not

68
00:04:32,710 --> 00:04:34,440
找到是因为没有互联网连接。
found because there's no internet connection.

69
00:04:34,510 --> 00:04:38,210
好的，现在让我们再试一次。
OK so with that let's try and do it again.

70
00:04:38,320 --> 00:04:46,470
好的，让我们搜索术语Web服务器，因为如果我执行apt cache搜索，我不需要术语Web服务器
OK let's search for the term Web server because if I do apt cache search I don't want the term Web server

71
00:04:47,170 --> 00:04:49,720
因为这里有这两个词。
because there's because those two words in here.

72
00:04:49,720 --> 00:04:56,680
我将在这里用引号将它们引起来，这样它们就可以作为一个搜索词，而不是两个单独的搜索
I'm going to enclose them in quotes here so they go as one search term rather than two separate search

73
00:04:56,680 --> 00:04:57,250
条款。
terms.

74
00:04:57,250 --> 00:05:03,100
如果我没有报价和Web服务器，如果我自己搜索Web，然后在它的服务器上搜索，就会有
If I didn't have quotes and a web server it is if I search for web on its own and then server on its

75
00:05:03,100 --> 00:05:03,270
属于自己的。
own.

76
00:05:03,280 --> 00:05:05,860
但是我想一起搜索网络服务器。
But I want to search for web server together.

77
00:05:05,860 --> 00:05:10,540
就像我说的，APT缓存搜索，我们实际上得到了一大堆结果。
Like I said apt cache search and we get actually a whole bunch of results.

78
00:05:10,540 --> 00:05:15,080
让我清理一下屏幕，然后用管道穿过最后一个，这样就更容易处理了。
Let me clear the screen and pipe through last to make it a bit easier to handle.

79
00:05:16,190 --> 00:05:18,640
但实际上等一下并不是很奇怪。
But actually wait a second isn't that quite strange.

80
00:05:18,640 --> 00:05:24,570
APT如何能够在没有任何互联网连接的情况下搜索所有这些包。
How was apt able to search for all these packages without having any Internet connection.

81
00:05:24,880 --> 00:05:25,440
嗯，嗯。
Mm hmm.

82
00:05:25,580 --> 00:05:31,910
这里似乎有一个叫做Apache2的软件包，它为我们提供了非常流行的Apache Web服务器。
And there appears to be a package here called Apache 2 that gives us the very popular Apache web server.

83
00:05:31,910 --> 00:05:32,560
好的。
OK.

84
00:05:32,740 --> 00:05:35,020
所以让我们试着了解更多关于这方面的信息。
So let's try and get more information about that.

85
00:05:35,060 --> 00:05:42,230
好的，它被称为Apache to the stewe apt cache，显示Apache2，然后通过LES传输，仅仅是为了
OK so it's called Apache to the stewe apt cache show Apache 2 and piped up through Les just to make

86
00:05:42,230 --> 00:05:43,700
它更容易阅读。
it easier to read.

87
00:05:43,700 --> 00:05:49,070
是的，我们设法得到了一些信息，即使是在我们得到详细信息的情况下，我们也会发现这是多么奇怪的事情。
And yeah we managed to get information about about how strange to even get detailed information about

88
00:05:49,070 --> 00:05:50,800
包裹。
the package.

89
00:05:51,170 --> 00:05:54,140
那么，如果我们没有互联网连接，这怎么可能呢？
So how is that possible if we don't have an internet connection.

90
00:05:54,470 --> 00:05:58,430
嗯，如果信息没有存储在互联网上，也没有从互联网上下载，那么
Well if information is not stored on the Internet and it's not being downloaded from the Internet then

91
00:05:58,430 --> 00:06:02,290
它一定存储在这台计算机上的某个地方，而且确实是这样。
it must be stored somewhere on this computer and it is.

92
00:06:02,330 --> 00:06:05,900
因此，这些信息存储在称为缓存的东西中。
So this information is stored in something called a cache.

93
00:06:05,900 --> 00:06:06,960
现在什么是藏品。
Now what's a cache.

94
00:06:07,190 --> 00:06:11,270
嗯，在浏览网站时，您可能遇到过单词缓存，您知道
Well having come across you may have come across the word cache when browsing web sites and you know

95
00:06:11,270 --> 00:06:12,890
当你浏览的时候，它会变得有点慢。
when you browse it gets a bit slow.

96
00:06:12,950 --> 00:06:16,990
因此，您决定清空浏览器缓存以提高性能。
So you decided to clear out your browsers cache to speed of performance.

97
00:06:17,060 --> 00:06:22,130
但是高速缓存到底是什么呢？高速缓存是一种存储信息的地方
But what is a cache exactly what a cache is a kind of storage place for information that's supposed

98
00:06:22,130 --> 00:06:24,640
要高效且易于访问。
to be efficient and easy to access.

99
00:06:24,680 --> 00:06:27,190
为了解释这一点，让我给你们讲一个小故事。
To explain this let me tell you a little story.

100
00:06:27,260 --> 00:06:33,590
假设您想继续查看某个网站，该网站名为“大众”(VW)或“棒极了”(AWOWE)
So let's say that you wanted to keep looking at a certain web site that it was called the VW or awesome

101
00:06:33,590 --> 00:06:35,740
网站.com。
site dot com.

102
00:06:35,870 --> 00:06:36,460
好的。
OK.

103
00:06:36,500 --> 00:06:41,190
现在，如果没有高速缓存，每次您想要访问棒极了的站点.com时，您的计算机都会发送
Now without a cache every time that you wanted to visit awesome site dot com your computer would send

104
00:06:41,190 --> 00:06:44,100
所有的请求都传遍了互联网。
the requests all the way across the Internet.

105
00:06:44,300 --> 00:06:48,740
因此，计算机知道保存WDW所有文件的Web服务器。
So a computer knows a web server that holds all the files for WDW.

106
00:06:48,810 --> 00:06:54,470
令人敬畏的网站.com和这个Web服务器可能在世界的另一端，
Awesome site dot com and this web server could potentially be across the other side of the world and

107
00:06:54,470 --> 00:06:57,310
来回发送消息可能需要一些时间。
sending messages back and forth can take some time.

108
00:06:57,410 --> 00:07:01,370
但是假设你访问了AWARE SITE.com，你的计算机就会把信息一直发送到
But to say that you visit awesome site dot com and your computer sends the message all the way to the

109
00:07:01,370 --> 00:07:06,060
网络，所以经过漫长的旅程后，恰好在世界的另一边。
web so that there happens to be on the other side of the world after its long journey.

110
00:07:06,100 --> 00:07:12,030
您的请求到达，它耐心地排在所有已到达的其他请求之后
Your request arrives and it waits patiently in line behind all of the other requests that have arrive

111
00:07:12,050 --> 00:07:13,150
先到那里。
there first.

112
00:07:13,170 --> 00:07:17,240
因此，在处理队列中出现在您之前的所有其他请求之后，观察者将
So after dealing with all the other requests that have come before you in the queue the observer will

113
00:07:17,240 --> 00:07:18,650
问问我能帮什么忙。
ask How can I help.

114
00:07:18,650 --> 00:07:22,630
你的要求会说，你能给我一份你的主页吗？
And your request would say Can you give me a copy of your home page please.

115
00:07:22,710 --> 00:07:23,760
并且网络服务器将回复。
And the web server would reply.

116
00:07:23,820 --> 00:07:24,210
好的。
Sure.

117
00:07:24,260 --> 00:07:25,240
让我帮您找一下。
Let me find it for you.

118
00:07:25,250 --> 00:07:28,720
它就这样转了一会儿，然后继续，你去传送。
It's such as around for a little while and then goes on you go and transmits.

119
00:07:28,730 --> 00:07:34,070
该文件的一位一位的副本一直通过整个Internet返回到您的计算机
Bit by bit a copy of that file all the way back to your computer over the Internet across the entire

120
00:07:34,070 --> 00:07:34,830
世界。
world.

121
00:07:35,160 --> 00:07:38,360
现在你可以想象整个过程可能需要一点时间，不是吗？
Now you can imagine the whole process might take a bit of time wouldn't it.

122
00:07:38,360 --> 00:07:41,910
这样，当您下次想要访问读取器时，缓存就会打开。
And with that a cache the next time that you want access to the reader would up.

123
00:07:41,960 --> 00:07:45,550
可怕的网站.com同样的事情又一次重演。
Awesome site dot com the same thing happens all over again.

124
00:07:45,560 --> 00:07:47,360
你想要看到世界的另一面。
Your quest to see the side of the world.

125
00:07:47,450 --> 00:07:51,110
排队等待，文件就会一点一滴地送回世界各地。
Wait in line and the file is sent bit by bit all the way back across the world.

126
00:07:51,240 --> 00:07:54,750
这种情况一次又一次地发生。
And this happens again and again and again.

127
00:07:54,830 --> 00:08:00,800
现在想象一下，不只是你，还有成千上万甚至数百万的人同时要求
Now imagine that it's not just you but thousands or even millions of people all at the same time requesting

128
00:08:01,130 --> 00:08:01,880
令人惊叹的景象。
awesome sight.

129
00:08:01,890 --> 00:08:04,370
我的意思是，它毕竟很棒。
Dot com I mean it is awesome after all.

130
00:08:04,470 --> 00:08:09,290
如果世界上的每个人都不得不一遍又一遍地做同样的过程，你可以想象
And if everyone in the world has to do the same process over and over and over again you can imagine

131
00:08:09,290 --> 00:08:11,870
Web服务器可能会开始变得有点超负荷。
that the web server might start to become a bit overburdened.

132
00:08:11,960 --> 00:08:13,160
排队的人真的很长。
The queues get really long.

133
00:08:13,160 --> 00:08:17,870
在数据高速公路上有一个备份，您的Web体验只会变慢。
There's a backup on the data highway and your Web experience just slows way down.

134
00:08:17,930 --> 00:08:21,380
所以要解决这个问题，这就是崩溃发生的地方，这就是崩溃发生的地方。
So to fix this problem that's where a crash comes and that's what crashes come in.

135
00:08:21,420 --> 00:08:21,920
好的。
OK.

136
00:08:21,920 --> 00:08:27,040
因此，它不是存储在网络服务器上的文件的唯一副本。
So instead of being the only one copy of the file stored on the web server instead.

137
00:08:27,170 --> 00:08:29,730
当你的请求第一次被退回的时候。
The very first time your request comes back your.

138
00:08:29,810 --> 00:08:33,650
它将在本地计算机上的所谓缓存中保留一份副本。
It will keep a copy on the local computer in what's called a cache.

139
00:08:33,730 --> 00:08:39,140
缓存只不过是在本地存储文件的地方，这样您以后就可以获得性能优势。
The cache is nothing more than a place to store files locally so that you get performance benefits later.

140
00:08:39,180 --> 00:08:43,730
第二次想要访问或访问某个网站时，您的计算机不需要拍摄
The second time that you want to visit or visit or some site dot com your computer doesn't need to shoot

141
00:08:43,730 --> 00:08:45,410
互联网上到处都是信息。
messages all over the Internet.

142
00:08:45,500 --> 00:08:49,130
它意识到令人敬畏的网站网站文件已经在你的现金中了。
It realizes the awesome site dot coms files are already in your cash.

143
00:08:49,120 --> 00:08:54,080
然后它只在本地计算机的缓存中查找，然后加载页面，速度要快得多。
And then it just looks in the cache on your computer locally and loads the page which is much much faster.

144
00:08:54,110 --> 00:08:58,390
现在唯一的问题是缓存必须与实际Web服务器上的内容保持最新。
Now the only issue is that the cache must be kept up to date with what's on the actual web server.

145
00:08:58,550 --> 00:09:02,450
否则，您将继续查看过时的文件副本。
Otherwise you keep viewing an outdated copy of the files.

146
00:09:02,480 --> 00:09:04,860
这就是我们现在想要缓存的缓存。
So that's what a cache is now that we in the want to caches.

147
00:09:04,910 --> 00:09:08,850
现在我们了解了该命令被称为apt cache的原因。
We now understand the reason why the command is called apt cache.

148
00:09:08,860 --> 00:09:09,390
好的。
OK.

149
00:09:09,410 --> 00:09:15,620
当我们在缓存搜索中运行时，我们正在告诉APT包管理器查看内部
And when we run at cache search what we're doing is we're telling the apt package manager to look inside

150
00:09:15,620 --> 00:09:19,180
与您提供的文本匹配的任何包的缓存。
the cache for any packages matching the text that you give it.

151
00:09:19,310 --> 00:09:27,590
因此，如果我们确实缓存了搜索文本，它会在其缓存或与单词text匹配的包中查找。
So if we did apt cache search text it's looking inside its cache or packages that match the word text.

152
00:09:27,590 --> 00:09:36,410
如果我们运行apt cache show apache to，它将在其缓存中查找要打包的Apache
And if we run apt cache show Apache to it's going to look for the Apache to package in its cache and

153
00:09:36,410 --> 00:09:39,110
把它掌握的所有信息都带上来。
bring up all the information that it's got about it.

154
00:09:39,110 --> 00:09:40,850
那么这个缓存在哪里呢。
So where is this cache then.

155
00:09:41,000 --> 00:09:47,380
嗯，在BUNTU上，缓存位于劈开、变量劈开、APT劈开列表中。
Well on a buntu the cache is located at slash var slash apt slash lists.

156
00:09:47,390 --> 00:09:50,070
所以如果我们调查他们，让我们继续看一看。
So if we C.D into their let's go ahead and take a look.

157
00:09:50,180 --> 00:09:50,760
好的。
OK.

158
00:09:51,010 --> 00:09:58,670
这样的变种劈开选择劈开抱歉劈开变种劈开自由选择劈开。劈开榜单。
Such var slash opt slash sorry slash var slash lib slash Opt. slash lists.

159
00:09:58,700 --> 00:10:00,710
好了，现在我们在里面了。
OK so now we're in there.

160
00:10:00,710 --> 00:10:04,330
如果我们看一看，我们可以看到有一大堆不同的东西，听着，让我把它们列举出来
If we take a look we can see there's a whole bunch of different Listen here let me just list them out

161
00:10:04,340 --> 00:10:05,350
最后一条评论。
into the last comment.

162
00:10:05,630 --> 00:10:12,870
我们可以看到，我们这里有一大堆文件，实际上就是软件包的列表。
And we can see that we've got a whole bunch of files in here that are actually just lists of packages.

163
00:10:13,010 --> 00:10:17,760
现在，这些是我的系统上已启用的存储库中所有可用软件包的列表
Now these are the lists of all the packages available from repositories that have enabled on my system

164
00:10:17,860 --> 00:10:24,120
这些列表还包括特定类型的包裹，然后让我清空屏幕，并将其最大化
and the lists also cover specific type of packages then let me clear the screen and let me just maximize

165
00:10:24,120 --> 00:10:26,410
它也一样，并再次列出。
it as well and lists again.

166
00:10:26,410 --> 00:10:30,810
但是用大写通过最后一个命令是一个选项，这允许我们有一些行
But piping it through the last command with the capital an option and this allows us to have some line

167
00:10:30,810 --> 00:10:34,110
编号，这将使它更容易解释我说的是什么。
numberings which will be make it a bit easier to explain what I'm talking about.

168
00:10:34,110 --> 00:10:39,120
所以我们在这里，我们现在已经有了每一行，他们可以看到有很多行号
So here we are we've now got each of the lines with some line numberings they can see that are so many

169
00:10:39,120 --> 00:10:40,610
此文件夹中的不同列表。
different lists in this folder.

170
00:10:40,670 --> 00:10:42,010
好的。
OK.

171
00:10:43,020 --> 00:10:48,210
每个包都有一个特定的包，每个包包含较少的特定类型的包裹，具体取决于它来自哪里
Each with a specific each containing less of a specific type of package depending upon where it came

172
00:10:48,210 --> 00:10:51,470
它来自哪种类型的计算机体系结构以及适用于哪种类型的计算机体系结构。
from and what type of computer architecture it for.

173
00:10:51,480 --> 00:10:56,370
现在我的很多东西都是从G-B点档案点到.com开始的。
Now a lot of mine start with the G-B dot archive dot to dot com.

174
00:10:56,370 --> 00:10:56,900
好的。
OK.

175
00:10:56,970 --> 00:11:04,360
这是因为我最近打开的存档服务器将在英国，因为我来自英国。
Now that's because my nearest open to archive server will be in the UK because I'm based from the UK.

176
00:11:04,390 --> 00:11:08,640
麦凯恩MGB代表大不列颠，因为我在英国，所以它在那里发送请求，因为
McCain MGB is for Great Britain and because I'm in the UK that's where it sends its requests because

177
00:11:08,640 --> 00:11:12,930
将您的请求发送到离您更近的服务器会更有效率，但您的服务器可能
it's a bit more efficient to send your requests to a server that's closer to you but yours might be

178
00:11:12,930 --> 00:11:14,850
不同之处取决于你在世界的什么地方。
different depending upon where you are in the world.

179
00:11:14,850 --> 00:11:20,940
好的，如果你在美国，它可能会说像美国DOT存档或Buntu.com等等。
OK so if you're in the U.S. it might say something like US DOT archived or buntu dot com and so on.

180
00:11:20,940 --> 00:11:26,270
所以不要担心没有G-B，尽管现在其他一切都应该或多或少是一样的
So don't worry about not having G-B that everything else should be more or less the same though now

181
00:11:26,270 --> 00:11:28,820
在3号线。
on line 3.

182
00:11:29,080 --> 00:11:36,390
有一个可用于软件包的技巧列表，因此对于代码名版本的BUNTU的OR，您可以
There's a list of available artful for packages so for the OR for code name version of a buntu you can

183
00:11:36,390 --> 00:11:41,850
请注意，我们已经为AM64计算机准备了二进制包或预编译包
see that we've got the binary packages or the precompiled packages that are for the AM the 64 computer

184
00:11:41,850 --> 00:11:44,530
来自主存储库的体系结构。
architecture from the main repository.

185
00:11:44,530 --> 00:11:44,960
好的。
OK.

186
00:11:45,150 --> 00:11:51,420
如果我们看一下第15行，我们可以看到我们又得到了一个巧妙的版本，我们得到了
And if we take a look on line 15 we can see that we've got again for the artful version we've got the

187
00:11:51,420 --> 00:11:59,730
用于HMD 64 Kopitar体系结构的二进制预编译包从受限的64位体系结构
binary pre-compiled packages for the HMD 64 Kopitar architectures a 64 bit architecture from the restricted

188
00:11:59,730 --> 00:12:02,920
存储库，你可以在这里看到，我们有一些来自多节诗等等的东西。
repository and you can see here we've got some from multi-verse and so on.

189
00:12:02,960 --> 00:12:08,680
好的，这些列表按照它们的来历和用途进行了非常明确的划分。
OK so the lists are broken up very specifically by where they came from and what they're for.

190
00:12:08,780 --> 00:12:09,250
好的。
OK.

191
00:12:09,360 --> 00:12:13,410
这些不是安装在我的计算机上的软件包，而是
Now these are not the packages that are installed on my computer but they are the packages that are

192
00:12:13,410 --> 00:12:17,260
在我选择访问这些的软件存储库中可用。
available in the software repositories that I've chosen to access these.

193
00:12:17,310 --> 00:12:22,350
我不喜欢这些我已经安装的软件包列表，但是我喜欢它们的我可以安装的软件包列表
I don't like these lists of packages that I have installed but their list of packages that I could install

194
00:12:22,490 --> 00:12:23,780
用于软件存储库。
for the software repositories.

195
00:12:23,880 --> 00:12:24,340
好的。
OK.

196
00:12:24,510 --> 00:12:28,950
那么让我们来快速地看一下这些受伤的文件中的一个。
So let's take a take a quick look at one of these files that are injured.

197
00:12:29,010 --> 00:12:29,540
好的。
OK.

198
00:12:29,550 --> 00:12:34,680
假设我们要编辑下载了几个视频的GCC包的条目
So let's say that we want to edit the entry for the GCC package that we downloaded a couple of videos

199
00:12:34,680 --> 00:12:35,240
那是以前的事了。
ago.

200
00:12:35,580 --> 00:12:40,950
我们知道它会出现在主存储库中，因为它是开源的，而且是免费的
Well we know that it's going to be in the main repository because it's open source and there is free

201
00:12:40,950 --> 00:12:43,580
软件，但它不是由社区维护的。
software but it's not maintained by the community.

202
00:12:43,590 --> 00:12:50,250
所以我们知道GCC应该是这个预编译的主存储库，因此它是一个二进制包。
So we know that gcc should be the main repository of this pre-compiled and it's therefore a binary package.

203
00:12:50,250 --> 00:12:54,450
好的，我们不需要下载GCC然后编译，我们在最后一次就直接安装了
OK we didn't have to download GCC and then compile it we just installed it straight away in the last

204
00:12:54,450 --> 00:12:56,310
视频很少，这意味着预编好的。
few videos which means that pre-compiled.

205
00:12:56,550 --> 00:13:05,400
因此，如果我们查找我们看到的列表，该列表是针对带有预配置的Artact主目录主存储库的
So if we look for the list that we see that's for artful main directory main repository with a preconfigured

206
00:13:05,420 --> 00:13:07,620
预配置的64位二进制。
pre-configured 64 bit binary.

207
00:13:07,670 --> 00:13:16,860
让我们来看看这一点，我们从Main中看到我们的主要二进制HMD64，因此它应该在
Let's have a look for that regardful and we see from main our main binary HMD 64 so it should be in

208
00:13:16,860 --> 00:13:17,740
这张单子。
this list.

209
00:13:17,970 --> 00:13:23,000
所以如果我抄下来，好的，我可以这样，然后我用Nonno开场。
So if I just copied out OK and I could this and I open up with Nonno.

210
00:13:23,050 --> 00:13:27,250
所以我做了Nano，如果可以的话，我会把它贴上。
So I do Nano and paste that if I can.

211
00:13:27,420 --> 00:13:27,930
我们走吧。
There we go.

212
00:13:28,050 --> 00:13:33,240
现在，如果我按Enter键，假设我们已经打开了列表，我们得到了一大堆不同的包
So now if I press Enter say that we've opened the list and we've got a whole bunch of different packages

213
00:13:33,480 --> 00:13:38,460
在这里，您可以看到这是开始看起来的，但是来自apt cache的结果显示，这是
in here and you can see that this is starting to look but the results from apt cache show and that's

214
00:13:38,460 --> 00:13:39,720
到底会发生什么。
exactly what happens.

215
00:13:39,900 --> 00:13:46,090
该高速缓存将搜索文件并打印出关于该包的信息。
That cache will search through the files and print out the information regarding that package.

216
00:13:46,200 --> 00:13:52,690
那么，这样的话，在这个秋天，我们就去寻找那个叫GCC的包裹吧。
So now that way in this fall what do we just go ahead and search for the package called GCC.

217
00:13:52,710 --> 00:13:57,300
因此，我们可以很容易地发现，不只是搜索GCC，您可以注意到实际的包裹
So the way we can find that easy instead of just searching for gcc you can notice that the actual package

218
00:13:57,310 --> 00:14:02,450
位以单词Package开头，然后是冒号，然后是空格，然后是实际的包名。
bit starts with the word package then a colon then a space then the actual package names.

219
00:14:02,460 --> 00:14:03,870
让我们试着为GCC这样做。
Let's try and do that for gcc.

220
00:14:03,870 --> 00:14:07,270
所以我们要打包代码空间。
So we're going to package code space.

221
00:14:07,400 --> 00:14:12,990
GCC，如果我按Enter键，就会说我们已经到达了GCC套餐，你可以看到我们得到了所有
Gcc if I press enter will say we've ended up at the GCC package and you can see that we get all the

222
00:14:12,990 --> 00:14:17,020
关于我们几分钟前安装的GCC包的信息。
information about the GCC package that we installed a few minutes ago.

223
00:14:17,080 --> 00:14:18,600
好的，在最后一段视频中。
OK in the last video so.

224
00:14:18,650 --> 00:14:19,170
好的。
OK.

225
00:14:19,200 --> 00:14:20,080
然后它就出现了。
And it comes up.

226
00:14:20,190 --> 00:14:29,210
因此，让我们将优先级从这里的可选更改为可选，但很棒。
So let's change the priority from saying optional here to saying optional but awesome.

227
00:14:29,480 --> 00:14:36,210
好的，如果我保存与此完全相反的权限，相同的权限被拒绝，因为这是一个特殊文件
OK so if I if I save that right that far opposite same permission denied because this is a special file

228
00:14:36,210 --> 00:14:37,850
我要用sudo打开它。
going to open it with sudo.

229
00:14:37,950 --> 00:14:44,550
好的，用sudo Nano打开它，你可以这样做，只需按下路障，然后在以下位置键入sudo
OK so it's open it with sudo nano where you can do that and just press the barricade and type sudo at

230
00:14:44,550 --> 00:14:52,570
开始并输入您的密码，然后我们将在GCC上搜索包裹代码，
the beginning and enter your password then we're going to search for package package code on gcc that

231
00:14:52,590 --> 00:14:54,700
我们现在不是说它是可选的，而是说它是可选的。
we are now instead of having it say optional.

232
00:14:54,760 --> 00:15:02,730
我会说是可选的，当然也要加上感叹号，保存文件并退出。
I would say optional but also with the exclamation mark of course save the file and exit.

233
00:15:02,850 --> 00:15:03,390
好的。
OK.

234
00:15:03,390 --> 00:15:05,560
现在，如果我们只是关闭航站楼，再打开一次。
Now if we just close the terminal open it up again.

235
00:15:05,670 --> 00:15:05,910
好的。
OK.

236
00:15:05,920 --> 00:15:13,290
现在，如果我们选择缓存，显示GCC，并最大化术语，通过更少的内容增加一点
Now if we do opt cache show GCC and maximize the term a little bit piped up through less

237
00:15:16,060 --> 00:15:21,130
我们在这里可以看到，它拉取了GCC的信息，优先级是可选的，但是很棒，
we can see here that it's pulled the information for GCC and the priority is optional but awesome which

238
00:15:21,130 --> 00:15:22,030
太棒了。
is fantastic.

239
00:15:22,100 --> 00:15:23,790
这真是太酷了。
How cool is that.

240
00:15:23,830 --> 00:15:29,470
您可以在这里看到，实际发生的情况是您有一个缓存，我想我会放置一个文件夹
So you can see here that what's actually happening is you've got a cache I guess I'll place a folder

241
00:15:29,530 --> 00:15:34,270
在您的计算机上存储您的包管理器可以搜索的列表，而不管
on your computer that stores lists that your package manager can search through regardless of whether

242
00:15:34,270 --> 00:15:37,560
你有没有网络连接，这是位于。
you've got internet connection or not and that is located at.

243
00:15:37,780 --> 00:15:44,170
劈开变种劈开库扇劈开劈开榜单。
Slash var slash lib slap slash slash lists.

244
00:15:44,250 --> 00:15:44,640
好的。
OK.

245
00:15:44,740 --> 00:15:49,000
所以，如果我们去那里，很难说，如果你看那里，你会得到所有这些不同的列表
So if we go that a massive difficulty to say if you look in there you've got all these different lists

246
00:15:49,330 --> 00:15:51,560
每一个都有特定的目的。
each for specific purposes.

247
00:15:51,580 --> 00:15:51,920
好的。
OK.

248
00:15:51,940 --> 00:15:57,310
因为我们要查找GCC包，所以我们使用了一点对存储库的理解
And because we wanted to look for the GCC package we used a little bit of our understanding of repositories

249
00:15:57,310 --> 00:16:03,550
TO和GCC包将位于主存储库中，因为它很可能是维护的
to and the GCC package would be located in the main repository because it's it's probably it's maintained

250
00:16:03,550 --> 00:16:10,510
经典，因为它太老了，你看，它已经预编好了，可以走了
by Canonical because it's so old you see you've got the it's pre-compiled is ready to go so it's going

251
00:16:10,510 --> 00:16:14,790
作为二进制而我们不是HMD64可能是实用的。
to be binary and we aren't HMD 64 can be practical.

252
00:16:14,950 --> 00:16:16,450
这就是我们要看的名单。
So that's the list that we're looking at.

253
00:16:16,450 --> 00:16:20,890
所以我们把这个文件放在这里，这个文件名很长，但是它是一个文件名，而不是
So we kind of took this this file here this file name which is very long but it's a file name than the

254
00:16:20,890 --> 00:16:21,580
最后的。
last.

255
00:16:21,790 --> 00:16:30,400
我们用纳豆看了一下，我们打开了它，我们可以输入我的密码。
And we took a look at it with natto and we opened it up and we are open to enter my password.

256
00:16:30,400 --> 00:16:37,510
我们打开它，看到这是您尝试显示有关包的更多信息的地方
So we open it up and we saw that this is where when you try to show more information about a package

257
00:16:37,510 --> 00:16:39,420
包管理器获得他的信息。
the package manager gets his information.

258
00:16:39,520 --> 00:16:44,840
我们去找GCC包，好的，我们发现它就在这里。
And we looked for the GCC package OK and we found out that this is where it is.

259
00:16:45,070 --> 00:16:49,960
然后我们编辑了其中的一些信息，以证明这正是信息
And then we edited some of that information to demonstrate that this is exactly where the information

260
00:16:49,960 --> 00:16:50,890
是来自于。
is coming from.

261
00:16:50,890 --> 00:16:59,510
因此，如果我们现在查看apt cache显示的GCC，我们可以看到现在该信息不再是可选的。
So if we now look at apt cache show GCC we can see that now that information is no longer optional.

262
00:16:59,510 --> 00:17:01,040
太棒了，但这只是可选的。
Awesome but it's just optional.

263
00:17:01,040 --> 00:17:06,390
正如我所说的，您可以在幕后看到您的包管理器是如何工作的。
Like I said you can see a bit behind the scenes how your package manager is working.

264
00:17:06,430 --> 00:17:10,870
因此，现在我们了解到，对于性能优势应用程序，它会保存所有可用应用程序的缓存。
So now we understand that for performance benefits app it saves a cache of all available.

265
00:17:10,930 --> 00:17:17,960
您本地系统上的两个包在劈开变量劈开库劈开中选择。劈开列表目录。
Two packages on your local system in the slash var slash lib slash Opt. slash lists directory.

266
00:17:18,070 --> 00:17:18,770
好的。
OK.

267
00:17:18,910 --> 00:17:21,470
这就是所谓的APT缓存。
And that's called the apt cache.

268
00:17:21,520 --> 00:17:24,190
好的，该文件夹称为APT缓存。
OK that folder is called the apt cache.

269
00:17:24,280 --> 00:17:30,640
通过使用APT高速缓存搜索来搜索APT高速缓存，并且有一个搜索词Aptos Search All
And by searching the apt cache using apt cache search and there's a search term Aptos search all of

270
00:17:30,640 --> 00:17:37,720
该缓存中的列表位于文件夹中，用于任何与此相关的软件包名称
the lists in those in that cache in a folder for any package names that have something to do with that

271
00:17:37,720 --> 00:17:42,700
搜索术语，因此我们将在所有这些列表中搜索软件包名称和软件包描述
search term so we will search the package name and the package description in all of those lists and

272
00:17:42,700 --> 00:17:47,680
带一些小片段返回到包名称每个包的一些描述，这样您就可以
return to the package names with a little snippet a little description of each package so that you can

273
00:17:47,680 --> 00:17:49,030
如果需要，请查找更多信息。
look for more information if you want.

274
00:17:49,090 --> 00:17:53,680
您可以使用apt cache show查找更多信息，然后使用应用程序缓存的软件包名称查找更多信息
And you would look for more information using apt cache show and then the package name that app cache

275
00:17:53,680 --> 00:17:55,240
搜索会把你找回来的。
search would give you back.

276
00:17:55,270 --> 00:18:01,270
这将向您显示有关包的详细信息，OK内容，从描述的大小到任何内容都可以
This will show you detailed information about the package OK things anything from the size of a description

277
00:18:01,270 --> 00:18:05,230
关于它做了什么，谁是维护者，在哪里报告错误，以及您可以报告的一切
to what it does who the maintainers are where to report bugs and everything that you could possibly

278
00:18:05,230 --> 00:18:06,770
知道那个包裹的事。
know about that package.

279
00:18:06,970 --> 00:18:13,690
现在，所有这些都是使用安装在缓存中的列表完成的，因此列表将下载到插槽
Now all of this is done using lists that are installed in the cache so lists are downloaded to the slots

280
00:18:13,690 --> 00:18:21,820
在我们的劈开库劈开和劈开列表文件夹中，所有这些文件都只是软件包的列表
of our slash lib slash and slash lists folder and all of those files in there are just lists of packages

281
00:18:21,820 --> 00:18:24,070
它们基本上都有相同的格式。
and they all have basically the same format.

282
00:18:24,220 --> 00:18:30,720
但这是保存所有内容的位置，它只是使用该文件夹中的列表来生成所有这些功能。
But that's where everything is saved and it just uses the lists in that folder to produce all this functionality.

283
00:18:30,730 --> 00:18:35,580
但这让我们想知道这些列表最初是如何进入缓存的。
But this makes us wonder how did the lists actually get into the cache in the first place.

284
00:18:35,710 --> 00:18:38,030
就像任何现金一样，它必须是最新的。
And just like any cash it must be kept up to date.

285
00:18:38,120 --> 00:18:40,450
否则，可能会发布新的软件包，而您不会知道。
Otherwise new packages could be released and you wouldn't know.

286
00:18:40,450 --> 00:18:42,290
那么，我们如何保持今天的追赶。
So how do we keep the catch up today.

287
00:18:42,610 --> 00:18:43,410
那你就走运了。
Well you're in luck.

288
00:18:43,540 --> 00:18:46,950
这些问题和更多问题将在下一个视频中解答。
These questions and many more will be answered in the next video.

