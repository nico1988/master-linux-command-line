1
00:00:00,200 --> 00:00:05,280
你们好，美丽的人们，我非常祝贺你们通过了这一部分
Hello you beautiful people and I'm massive congratulations from me for making it through this section

2
00:00:05,280 --> 00:00:08,860
与您的软件包管理器一起管理软件的课程。
of the course on managing software with your package manager.

3
00:00:08,970 --> 00:00:13,560
我知道这很难，有很多新概念需要你去消化，但你做到了
Now I know it was a tough one with loads of new concepts for you to have to digest but you got there

4
00:00:13,560 --> 00:00:18,000
无论如何，事实上，我们在课程的这一节中涵盖了太多的概念，所以我想选修
anyway and in fact we covered so many concepts in this section of the course that I wanted to take the

5
00:00:18,000 --> 00:00:23,190
现在让我们快速回顾一下我们所报道的内容，并给您一些由衷的、当之无愧的赞扬。
time to have a quick recap of what we covered and to give you some wholehearted and well-deserved praise

6
00:00:23,370 --> 00:00:24,580
走到这一步。
for making it this far.

7
00:00:24,660 --> 00:00:26,700
所以恭喜你，做得很好。
So congratulations and well done.

8
00:00:26,700 --> 00:00:30,600
我不知道互联网上还有其他课程或资源这么多地涉及到这些概念
I don't know of any other course or resource on the Internet that covers these concepts in that much

9
00:00:30,600 --> 00:00:35,520
细节，所以你应该为自己消化它并一路走完而感到非常自豪。
detail so you should be very proud of yourself for digesting it and making it all the way through.

10
00:00:35,550 --> 00:00:37,100
热烈祝贺你。
Massive Congratulations.

11
00:00:37,110 --> 00:00:41,100
因此，让我们快速回顾一下我们在课程的这一部分中所涵盖的内容。
So let's have a quick recap of what we covered in this section of the course.

12
00:00:41,100 --> 00:00:45,580
因此，首先我们开始讨论新项目和总体上的自由软件。
So first we started off by discussing the new project and free software in general.

13
00:00:45,750 --> 00:00:50,910
你，他，你了解了理查德·斯托尔曼(Richard Stallman)在2005年启动的新项目的历史
And you he you learned about the history of the new project that was started by Richard Stallman in

14
00:00:50,910 --> 00:00:52,190
1983年。
1983.

15
00:00:52,290 --> 00:00:57,600
新项目开始的目的是创建一个基于给用户提供操作系统的操作目标
The new project started with the aim of operate of creating an operating system based upon giving users

16
00:00:57,600 --> 00:01:01,220
自由控制软件的使用方式和功能。
freedom to control how the software was used and how it functions.

17
00:01:01,350 --> 00:01:06,000
你学到了自由软件给你的四个自由，你也学到了一个先决条件
And you learned about the four freedoms that free software gives you and you learn that a prerequisite

18
00:01:06,000 --> 00:01:10,660
对这些自由的要求是能够访问软件的源代码。
requirement for those freedoms is to have access to the source code of the software.

19
00:01:10,680 --> 00:01:16,350
现在，因为这个软件是开放访问的，所以这种软件被称为开放源码软件。
Now because this software is openly accessible such software is called open source software.

20
00:01:16,400 --> 00:01:16,830
好的。
OK.

21
00:01:16,920 --> 00:01:21,990
现在，当我们转到一个网站时，然后我们转到网站，下载、修改和编译
Now when we headed over one then we headed over to the Web site and downloaded modified and compiled

22
00:01:22,050 --> 00:01:26,550
我们自己版本的ls命令，所以无论何时，它都会说你好，你们这些漂亮的人
our very own version of the ls command so that it said hello there you beautiful people whenever it

23
00:01:26,550 --> 00:01:26,990
已经跑了。
was run.

24
00:01:27,000 --> 00:01:31,220
在此过程中，您需要使用make命令配置Good News C编译器。
And in that process you so I to configure the goodnews C-compiler using the make command.

25
00:01:31,310 --> 00:01:34,530
因此我不得不编译代码并将其安装到您的系统上。
And so I had to compile code and install it on your system.

26
00:01:34,620 --> 00:01:40,500
但这是一个相当乏味的过程，所以慕尼黑向您介绍了如何使用包管理器
But this was a rather tedious process and so Munich's introduced to you how to how to use package managers

27
00:01:40,560 --> 00:01:45,780
和Buntu的软件存储库，许多发行版都有成千上万的软件
and software repositories of buntu and many of the distributions have thousands and thousands of software

28
00:01:45,780 --> 00:01:50,730
可供您下载、试用和响应这些软件包的软件包存储在四个
packages available for you to download and try out and respond to these packages are stored in four

29
00:01:50,730 --> 00:01:55,620
基于不同自由度和可靠性级别帮助保持软件分离的存储库
repositories that help keep software separated based upon the different freedoms and levels of reliability

30
00:01:55,800 --> 00:01:56,920
它们提供给用户。
they give to the user.

31
00:01:57,090 --> 00:02:02,280
所以主存储库是由Canonical维护的，Canonical是生产Buntu的公司，因此
So the main repository is maintained by canonical which is the company that makes a buntu and therefore

32
00:02:02,280 --> 00:02:09,000
主存储库应该是您的第一个停靠点，宇宙存储库包含自由软件
the main repository should be your first port of call the universe repository contains free software

33
00:02:09,000 --> 00:02:11,130
这是由社区维护的。
that is maintained by the community.

34
00:02:11,130 --> 00:02:17,190
然后你有了受限的存储库，它包含了设备驱动程序的软件，然后你就有了
And then you've got the restricted repository which contains software for device drivers and then you've

35
00:02:17,190 --> 00:02:24,140
获得了MultiVerse存储库，其中包含受法律和版权问题限制的软件。
got the multiverse repository which contains software restricted by legal and copy rights issues.

36
00:02:24,180 --> 00:02:29,490
因此，我们随后前往Package的.buntu.com，浏览可用的软件包
So we then headed over to package's dot buntu dot com and browse through the packages that are available

37
00:02:29,490 --> 00:02:30,460
敬我们。
to us.

38
00:02:30,480 --> 00:02:35,520
我们看到有数以千计的套餐，每个套餐都可以有不同的套餐
We saw that there are thousands and thousands of packages that can be and they can each have different

39
00:02:35,520 --> 00:02:40,680
依赖关系它们可以有不同的建议，它们可以有不同的版本号，因此
dependencies they can have different recommendations they can have different version numbers and so

40
00:02:40,680 --> 00:02:46,010
然后您会意识到，尝试手动组织所有内容绝对是一场噩梦。
on and you realize that this would be an absolute nightmare to try and organize all manually.

41
00:02:46,020 --> 00:02:51,000
这就是您了解Bantus包管理器的好处所在，该管理器将执行所有这些操作
And that's where you learned about the benefit of a Bantus package manager that will do all of that

42
00:02:51,000 --> 00:02:51,820
对我们来说。
for us.

43
00:02:51,940 --> 00:02:57,540
现在，几乎每个Linux发行版都有一个包管理器，但Kubuntu上的包管理器被称为apt
Now pretty much every Linux distribution has a package manager but the one on Kubuntu is called apt

44
00:02:57,660 --> 00:03:00,160
代表高级包装工具。
which stands for Advanced packaging tool.

45
00:03:00,210 --> 00:03:03,160
所以AAPT进行了高级包装谈话。
So AAPT for advance packaging talk.

46
00:03:03,300 --> 00:03:06,230
现在，我们开始了解包管理器是如何工作的。
Now we then started to look at how the package manager works.

47
00:03:06,240 --> 00:03:12,270
我们看到它将那些可用软件包的列表向下放入您系统的缓存中，您可以搜索
We saw that it down those lists of available packages into the cache on your system and you can search

48
00:03:12,270 --> 00:03:17,880
此缓存用于与使用APT缓存搜索的搜索词相关的包，因此有关以下方面的更多信息
this cache for packages relevant to a search term using apt cache search and so more information about

49
00:03:17,880 --> 00:03:20,360
使用APT缓存的给定软件包。
a given package using apt cache.

50
00:03:20,470 --> 00:03:25,080
拥有缓存最重要的一点是确保它始终是最新的，并且您
And the most important thing about having a cache is making sure that it's always up to date and you

51
00:03:25,080 --> 00:03:31,050
了解如何使用sudo apt get update更新缓存，以及有关包管理器的一件令人惊叹的事情
learn how to update the cache using sudo apt get update and one amazing thing about the package manager

52
00:03:31,080 --> 00:03:36,760
是他们能够确保您系统上的所有软件都是一次性完全最新的。
is their ability to make sure that all the software on your system is completely up to date in one go.

53
00:03:36,810 --> 00:03:39,760
现在，要执行此操作，您可以使用sudo apt get Upgrade。
Now to do this you use sudo apt get upgrade.

54
00:03:39,840 --> 00:03:45,150
但是请记住，您应该始终确保缓存中的软件包列表首先是最新的
But remember that you should always make sure that the package lists in your cache up to date first

55
00:03:45,270 --> 00:03:50,290
在将软件包升级到新版本号之前使用sudo apt get update。
using sudo apt get update before upgrading packages to the new version numbers.

56
00:03:50,300 --> 00:03:52,170
使用sudo apt获得升级。
Using sudo apt get upgrade.

57
00:03:52,290 --> 00:03:57,090
但是，为了使软件包保持最新，需要通过软件包进行安装
However in order to be able to keep a package up to date it needs to be installed through the package

58
00:03:57,090 --> 00:03:59,290
管理器，而不是从源代码编译它。
manager and not compile it from source.

59
00:03:59,290 --> 00:04:04,110
因此，萨度牢记这一点，并尽可能从软件存储库中安装软件包
So Sadu bear that in mind and try to install packages from the software repositories wherever possible

60
00:04:04,500 --> 00:04:07,420
这实际上是我们谈到安装的下一个主题。
which is actually the next topic that we came onto installing.

61
00:04:07,560 --> 00:04:13,410
您已经看到，可以使用sudo apt get install和软件包在系统上安装新的软件包
You saw that you can install new packages on your system using sudo apt get install and the packages

62
00:04:13,420 --> 00:04:16,080
预编译好，然后就可以开始了。
come pre-compiled and ready to go.

63
00:04:16,080 --> 00:04:17,990
您甚至不需要重新启动系统。
You don't even need to reboot your system.

64
00:04:18,000 --> 00:04:23,220
好的，一旦您安装了它，我们安装了x11应用程序包，它就可以立即运行了，它为我们提供了
OK it's all ready to go as soon as you install it and we install the x 11 apps package which gave us

65
00:04:23,220 --> 00:04:28,530
我们看到了很多其他的应用程序，比如X-Man，
the fun excised package to play around with and as we saw so many other applications such as X-Man which

66
00:04:28,530 --> 00:04:33,450
是浏览手册页的图形化方式，但因为软件包是通过软件包安装的
is a graphical way of browsing the manual pages but because the package is installed via the package

67
00:04:33,450 --> 00:04:38,510
管理器是预编译的，这意味着我们需要另一种方式来正确地查看源代码。
manager a pre-compiled that means we need another way to take a look at the source code right.

68
00:04:38,640 --> 00:04:44,220
因此，接下来我们将讨论关于高度Buntu归档的结构化问题，以及如何配置我们的源DAAT列表
So then we discuss about highly buntu archives a structured and how to configure our sources daat list

69
00:04:44,220 --> 00:04:48,090
文件来允许我们实际下载源代码。
file to allow us to actually download source code.

70
00:04:48,120 --> 00:04:52,810
然后，我们下载了退出应用程序包的源代码，并查看了
We then downloaded the source code for the exit of an apps package and took a look at the code for the

71
00:04:52,810 --> 00:04:58,770
接下来是我们看到的幕后程序，这段代码可以编译并安装在相同的
next ise program so we saw behind the scenes and this code can be compiled and installed in the same

72
00:04:58,770 --> 00:05:04,630
作为代码，我们可以从网站下载，但请记住，这些代码是手动编译和安装的
way as the code we it from the web site but remember that code that's compiled and installed manually

73
00:05:04,720 --> 00:05:08,350
失去了与包管理器保持最新的能力。
loses its loses its ability to be kept up to date with the package managers.

74
00:05:08,540 --> 00:05:13,720
哦，顺便说一下，新网站上的所有内容也都在软件存储库中，所以您可以
Oh by the way everything that is on the new Web site is also in the software repositories so you can

75
00:05:13,720 --> 00:05:15,900
向前看，只需使用存储库即可。
just use the repositories going forward.

76
00:05:16,120 --> 00:05:21,260
最后，我们了解了如何使用包管理器卸载包来删除包。
And finally we saw how to uninstall packages using the package manager to remove a package.

77
00:05:21,280 --> 00:05:27,250
最好的方法是sudo apt get perge，因为它会删除并移动符合以下条件的所有配置文件：
The best method is the sudo apt get Perge because that removes and moves any configuration files that

78
00:05:27,250 --> 00:05:28,420
和包裹一起来的。
came with the package.

79
00:05:28,540 --> 00:05:31,320
可能会留下来堵上你的硬盘。
Might just stay behind and clog up your hard drive.

80
00:05:31,330 --> 00:05:36,940
因此sudo apt会被清除以删除软件包，而且当您安装软件包时，它通常带有一些依赖项
So sudo apt get purged to remove packages and when you install a package it often comes with some dependencies

81
00:05:36,940 --> 00:05:38,660
这可能不再需要了。
that might no longer be needed.

82
00:05:38,710 --> 00:05:45,430
卸载该软件包以便消除任何悬而未决的依赖项时，可以使用sudo apt get
When you uninstall that package so to get rid of any dangling dependencies you can use sudo apt get

83
00:05:45,630 --> 00:05:46,690
自动删除。
auto remove.

84
00:05:46,750 --> 00:05:51,820
因此，您还了解到，当安装软件包时，它不会死文件保存在本地计算机上。
So you also learned that when a package is installed it's not dead file is saved locally on the computer.

85
00:05:51,910 --> 00:05:55,710
如果大量这样的文档死区堆积起来，它们真的会占用很大的空间。
And if a lot of these doc deadfalls build up they can really take up a lot of space.

86
00:05:55,850 --> 00:06:00,880
因此，要移除所有这些黑暗的死角，您只需运行sudo apt get lean即可。
So to remove all of these dark deadfalls you simply run sudo apt get clean.

87
00:06:00,880 --> 00:06:05,530
现在，您可能不想将其全部移除，而是只移除不再可访问的那些
Now you may not want to remove them all but instead just remove the ones that are no longer accessible

88
00:06:05,530 --> 00:06:06,570
从储存库里。
from the repositories.

89
00:06:06,640 --> 00:06:10,180
因此，要执行此操作，请运行sudo apt自动清理。
So to do that run sudo apt get auto clean.

90
00:06:10,250 --> 00:06:16,120
好了，现在您对开放源码和自由软件的含义有了一个坚实的理解
OK now with that you now have a solid understanding of what open source and free software is all about

91
00:06:16,420 --> 00:06:17,270
它是从哪里来的。
where it came from.

92
00:06:17,350 --> 00:06:22,780
如何搜索如何安装它、如何管理它以及如何在您的新Linux计算机上卸载它。
How to search for how to install it how to manage it and how to uninstall it on your new Linux computer.

93
00:06:22,900 --> 00:06:27,790
所以请记住，这些软件中的每一个都有自己的手册页，供您阅读和学习
So remember that each of these pieces of software comes with its own man page for you to read and learn

94
00:06:27,790 --> 00:06:31,190
所以你现在完全自由了。
about the package as well so you've got complete freedom now.

95
00:06:31,210 --> 00:06:35,530
我在这段视频的参考资料部分放了一张小抄，列出了每个命令和
I've put a cheat sheet in the resources section for this video that lays out each of the commands and

96
00:06:35,530 --> 00:06:40,450
我们在本节中介绍的系统上的有用文件和文件夹，因此我们可以在以下情况下参考这些文件和文件夹
useful files and folders on the system that we've covered in this section so we can refer to that when

97
00:06:40,450 --> 00:06:41,530
你在处理包裹。
you're working with packages.

98
00:06:41,530 --> 00:06:47,630
如果你需要一点补习，但老实说，你在这一节已经走到这一步了，因为
If you ever need a bit of a refresher but in all honesty you have come so far in this section because

99
00:06:47,700 --> 00:06:49,740
我为你感到难以置信的骄傲。
I am so unbelievably proud of you.

100
00:06:49,750 --> 00:06:54,670
有一个庞大的软件世界等着你去探索，如果你能想到这一点，那就是
There is a whole massive world of software out there for you to explore and if you can think of it it's

101
00:06:54,670 --> 00:06:57,850
可能在储存库中，所以去找一个在它前面的探索者。
probably in the repository so go and have an explore one ahead of it.

102
00:06:57,850 --> 00:07:03,350
要在.com网站上搜索并查看和安装一些内容并尝试使用的软件包
Packages that are to dot com and have a search around and see and install some stuff and try it out

103
00:07:03,580 --> 00:07:03,930
现在。
now.

104
00:07:03,960 --> 00:07:08,380
不幸的是，所有美好的事情都必须结束，现在是我们需要结束
Unfortunately all good things must come to an end and the time has come that we need to wrap up the

105
00:07:08,380 --> 00:07:08,900
当然可以。
course.

106
00:07:08,980 --> 00:07:11,830
所以说再见吧，我会在下一个视频中见到你。
So to say goodbye I'll see you in the next video.

