1
00:00:00,210 --> 00:00:01,480
你好，你们这些漂亮的人。
Hello you beautiful people.

2
00:00:01,480 --> 00:00:03,860
现在，正如你所知道的，每一枚硬币都有两面。
Now as you know there are two sides to every coin.

3
00:00:03,890 --> 00:00:07,650
现在您已经在本视频中了解了如何将软件包安装到您的系统中，接下来我们将介绍
And now that you've learned how to install packages to your system in this video we're going to be covering

4
00:00:07,650 --> 00:00:11,940
如何从您的系统中卸载软件包，并确保您的系统非常干净。
how you can uninstall packages from your system and make sure that your system is squeaky clean.

5
00:00:12,210 --> 00:00:14,540
所以，让我们继续直截了当地谈吧。
So let's just go ahead and get right into it.

6
00:00:15,770 --> 00:00:16,190
好的。
OK.

7
00:00:16,210 --> 00:00:20,560
在最后几个视频中，我们一直在摆弄x11应用程序包，我们将继续
So in the last few videos we've been messing around with the x 11 apps package and we're going to continue

8
00:00:20,560 --> 00:00:23,540
在这段视频中把它当做我们的小白鼠。
using that as kind of our guinea pig for this video.

9
00:00:23,650 --> 00:00:30,610
因此，要想卸载软件包，最基本的方法是键入sudo apt get remove和
So to uninstall a package in a boon to the most basic way to do it is to type sudo apt get remove and

10
00:00:30,610 --> 00:00:31,630
然后是包名。
then the package name.

11
00:00:31,720 --> 00:00:38,830
好的，因为我们谈论的是x11应用程序包，所以我们只需输入sudo、apt、get、remove，然后输入x
OK so because we are talking about the x 11 apps package we just type sudo apt get remove and then x

12
00:00:38,830 --> 00:00:39,780
11个应用程序。
11 apps.

13
00:00:39,790 --> 00:00:42,810
这会把它去掉，但这不是首选的方法。
And that would remove it but that's not the preferred way to do it.

14
00:00:42,850 --> 00:00:43,090
好的。
OK.

15
00:00:43,090 --> 00:00:47,500
原因是当您安装软件包时，有时会出现配置文件
And the reason is when you install packages there are sometimes configuration files that come along

16
00:00:47,500 --> 00:00:52,630
使用软件包，如果只使用sudo apt get remove删除软件包，则配置
with the packages and if you just remove the package using sudo apt get remove then the configuration

17
00:00:52,630 --> 00:00:56,670
文件被留在您的系统上，占用空间，没有任何帮助。
files are left behind on your system taking up space and not being helpful.

18
00:00:56,680 --> 00:01:00,790
现在，如果您想在将来再次安装软件包并想要您的所有设置，这会很有用
Now this can be useful if you want to install the package again in the future and want all your settings

19
00:01:00,790 --> 00:01:03,990
都是一样的，但这仍然不是最好的方式。
to be the same but it's still not really the preferred way to do it.

20
00:01:04,150 --> 00:01:09,210
相反，要删除软件包及其所有配置文件，我们要做的不是键入siap
Instead to remove a package and all of its configuration files what we do is instead of typing silap

21
00:01:09,220 --> 00:01:13,370
Get Remove，我们键入sudo apt get perge，然后输入包名。
get removed we type sudo apt get Perge and then the package name.

22
00:01:13,380 --> 00:01:15,240
就像我是个伪君子。
Like I a pseudo get purred.

23
00:01:15,350 --> 00:01:19,850
优秀的应用程序现在清除将删除软件包及其配置文件。
Excellent apps now the purge will remove the package and its configuration files.

24
00:01:19,960 --> 00:01:23,460
因此，无论您想要安装什么软件包，都要始终使用Perge。
So always use Perge whatever you want to install a package.

25
00:01:23,490 --> 00:01:29,440
所以如果我继续这样做，它就会说，嘿，我想去掉这个，没问题。
So if I go ahead and do that it's going to go and say hey I want to remove this is OK.

26
00:01:29,470 --> 00:01:30,640
我按“是”。
I press yes.

27
00:01:31,740 --> 00:01:37,290
我将检查并删除x11应用程序和它的任何配置文件，这样您就可以在这里看到它写着
I will go through and remove x 11 apps and any of its configuration files so you can see here it says

28
00:01:37,290 --> 00:01:40,430
正在清除x 11个应用的配置文件。
purging configuration files for x 11 apps.

29
00:01:40,470 --> 00:01:43,110
好的，所以它继续前进，并做到了这一点。
OK so it's gone ahead and done that.

30
00:01:43,110 --> 00:01:47,670
现在，这11个应用程序包将从系统中100%删除。
Now that will have the 11 apps package 100 percent removed from the system.

31
00:01:47,790 --> 00:01:53,520
但有时当您安装软件包时，您需要安装其他10个不同的软件包作为依赖项。
But sometimes when you install packages you need to install like 10 other different packages as dependencies.

32
00:01:53,530 --> 00:01:59,010
好的，为了让您想要安装的软件包正常工作，您需要像其他10个软件包一样
OK so you need in order to get the package that you want to install to work you need like 10 other packages

33
00:01:59,220 --> 00:02:02,380
或者甚至是上百个套餐，才能让这个套餐发挥作用。
or maybe even a hundred of the packages in order to get that one package to work.

34
00:02:02,400 --> 00:02:05,310
我们称这些额外的套餐为依赖关系。
And we call those extra packages dependancies.

35
00:02:05,340 --> 00:02:09,810
因此，如果不再需要这些依赖项，但您不知道它们叫什么，如何删除
So if those dependencies are no longer required but you don't know what they're called How can you remove

36
00:02:09,810 --> 00:02:10,240
他们。
them.

37
00:02:10,500 --> 00:02:14,670
您很幸运，可以删除作为依赖项安装但不再是依赖项的软件包
Well you're in luck in order to remove packages that were installed as dependencies but are no longer

38
00:02:14,670 --> 00:02:16,780
系统上的任何其他软件包都需要。
required for any other package on the system.

39
00:02:16,800 --> 00:02:24,720
你可以只做sudo Factory，屏幕sudo apt自动删除，仅此而已。
You can just do sudo factory the screen sudo apt get auto remove and that's it.

40
00:02:24,720 --> 00:02:30,690
因此，sudo get或立即删除或要删除将自动删除任何悬空依赖项，这些依赖项
So sudo get or to remove now or to remove will automatically remove any dangling dependencies that are

41
00:02:30,690 --> 00:02:36,060
不再需要，这可以帮助您节省系统空间。如果我这样做了，它会告诉我有
no longer required which helps you save space on your systems if I do that it's going to tell me there's

42
00:02:36,060 --> 00:02:39,950
实际上没有任何需要移除的，但是这样可以节省很多空间。
actually not any that need to be removed but you can save a lot of space in this.

43
00:02:40,020 --> 00:02:43,740
因此请记住，这一切都发生在您的产品上数百个甚至数千个不同的包中
So bear in mind this is all happening across hundreds or even thousands of different packages on your

44
00:02:43,740 --> 00:02:49,110
系统，并让包管理器自动保持一切有序，这真的是一项很大的资产。
system and having the package manager keep everything in order automatically is a really great asset.

45
00:02:49,260 --> 00:02:52,160
我相信你也会同意这总比你自己做好。
I'm sure you'd agree it beats doing it yourself anyway.

46
00:02:52,410 --> 00:02:58,020
现在，每当您下载并安装软件包或软件包的副本时，都会将其本地保存在您的计算机上。
Now whenever you download and install a package or a copy of the package is saved locally on your computer.

47
00:02:58,170 --> 00:03:01,890
现在，如果该软件包随后被解包并存储在您的系统上，那么当您安装时，它就是这样工作的
Now if this package is then unpacked and stored on your systems that's how it works when you install

48
00:03:01,890 --> 00:03:07,750
软件包以压缩存档的形式下载自身，然后将其解压缩并安装在您的系统上。
a package download itself as a compressed archive then unpacks itself and installs itself on your system.

49
00:03:07,770 --> 00:03:08,260
好的。
OK.

50
00:03:08,350 --> 00:03:13,020
因为两步过程不仅在您系统上安装了软件包，而且还安装了压缩版本
Because that two step process not only has a package installed on your system but a compressed version

51
00:03:13,020 --> 00:03:18,480
至少压缩文件通常会占用空间，如果您
of it is also saved at least compressed files usually take up space and aren't really necessary if you

52
00:03:18,480 --> 00:03:22,710
已经安装了软件包，因为它们只是您知道的像包装器这样的归档文件
already have the package installed and because they're just you know an archive like the wrapper that

53
00:03:22,710 --> 00:03:23,490
和这些东西一起来的。
comes with the stuff.

54
00:03:23,490 --> 00:03:24,160
好的。
OK.

55
00:03:24,630 --> 00:03:29,940
因此，您实际上可以在千兆字节的空间之间为自己节省大量空间，只需删除
So you can actually save yourself massive amounts of space between gigabytes of space just by deleting

56
00:03:29,940 --> 00:03:30,830
这些档案。
these archives.

57
00:03:30,920 --> 00:03:31,320
好的。
OK.

58
00:03:31,440 --> 00:03:33,100
现在这些档案都被储存起来了。
Now these archives are stored.

59
00:03:33,320 --> 00:03:38,850
如果我们访问劈开变量劈开缓存劈开应用劈开存档。
If we go that slash var slash cache slash apt slash archive.

60
00:03:38,850 --> 00:03:44,580
所以如果我们去那里看一看，我们可以说这里有相当多的死角，一些压缩的
So if we go there and take a look we can say there's quite a few little deadfalls here some compressed

61
00:03:44,580 --> 00:03:49,590
存档已保存，然后您可以看到用于x11应用程序的存档，尽管我们实际上已将其从
archives saved and then you can see the one for x 11 apps even though we've actually removed it from

62
00:03:49,590 --> 00:03:50,230
这个系统。
the system.

63
00:03:50,430 --> 00:03:54,760
您可以通过使用El-hage命令执行ls来查看它们有多大。
And you can see how large these are by doing ls with the El-Hage command.

64
00:03:55,080 --> 00:03:58,750
你可以看到里面总共有大约10兆字节，这并不多。
And you can see that there's a total of about 10 megabytes in there and that's not much.

65
00:03:58,920 --> 00:04:03,690
但是您知道，在您的系统上不断安装软件包之后，这个容量很容易增长到千兆字节。
But you know this can easily grow to gigabytes after you keep installing packages on your system.

66
00:04:03,690 --> 00:04:08,090
它可能会变得非常疯狂，因为您安装的每个包都有自己的依赖项。
It can get quite mad because every package you install comes with its own dependencies.

67
00:04:08,100 --> 00:04:13,890
即使是这些依赖项也会保存为副本，因此您可以通过删除
And even those dependencies are saved as copies so you can really save a lot of space by removing the

68
00:04:13,890 --> 00:04:14,810
这里的东西。
stuff from here.

69
00:04:14,820 --> 00:04:18,720
现在您甚至不需要在文件夹中就可以删除它们，所以如果我只需返回到我们的主目录
Now you don't have to even be in the folder to remove them so if I just head back to our home directory

70
00:04:18,750 --> 00:04:26,220
在那里您可以看到，如果我们运行sudo apt get lean，我们的主目录在哪里，这将删除所有
and there you can see where our home directory if we run sudo apt get clean that will delete all of

71
00:04:26,220 --> 00:04:27,800
该目录中的软件包。
the packages from that directory.

72
00:04:27,810 --> 00:04:34,800
如果我们备份到劈开变量劈开缓存劈开和劈开归档到一个地址，我们可以看到
If we had back up into the slash var slash cache slash and slash archives into an address we can see

73
00:04:34,800 --> 00:04:35,230
那也不是。
that either.

74
00:04:35,270 --> 00:04:37,900
或者被删除了，尽管我们不在那个文件夹里。
Or been deleted even though we weren't in that folder.

75
00:04:37,920 --> 00:04:41,590
所以，如果你想把那些东西都扔掉，那就最好把它清理干净。
So if you want to get rid of all that stuff do sudo apt get clean.

76
00:04:41,910 --> 00:04:45,900
但有时，不管出于什么原因，你都不想把它们全部删除，你只想把它们去掉
But sometimes you don't want to delete all of those for whatever reason and you only want to get rid

77
00:04:45,900 --> 00:04:53,910
你想扔掉的东西，那些包裹，那些存档，但是那些包裹
of the stuff you want to get rid of those packages those those those archives but the ones for packages

78
00:04:53,910 --> 00:04:59,070
不能再从实际的阿蓬特排斥区域访问，这通常是
that can no longer be accessed from the from the actual Aponte repulsive areas that this is usually

79
00:04:59,070 --> 00:05:03,480
适用于那些非常陈旧的系统，并且想要让他们的现金持续运行数年，然后
for systems that are very old and want to keep their cash going for years and years and years and then

80
00:05:03,550 --> 00:05:08,250
从现在开始，只需修剪树叶，去掉不能再下载的deb包
from now and then just trim the leaves and get rid of the deb packages that can no longer be downloaded

81
00:05:08,250 --> 00:05:12,540
不管出于什么原因，要做到这一点，而不是使用sudo apt清理。
for whatever reason and to do that instead of using sudo apt get clean.

82
00:05:12,540 --> 00:05:19,560
您现在确实使用了自动清除，因为这只是为了突出显示清除会清除归档中的所有内容
You do use auto clean now as just to highlight clean gets rid of everything of those in the archive

83
00:05:19,560 --> 00:05:22,200
不同于列表缓存的缓存。
cache that is different from the from the list cache.

84
00:05:22,200 --> 00:05:28,220
顺便说一句，这只是一个存储空间，用于存放已保存的档案和包等
By the way that's just a this is just a storage space for for saved archives and packages and stuff

85
00:05:28,230 --> 00:05:30,400
所以这是一个完全不同的缓存。
so this is a completely different cache.

86
00:05:30,510 --> 00:05:35,250
但CLEAN将删除其中的所有内容，自动清除将检查其中的内容并仅将其删除
But clean will remove everything in there and auto clean will check what's in there and only delete

87
00:05:35,250 --> 00:05:38,730
您不能再从存储库下载以确保其中没有内容的文件
the ones that you can no longer download from the repositories to make sure you don't have stuff in

88
00:05:38,730 --> 00:05:40,820
在那里你再也用不到了。
there that you'll never use again.

89
00:05:42,120 --> 00:05:45,600
因此，他们有一个不废话的卸载包指南。
So they have a no nonsense guide to uninstalling packages.

90
00:05:45,630 --> 00:05:46,680
那么我们来复习一下。
So let's review.

91
00:05:46,760 --> 00:05:53,040
好的，我们讨论最基本的检查软件包的方法是使用sudo apt get remove，然后使用软件包
OK we discuss at the most basic way to review packages is to use sudo apt get remove and then the package

92
00:05:53,040 --> 00:05:53,490
名字。
name.

93
00:05:53,490 --> 00:05:57,380
但不建议这样做，因为它会留下配置文件。
But this is not recommended because it leaves behind configuration files.

94
00:05:57,510 --> 00:06:01,440
相反，使用sudo、apt、get、perge，然后使用包名。
Instead use sudo apt get Perge and then the package name.

95
00:06:01,510 --> 00:06:06,600
好的，现在当您安装软件包时，其他依赖项软件包很可能也安装在
OK now when you install the package it's likely the other dependency packages were also installed in

96
00:06:06,600 --> 00:06:11,760
以使该软件包正常工作，以便消除这些依赖项并自动删除它们
order to make that package work in order to get rid of those dependencies and automatically remove them

97
00:06:11,760 --> 00:06:12,400
从系统中删除。
from the system.

98
00:06:12,420 --> 00:06:18,150
只要不再需要它们，您就可以使用sudo、apt、get、auto remove或删除任何不需要的
As long as they're are no longer required you would use sudo apt get auto remove or to remove any unwanted

99
00:06:18,240 --> 00:06:20,540
以及所需的依赖关系。
and needed dependencies.

100
00:06:20,580 --> 00:06:21,040
好的。
OK.

101
00:06:21,240 --> 00:06:25,110
仅仅因为它们被用于一个包裹，而你丢掉了那个包裹，并不意味着它们不再是
And just because they were used for one package and you loof that package doesn't mean they're no longer

102
00:06:25,110 --> 00:06:26,050
需要另一个。
needed for another.

103
00:06:26,070 --> 00:06:26,870
不过，别担心这一点。
But don't worry about that.

104
00:06:26,910 --> 00:06:29,560
包裹会为您解决所有这些问题的，好的。
The package is going to take care of all that for you OK.

105
00:06:29,730 --> 00:06:33,780
您还了解到，安装软件包时，首先会将其下载并保存在您的
And you also learned that when a software package is installed it is first downloaded and saved on your

106
00:06:33,780 --> 00:06:35,700
压缩存档中的系统。
system in a compressed archive.

107
00:06:35,850 --> 00:06:38,950
即使安装了软件包，此归档在您的系统上也是安全的。
This archive is safe on your system even if the package is installed.

108
00:06:38,970 --> 00:06:40,580
这意味着它正在占据空间。
And that means it's taking up space.

109
00:06:40,710 --> 00:06:45,100
它不像你真正想要的东西背后的包装或包装。
It's not like the wrapper or the packaging behind the actual thing that you want.

110
00:06:45,150 --> 00:06:50,400
好的，所以要清理所有的包装，清理所有的东西，无论做什么都是为了清理干净
OK so to clean up all the packaging and clean up all that stuff what ever do is sudo apt get clean and

111
00:06:50,400 --> 00:06:55,140
这将删除所有压缩包存档，并为您节省大量空间。
that's going to delete all the compressed package archives and save you a heck of a lot of space.

112
00:06:55,140 --> 00:06:57,610
您有时甚至会惊讶于千兆字节。
You'll be surprised sometimes even gigabytes at times.

113
00:06:57,810 --> 00:07:01,530
但也许您出于某种原因不想清理所有这些包，而是说您只需
But perhaps you don't want to clean up all of those packages for some reason and instead said you just

114
00:07:01,530 --> 00:07:05,840
我想清理那些不能再从Buntu存储库下载的文件。
want to clean up the ones that can no longer be downloaded from the buntu repositories.

115
00:07:05,850 --> 00:07:08,550
因此，您可以使用sudo进行自动清洗。
So for that you use sudo to get auto clean.

116
00:07:08,710 --> 00:07:10,180
好的，现在你就知道了。
OK so there you have it.

117
00:07:10,230 --> 00:07:11,540
你认识的漂亮的人。
Beautiful people you know.

118
00:07:11,550 --> 00:07:16,440
您需要了解的有关包管理的所有内容InnoCentive，他们已经做到了
Everything that you will ever need to know about package management InnoCentive and they've done so

119
00:07:16,530 --> 00:07:21,330
令人难以置信的是，在接下来的视频中，我想祝贺你们，并回顾一下我们所做的
unbelievably well that in the next video I would like to congratulate you and have a recap of what we've

120
00:07:21,330 --> 00:07:21,840
学到了东西。
learned.

121
00:07:21,870 --> 00:07:26,260
因此，为了得到一些当之无愧的赞扬和回顾，我将在下一个视频中与你见面。
So for some well-deserved praise and a recap I'll see you in the next video.

