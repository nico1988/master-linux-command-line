1
00:00:00,330 --> 00:00:04,860
大家好，美丽的人们，欢迎收看这段视频，我们将在这里学习如何转化资源
Hello you beautiful people and welcome to this video where we're going to be learning how to turn source

2
00:00:04,860 --> 00:00:08,480
只需稍加修改，即可将代码编写成可运行的程序。
code into runnable programs with our own little modifications.

3
00:00:08,490 --> 00:00:13,500
在本视频中，您将了解如何下载源代码编辑器并使用Ganu C编译器
So in this video you're going to learn how to download source code editor and use the Ganu C-compiler

4
00:00:13,650 --> 00:00:16,900
将该代码转换为可运行的二进制程序。
to turn that code into runnable binary programs.

5
00:00:16,920 --> 00:00:21,660
您还了解了如何使用make命令从源代码安装软件。
You also got to learn how to install software from source code using the make command.

6
00:00:21,660 --> 00:00:26,760
我还将稍微修改一下代码，这样我们就可以看到，确实是我们修改后的代码
I'm also going to modify the code slightly so that we can see that it is indeed our modified code that

7
00:00:26,760 --> 00:00:31,010
将在视频结束时安装，您应该会更好地理解令人敬畏的
is being installed by the end of the video you should have a much better understanding of the awesome

8
00:00:31,010 --> 00:00:36,180
这是开放源码的自由软件，您还应该知道如何从源代码编译软件
this of open source free software and you should also know how to compile software from source code

9
00:00:36,270 --> 00:00:37,230
为了你自己。
for yourself.

10
00:00:37,230 --> 00:00:39,520
所以，让我们继续直截了当地谈吧。
So let's go ahead and get right into it.

11
00:00:39,900 --> 00:00:46,440
好了，现在我们又回到了新的.org网站上，我们可以在这里的软件选项卡上看到
All right so here we are again on the new dot org Web site and we can see on the software tab here that

12
00:00:46,500 --> 00:00:53,450
我们可以让新操作系统附带的每个软件包深入到最底层。
we can get each of the packages going down to the bottom that comes with the new operating system.

13
00:00:53,460 --> 00:00:58,170
现在，我们到目前为止已经运行的命令的所有源代码，如find命令、ls命令
Now all the source code for the commands that we've run so far such as the find command the ls command

14
00:00:58,170 --> 00:01:01,990
等等，在这里的这个核心实用程序包中是找不到的。
and so on cannot be found in this core utils package of here.

15
00:01:02,160 --> 00:01:04,910
因此，让我们继续下载这个包并查看它。
So let's go ahead and download this package and take a look at it.

16
00:01:04,950 --> 00:01:08,490
因此，要做到这一点，我们点击链接，它将打开另一个页面。
So to do that we click on the link and it'll open up another page.

17
00:01:08,700 --> 00:01:14,160
如果我们向下滚动到这里的下载部分，它会给我们几个链接，它会告诉我们
And if we scroll down to the download section here it'll give us a couple of links and it tells us that

18
00:01:14,160 --> 00:01:17,280
稳定的源代码版本可以在此链接中找到。
the stable source releases can be found at this link.

19
00:01:17,280 --> 00:01:20,520
测试源版本可以在此链接中找到。
And the test source releases can be found at this link.

20
00:01:20,520 --> 00:01:24,990
现在，稳定版和测试版之间的区别在于，您知道的稳定源版本
Now the difference between the stable and test is that stable source releases you know are known to

21
00:01:24,990 --> 00:01:25,340
工作。
work.

22
00:01:25,340 --> 00:01:26,430
他们已经测试过了。
They've been tested.

23
00:01:26,430 --> 00:01:30,450
而测试巫师们，我是说，你可能知道他们在哪里尝试新事物，你知道那是
Whereas test sorceresses I mean you know maybe where they're trying new things and you know it's it's

24
00:01:30,450 --> 00:01:33,790
不是47，可能不是最终结果。
not 47 it might it's not final.

25
00:01:33,790 --> 00:01:37,740
好的，我们将在稳定源上进行尝试，我将单击该链接，我们可以在这里看到
Right so we're going to try it at the stable source I'm going to click on that link and we can see here

26
00:01:37,740 --> 00:01:43,520
我们得到一堆包裹，一堆列表格式的捆绑包。
that we get a bunch of packages a bunch of bundles that are that are in a list format.

27
00:01:43,530 --> 00:01:47,620
而最新的版本则排在列表的底部。
And the most recent versions are towards the bottom of the list.

28
00:01:47,640 --> 00:01:53,850
因此，如果我们尽可能向下滚动到列表的底部，我们将看到Call Utils Version 8
So if we scroll down as far as we can to the bottom of the list will see we get call utils version 8

29
00:01:53,850 --> 00:01:55,520
指向8。
point to 8.

30
00:01:55,590 --> 00:02:00,510
我们要点击的是以点X ZEDS结尾的那个，在它的末端是点EXEC点
And what we're going to click on is the one that ends in Dot X zeds and on the ends it Dot exec dot

31
00:02:00,510 --> 00:02:03,920
只签名以Dot X Zed结尾的那个。
sig just the one that ends in Dot X Zed.

32
00:02:03,930 --> 00:02:08,880
如果我现在继续点击，我们会看到一个弹出窗口出现在这里，我要
So if I go ahead and click on that right now we'll see that we see a pop come here and I'm going to

33
00:02:09,050 --> 00:02:10,060
保存文件。
save file.

34
00:02:10,090 --> 00:02:11,240
我将单击“确定”。
I'm going to click OK.

35
00:02:11,550 --> 00:02:16,920
它已经保存在我们的Downloads文件夹中，所以如果我转到我们的Downloads文件夹，对吗
And that has been saved in our downloads folder so if I just head over to our downloads folder right

36
00:02:16,920 --> 00:02:21,170
现在，在终端中，只要我在主目录中，您就可以看到它。
now in the terminal you can see it the minute I'm in a home directory.

37
00:02:21,300 --> 00:02:27,330
我转到Downloads文件夹并列出，您可以看到我们有这个核心实用程序版本8
I go to the downloads folder and list out and you can see that we have got this core utils version eight

38
00:02:27,350 --> 00:02:30,050
点8.2 a 8.托德·X·泽德(Todd X Zed)。
point 8.2 a 8. Todd X Zed.

39
00:02:30,120 --> 00:02:37,440
这是一个使用X Zad压缩算法压缩的TAR归档文件，如果
Now that's a compressed tar archive that's been compressed using the X Zad compression algorithms if

40
00:02:37,440 --> 00:02:38,040
我看着那个。
I look at that.

41
00:02:38,040 --> 00:02:42,370
我们将看看find命令会说它是ex-head压缩数据。
We'll see what the find command will say that it's ex-head compressed data.

42
00:02:42,390 --> 00:02:48,360
现在前编辑器只是一个压缩算法，就像BS应用程序或GS EP压缩RPM一样，我们
Now ex-editor just a compression algorithm just like the BS app or the GS EP compression RPMs that we

43
00:02:48,360 --> 00:02:50,850
谈到了秋季压缩归档视频。
touched on in the fall compression archiving video.

44
00:02:50,850 --> 00:02:56,380
非常简单，因为它不是较常见的算法之一，但我们可以使用tar命令将其解包。
Very briefly because it's not one of the more common algorithms but we can unpack it using the tar command.

45
00:02:56,460 --> 00:02:57,770
好的，我们就这么做吧。
OK so let's just do that.

46
00:02:57,900 --> 00:03:03,140
我们可以这样做，我们可以键入taar，您知道，提取文件比较困难，您可以给它
Well we can do is we can type Taar And you know as you know harder to extract a file you give it the

47
00:03:03,150 --> 00:03:09,650
x和f选项，然后告诉它要通过zip压缩算法解压缩哪个归档文件
x and f options and then you tell it which archive to extract through the zip compression algorithm

48
00:03:09,920 --> 00:03:15,690
给它大写的J期权，所以小写的j期权是Phoebes，把大写的J期权
to give it the capital J option so the lowercase j option is Phoebes it to put the capital J option

49
00:03:15,800 --> 00:03:20,310
用于退出，如果您想了解更多有关这方面的信息，请查看文件压缩和归档作弊
is for exit and if you want more information on this check out the file compression and archiving cheat

50
00:03:20,310 --> 00:03:22,340
我在适当的视频中给你的那张纸。
sheet that I gave you in the appropriate video.

51
00:03:22,380 --> 00:03:22,920
好的。
OK.

52
00:03:22,920 --> 00:03:28,280
因此，如果我们继续并按Enter键，我们将看到我们没有得到任何信息，因为我们没有给出
So if we go ahead and press ENTER we'll see that we didn't get any information because we didn't give

53
00:03:28,280 --> 00:03:29,450
关于Wii选项的讨论。
the talk about the Wii option.

54
00:03:29,460 --> 00:03:31,070
但如果我现在少用点，我们就等着瞧吧。
But if now I use less we'll see.

55
00:03:31,070 --> 00:03:35,820
我们现在有一个名为call utils 8point to 8的新文件夹。
We've now got a new folder called Call utils eight point to eight.

56
00:03:35,820 --> 00:03:41,880
因此，如果我们将Internet CD放入核心实用程序中，并查看一下，会发现我们有一大堆东西
So if we see the Internet CD into core utils and take a look see that we've got a whole bunch of stuff

57
00:03:41,880 --> 00:03:42,350
在那里。
in there.

58
00:03:42,450 --> 00:03:45,280
好的，但是我们可以特别关注这一点。
OK but we can specifically pay attention to this.

59
00:03:45,300 --> 00:03:49,940
s r c目录，现在SIRC是source的缩写。
S r c directory now that SIRC is short for source.

60
00:03:49,980 --> 00:03:56,820
这就是源代码所在的地方，如果我们将CD转成S或C，然后在屏幕上看一看，请看一看
And that's where the source code is capice if we CD into S or C and take a look in the screen take a

61
00:03:56,820 --> 00:04:02,940
看，我们可以看到，我们这里有一大堆文件，让我们把这些数据输送到最后一个命令中。
look we can see that we've got a whole bunch of files in here let's pipe that data into the last command.

62
00:04:02,940 --> 00:04:07,770
首先，这使得向上和向下滚动变得更容易，您可以看到，现在我们可以看到
First of all now that makes it easier to scroll up and down and you see now we can see that we get loads

63
00:04:07,770 --> 00:04:09,600
以点结尾的文件。
of files that end in dot.

64
00:04:09,600 --> 00:04:15,900
现在，点Dotsie向我们表示这些文件都是用C编程语言编写的。
See now that dot Dotsie indicates to us that these files are all written in the C programming language.

65
00:04:15,900 --> 00:04:17,760
OK，这是一种非常常见的编程语言。
OK which is a very common programming language.

66
00:04:17,760 --> 00:04:19,900
好消息软件是用来写的。
The good news software is written in.

67
00:04:20,160 --> 00:04:24,950
考虑到它的写作日期是20世纪80年代和90年代。
Given the date of when it was written being in the know the the 1980s 1990s.

68
00:04:24,960 --> 00:04:28,790
因此，让我们看看ls命令背后的代码。
So let's take a look at the code behind the ls command.

69
00:04:28,790 --> 00:04:30,790
例如，我们可以延续内斯特的。
For example we could last Nestor's.

70
00:04:30,870 --> 00:04:35,290
我们可以看到这里有一个LS Dotsie文件。
LS We can see that we've got this LS Dotsie file going on here.

71
00:04:35,290 --> 00:04:36,090
那么我们来看一看。
So let's take a look at it.

72
00:04:36,090 --> 00:04:39,130
Nano LS点见。
Nano LS dot see.

73
00:04:39,450 --> 00:04:40,520
我们就到这了。
And there we are.

74
00:04:40,530 --> 00:04:43,590
这实际上是这里的源代码。
This is actually the source code in here.

75
00:04:43,590 --> 00:04:49,020
这是它的最大化器的所有源代码，LS命令的源代码。
This is all the source code of the Maximizer of it the source code for the LS commands.

76
00:04:49,020 --> 00:04:50,200
是不是太棒了，对吧。
Isn't that awesome right.

77
00:04:50,370 --> 00:04:55,710
现在，如果您有时间、能力和意图，您可以仔细阅读这段代码，并准确地学习
Now if you had the time the ability and the intention you could go through this code and study exactly

78
00:04:55,710 --> 00:05:00,600
它在做什么，这是自由软件运动旨在给你的自由之一。
what it was doing which is one of the freedoms that the free software movement aims to give you.

79
00:05:01,060 --> 00:05:06,670
但我们实际上也可以修改这段代码，并将其重新编译为运行的软件，这就是我们正在做的
But we can actually also modify this code and recompile it into running software which is what we're

80
00:05:06,670 --> 00:05:07,550
现在要做的就是。
going to do now.

81
00:05:07,580 --> 00:05:12,760
这不是一门关于C编程的课程，但是在每个C程序中都有一个函数，叫做
Now this isn't a course on C programming but in every C program there was a function in there called

82
00:05:12,760 --> 00:05:14,210
主要功能。
the main function.

83
00:05:14,220 --> 00:05:16,290
这是一个一直在运行的非常重要的功能。
It's a very important function that always runs.

84
00:05:16,300 --> 00:05:21,640
好的，现在我要修改这个函数，这样每当类运行时，计算机就会打印出来。
Ok now I'm going to modify that function so that whenever class runs the computer will print out.

85
00:05:21,700 --> 00:05:24,120
你好，你们这些漂亮的人出现在屏幕上。
Hello you beautiful people onto the screen.

86
00:05:24,160 --> 00:05:28,880
好的，我要在main函数中输入一些代码来实现这一点。
OK so I going to type a bit of code into the main function that makes that happen.

87
00:05:29,050 --> 00:05:33,850
现在，在为本讲座做了一点准备之后，我发现这个文件中的主要函数开始于大约
Now after preparing a bit for this lecture I found that the main function in this file starts at about

88
00:05:33,850 --> 00:05:36,560
1443线。
line 1443.

89
00:05:36,580 --> 00:05:43,930
因此，如果我们使用Nanos，使用控制和下划线选项转到行函数，如果我在第14行
So if we use Nanos go to line function using the control and underscore option if I put in line 1 4

90
00:05:43,930 --> 00:05:50,170
然后按Enter，你可以看到我们已经到了主函数Magic。
4 3 and press ENTER you can see that we've ended up at the main function magic.

91
00:05:50,170 --> 00:05:55,930
这里顶部的行代码进行打印，所以打印F，我将把
So the line code right at the top here that does that printing stuff so print F and I'm going to put

92
00:05:55,930 --> 00:05:56,850
在那里。
in there.

93
00:05:57,220 --> 00:06:04,090
你好，你们这些漂亮的人，一定要在新的行尾加上反斜杠和字符
Hello there you beautiful people and make sure that it ends on a new line with the backslash and character

94
00:06:04,090 --> 00:06:04,560
就在那里。
right there.

95
00:06:04,630 --> 00:06:05,020
好的。
OK.

96
00:06:05,200 --> 00:06:07,460
我要轻拍这个。
And I'm just going to tap this.

97
00:06:07,480 --> 00:06:11,510
这不会有什么不同，但你知道这样会好一点。
It doesn't make a difference but you know that that's a bit nicer.

98
00:06:11,970 --> 00:06:15,430
试着去掉行尾多余的空格，没关系。
Try and get rid of this extra space at the end the line it doesn't matter.

99
00:06:15,860 --> 00:06:18,540
好的，我们把函数放进去了。
OK so we've put in the function there.

100
00:06:18,550 --> 00:06:22,440
大家好，有新台词角色的美女们。
Hello there beautiful people with a new line character.

101
00:06:22,490 --> 00:06:25,050
好的，你知道是哪条线了，它是到另一条线的。
OK so you know the line it goes to a new line.

102
00:06:25,270 --> 00:06:32,740
现在，如果我们在控制为0的情况下保存火，并在控制X的情况下退出，那么我们现在已经修改了LS命令
Now if we save the fire with control in 0 and we exit with control of X we've now modified the LS commands

103
00:06:32,740 --> 00:06:33,190
密码。
code.

104
00:06:33,260 --> 00:06:34,350
好的，那很酷。
OK that's pretty cool.

105
00:06:34,420 --> 00:06:38,980
但是现在我们如何将这些代码转换成可运行的程序并将其安装到我们的计算机上呢？
But now how do we turn this code into a runnable program and install it on our computer.

106
00:06:39,190 --> 00:06:44,710
因为它们是用C语言编写的，所以代码需要编译成机器语言才能
Well because they're written in C the code needs to be compiled into machine language before it can

107
00:06:44,710 --> 00:06:45,210
快跑吧。
be run.

108
00:06:45,220 --> 00:06:46,840
为此，我们需要一个编译器。
And for that we need a compiler.

109
00:06:46,900 --> 00:06:50,220
更具体地说，是用于C编程语言的编译器。
And most specifically a compiler for the C programming language.

110
00:06:50,230 --> 00:06:57,220
现在，新的C编译器或GCC是在Ganu Linux系统上使用的编译器，我们可以通过以下方式获得它
Now the new C compiler or GCC is the compiler that's used on Ganu Linux systems and we can get it by

111
00:06:57,220 --> 00:07:03,860
回答以下命令，不执行命令sudo apt get install GCC。
answering the following command and not following commands sudo apt get install GCC.

112
00:07:03,880 --> 00:07:08,440
现在我不想太担心这件事，因为我们稍后会详细解释
Now for now I don't want to worry too much about this because we'll be explaining in great detail later

113
00:07:08,440 --> 00:07:13,600
关于此命令的实际含义以及将在本节中执行的内容，但简而言之，
on what this command actually means and will be doing it in this section of course but in short what

114
00:07:13,600 --> 00:07:17,770
我们要做的是告诉计算机查找适用于Buntu的软件存储库
we're doing is we're telling the computer to look on the software repositories available for a buntu

115
00:07:18,040 --> 00:07:22,270
并下载并安装新的C编译器或GCC包。
and download and install the new C compiler or GCC package.

116
00:07:22,270 --> 00:07:26,580
同样，在接下来的几个视频中，这一点将变得更加清楚，但就像我在这里所做的那样，键入它并
Again this will become much clearer in the next few videos but as type it as I have done so here and

117
00:07:26,590 --> 00:07:28,200
当您满意时，请按Enter键。
when you're happy press enter.

118
00:07:28,330 --> 00:07:35,110
因为我们使用过sudo，它要求输入密码，就像我们以前使用sudo一样，所以我只是
And because we've used sudo it asks for a password just like when we've used sudo before so I'm just

119
00:07:35,110 --> 00:07:38,080
我希望能正确地把它加进去。
going to add to that in there hopefully correctly.

120
00:07:38,080 --> 00:07:39,370
祈祷吧。
Fingers crossed.

121
00:07:39,570 --> 00:07:40,910
让我们再试一次。
Let's try it again.

122
00:07:41,680 --> 00:07:42,340
我们走吧。
There we go.

123
00:07:42,410 --> 00:07:48,710
现在它说，嘿，我们要安装一大堆软件包，才能得到这个GCC软件包
And now it's saying hey we've got to install a whole bunch of packages in order to get this GCC package

124
00:07:48,940 --> 00:07:52,280
这将是大约72兆字节的额外磁盘空间。
that's going to be about 72 megabytes of additional disk space.

125
00:07:52,300 --> 00:07:53,470
你想继续吗。
Do you want to continue.

126
00:07:53,500 --> 00:07:54,790
现在我只需要输入YES就可以了。
Now I can just type yes.

127
00:07:54,820 --> 00:07:56,030
我要输入Y。
I'm going to type Y.

128
00:07:56,140 --> 00:07:59,120
按Enter键，它将继续执行该操作。
Press enter and it's going to go ahead and do that.

129
00:07:59,220 --> 00:08:06,640
好的，这可能需要一段时间，具体取决于您的互联网连接，但它似乎已下载
OK and this might take a while depending on your internet connection but it appears to have downloaded

130
00:08:06,640 --> 00:08:06,770
它。
it.

131
00:08:06,770 --> 00:08:09,730
在我的情况下，现在它只是在做安装。
In my case and now it's just doing the installation.

132
00:08:09,730 --> 00:08:13,510
它将开始解压它下载的每个不同的包。
It's going to start unpacking each of those different packages that it's download.

133
00:08:13,510 --> 00:08:16,600
实际上，我们现在正在进行安装过程。
And we are actually seeing an installation process happen right now.

134
00:08:16,600 --> 00:08:21,160
我们将在后面的课程中更详细地研究这一点，但是您可以看到我们没有
We will look into this a lot more in more detail later in the course but you can see that where we didn't

135
00:08:21,160 --> 00:08:25,690
我必须下载任何向导，然后单击下一步同意任何条件或任何内容
have to download any wizard and click next next next next next agree to any terms of conditions or anything

136
00:08:25,690 --> 00:08:31,540
就像那样，因为所有的软件都在新的公共许可证下，并且它给您提供的都是相同的
like that because all of the software is under the new Public License and it all gives you the same

137
00:08:32,260 --> 00:08:36,720
同样的，不同的，彼此一样的自由。
same different the same freedoms as each other.

138
00:08:36,790 --> 00:08:39,640
好的，现在这就要发生了，我们仍然不需要做任何事情。
OK so now that's going to happen and still we don't have to do anything.

139
00:08:39,640 --> 00:08:44,810
我们现在已经安装了一个新的C编译器和一大堆其他东西，所以我们准备编译我们的
We've now installed a new C compiler and a whole bunch of other stuff so we're ready to compile our

140
00:08:44,980 --> 00:08:45,370
密码。
code.

141
00:08:45,400 --> 00:08:48,200
好的，让我们把注意力转向我们漂亮的源代码。
OK so let's turn our attention to our beautiful source code.

142
00:08:48,230 --> 00:08:51,750
不是，因为不同的计算机有不同的体系结构。
No because different computers have different architectures.

143
00:08:51,770 --> 00:08:55,160
我们必须将此代码的安装配置到我们的特定计算机上。
We had to configure the installation of this code to our specific machine.

144
00:08:55,360 --> 00:09:02,290
现在，该调用附带了一个脚本，用于在源文件夹中配置具有备份的源
Now there's a script that comes with that call to configure the source in the source folder has a backup

145
00:09:02,290 --> 00:09:05,120
在所有的带CD点的文件夹上都要回去。
of all the with CD dot dot to go back up a folder.

146
00:09:05,130 --> 00:09:09,070
播放屏幕，再看一看，我们可以看到这里有一个名为configure的脚本，我们知道
Play the screen and take another look and we can see here there's a script called configure and we know

147
00:09:09,070 --> 00:09:10,760
这是一个剧本，因为它是绿色的。
it's a script because it's green.

148
00:09:10,870 --> 00:09:15,500
好的，让我们通过键入bash configure运行该命令，然后按Enter键。
OK let's run that by typing bash configure and we press enter.

149
00:09:15,720 --> 00:09:23,080
这样做是在配置新的C编译器GCC，以确保在编译时
What this is doing is it's configuring the new C compiler the GCC to get make sure that when it compiles

150
00:09:23,080 --> 00:09:29,050
所有这些我们告诉它的软件都会以一种适合我们计算机的方式来做
all this the software that we tell it to it's going to do it in a way that's appropriate for our computers

151
00:09:29,110 --> 00:09:35,050
体系结构正在进行适当的调整，重要的是此配置脚本
architecture is making the appropriate adjustments and the important thing that this configure script

152
00:09:35,050 --> 00:09:40,570
除了配置Ghannouchi C编译器之外，它还创建了一个名为Makefile的新文件
does besides configuring the Ghannouchi C-compiler is that it creates a new file called the Makefile

153
00:09:40,900 --> 00:09:45,710
Makefile负责安装这个新软件包。
and makefile is responsible for the installation of this new software package.

154
00:09:45,710 --> 00:09:51,670
但是要使Makefile工作，顺便说一句，这是一个巨大的绕口令，我们需要一个名为
But to make the makefile work which is a massive tongue twister by the way we need a new command called

155
00:09:51,730 --> 00:09:52,410
制作。
make.

156
00:09:52,450 --> 00:09:57,340
因此，当这件事完成配置后，我们将以非常类似的方式安装make命令
So when this thing has finished configuring we're going to install the make command in a very similar

157
00:09:57,340 --> 00:10:01,270
我们刚刚安装了新的C编译器。
way to the we just installed the new C compiler.

158
00:10:01,270 --> 00:10:05,680
所以如果我们坐在这里等一会儿，我们会看到所有这些美丽的文字在屏幕上飞来飞去
So if we just sit tight here for a second while we see all this beautiful text flying up the screen

159
00:10:06,520 --> 00:10:07,400
看起来很棒，对吧。
looks pretty awesome right.

160
00:10:07,430 --> 00:10:11,310
这就像你可能会看到的一些东西，不像是有黑客的电影，你知道的，诸如此类的东西
It's like something you might see unlike on like a film with hackers you know and stuff like that and

161
00:10:11,330 --> 00:10:13,500
就是我们现在真的在这么做。
it's we're literally doing that right now.

162
00:10:13,500 --> 00:10:17,620
所以我会非常自豪，好了，现在完成了。
So I'd be very proud of OK so now that's finished.

163
00:10:17,790 --> 00:10:22,470
如果我们只看一下这个目录，我们应该能够在这里看到这个名为make的新文件
If we just take a look in this directory we should be able to see this new file here called the make

164
00:10:22,470 --> 00:10:27,570
Make文件的趣味性是一个重要的文件，但是我们需要能够运行我们需要的Make文件
fun of the make file is an important file but we need to be able to run that we need to have the make

165
00:10:27,570 --> 00:10:28,040
指挥部。
command.

166
00:10:28,050 --> 00:10:32,000
为此，我们将键入sudo apt get install make。
So to get that we're going to type sudo apt get install make.

167
00:10:32,130 --> 00:10:32,410
好的。
OK.

168
00:10:32,430 --> 00:10:36,990
当我们按Enter键时，它将经历非常相似的安装过程。
And when we press Enter it's going to go through a very similar process of installation.

169
00:10:37,300 --> 00:10:40,090
现在，所有这些都安装得非常快，非常容易安装。
Now that's all installed very quick very easy to install that one.

170
00:10:40,140 --> 00:10:46,680
好的，现在，当我们与make文件在同一个文件夹中时，如果我们只运行make命令，您可以看到
OK so now when we're in the same folder as the make file if we just run the make command you can see

171
00:10:46,680 --> 00:10:53,640
它将通过并编译它找到的所有c文件
that it's going to go through and it's going to compile all of the all of the c files that it finds

172
00:10:53,640 --> 00:11:00,180
最近没有汇编，还有一些修改没有完成，这实际上都是
have not been compiled recently and there are still some changes outstanding which is effectively all

173
00:11:00,180 --> 00:11:05,110
此文件夹中的C代码，包括LS文件。
of the C code in this folder including LS file.

174
00:11:05,190 --> 00:11:13,920
好的，这就是把它全部编译成机器代码，然后再编译成二进制代码，这样就可以
Ok so what this is doing is it's compiling it all into into machine code into binary code that can be

175
00:11:14,250 --> 00:11:15,230
在计算机上运行。
run on the computer.

176
00:11:15,280 --> 00:11:15,520
好的。
OK.

177
00:11:15,540 --> 00:11:19,730
因此，当您运行像C编程语言这样的编译语言时，这是必需的。
So this is what's necessary when you run a compiled language like the C programming language.

178
00:11:19,920 --> 00:11:26,290
这样做之后，我们就可以安装新编译的程序了。
So when that's done we'll be able to install the newly compiled programs.

179
00:11:26,370 --> 00:11:31,620
不过，为了节省时间，我要把这段视频剪下来，这样就不会让你等太久了。
But I'm going to cut the video here to save time and you know stop you waiting around too much.

180
00:11:32,930 --> 00:11:33,290
好的。
OK.

181
00:11:33,310 --> 00:11:34,250
现在已经完成了。
Now that's completed.

182
00:11:34,270 --> 00:11:38,220
现在的情况是我们找到ls命令的代码。
So what's happened is what we found the code for the ls command.

183
00:11:38,320 --> 00:11:45,310
好的，我们编辑了代码，然后安装了称为新C编译器的东西，这是必需的
OK we edited that code and then we installed something called the new C compiler which is what's required

184
00:11:45,310 --> 00:11:50,170
将该代码转换为计算机运行所需的机器代码。
to turn that code into machine code that the computer needs in order to run.

185
00:11:50,260 --> 00:11:50,800
好的。
OK.

186
00:11:50,800 --> 00:11:56,710
我们所做的就是安装Ghannouchi编译器，我们必须在此之前配置该编译器
So what we did is we installed the Ghannouchi compiler and we had to configure that compiler before

187
00:11:56,710 --> 00:12:00,520
它可以根据我们计算机的特定要求正常工作。
it would could work correctly for our computers specific requirements.

188
00:12:00,520 --> 00:12:05,990
好的，我们配置了编译器，然后在配置之后，我们只需使用make命令运行它。
OK so we configured the compiler and then when it was configured we'd just run it using the make command.

189
00:12:06,010 --> 00:12:06,350
好的。
OK.

190
00:12:06,370 --> 00:12:11,610
以确保代码的每一位现在都变成了机器代码。
To make sure that every single bit of code is now turned into machine code.

191
00:12:11,620 --> 00:12:12,010
好的。
OK.

192
00:12:12,190 --> 00:12:17,110
现在我们得到这个机器代码，剩下的唯一步骤就是将这个机器代码安装到
So the only step that remains now that we've got this machine code is to install that machine code in

193
00:12:17,110 --> 00:12:20,220
在我们的道路上需要的地方，它才能真正起作用。
the required places on our path for it to actually work.

194
00:12:20,220 --> 00:12:25,540
我们可以做到这一点的方法是使用伪sudo make install。
And the way that we can do that is using the pseudo sudo make install.

195
00:12:25,550 --> 00:12:31,270
好的，来吧，如果我看到适合安装或进行安装的屏幕，它所做的就是安装所有
OK come on if I see the screen to suit or make install what it's doing is it's installing all of the

196
00:12:31,270 --> 00:12:32,190
诸如此类的东西。
stuff like that.

197
00:12:32,200 --> 00:12:33,100
那是非常非常快的。
That was very very quick.

198
00:12:33,100 --> 00:12:38,350
我们现在已经安装了此版本8.2附带的每个不同的软件
We've now installed each of the different pieces of software that came with this version 8.2 out of

199
00:12:38,350 --> 00:12:39,990
核心实用程序包。
the core utils package.

200
00:12:40,090 --> 00:12:40,630
好的。
OK.

201
00:12:40,720 --> 00:12:43,620
那么让我们来看看它是如何工作的。
So let's take a look at how that works.

202
00:12:43,630 --> 00:12:47,360
好的，那么如果我们关闭航站楼，然后重新开放。
OK so if we just close our terminal and reopen it again then.

203
00:12:47,380 --> 00:12:52,180
现在，如果我们运行ls命令，我们可以看到它会说你好，漂亮的人们。
Now if we run the ls command we can see that it says hello there beautiful people.

204
00:12:52,210 --> 00:12:56,740
因为我们修改了代码并安装了它。
Every time that it runs because we modified our code and installed it.

205
00:12:56,740 --> 00:12:59,840
这真是太棒了。
How awesome is that.

206
00:12:59,840 --> 00:13:03,040
对，所以开放源码和自由软件万岁。
Right so hooray for open source and free software.

207
00:13:03,040 --> 00:13:07,620
所以这实际上是一个比我在这里展示的要快得多的过程。
So this is actually a much faster process in reality than what I've shown you here.

208
00:13:07,630 --> 00:13:13,150
因此，要更改回原样，我们只需重写源代码，使用make重新编译，然后使用make重新安装
So to change back we would just rewrite the source code recompile with make then re-install with make

209
00:13:13,150 --> 00:13:13,900
安装。
install.

210
00:13:13,900 --> 00:13:19,780
所以，如果我回到我们的下载，好的，当你好一点的时候，它实际上是一个更快的过程
So if I head back to our downloads OK it's actually a much faster process when you get a bit better

211
00:13:19,780 --> 00:13:20,380
带着它。
with it.

212
00:13:20,380 --> 00:13:22,710
所以我们在这里，我们在召唤你远方。
So here we are we're in our call you far.

213
00:13:22,710 --> 00:13:27,390
我们将转到我们在那里的库的源代码。
We're going to go over to our source code for the library in there.

214
00:13:27,400 --> 00:13:27,840
好的。
OK.

215
00:13:27,940 --> 00:13:31,250
那我们就去Nonno LS Dotsie吧。
So let's go to Nonno LS Dotsie.

216
00:13:31,360 --> 00:13:35,220
我们去1443号线吧。
Let's head over to line 1443.

217
00:13:35,350 --> 00:13:37,710
我要删除我放在那里的这行。
I'm going to delete this line that I put in there.

218
00:13:37,790 --> 00:13:38,900
保存文件。
Save the file.

219
00:13:38,980 --> 00:13:39,510
好的。
OK.

220
00:13:39,610 --> 00:13:49,380
现在如果我现在可以清空屏幕，我们要做的就是做sudo make install。
Now if I could clear the screen now will we have to do is do make sudo make install.

221
00:13:49,630 --> 00:13:51,020
哦，因为我不是，我放错文件夹了。
Oh because I'm not I'm in the wrong folder.

222
00:13:51,040 --> 00:14:00,200
现在我们转到make和sudo make install，现在注意make命令是如何真正编译
There we go make and sudo make install so now notice how the make command is just really compiling the

223
00:14:00,200 --> 00:14:02,640
LS命令，因为它会注意到不同之处。
ls command because it notices that what's different.

224
00:14:02,640 --> 00:14:08,990
I我们在那里输入我的密码运行，这样它就可以安装它，然后当我关闭终端并
I we run with our enter my password there so it can install it and then when I close the terminal and

225
00:14:08,990 --> 00:14:10,610
重新打开它并使用ls命令。
reopen it and use the ls command.

226
00:14:10,640 --> 00:14:11,840
现在一切都恢复正常了。
Now it's back to normal.

227
00:14:11,840 --> 00:14:13,710
所以你可以看到这是多么的快。
So you see how much faster that was right.

228
00:14:13,790 --> 00:14:19,760
一旦我们配置了C编译器一次，或者至少为软件包免费配置了一次，那么只需
Once we've configured the C-compiler once or at least for free for the package it's really fast to just

229
00:14:19,760 --> 00:14:21,990
然后去编辑它。
go and edit edit it thereafter.

230
00:14:22,040 --> 00:14:23,410
好的。
OK.

231
00:14:23,720 --> 00:14:28,100
这是因为make命令也知道它只需要重新编译受影响的代码
That's because the make command knew as well that it only needed to recompile the code that was affected

232
00:14:28,310 --> 00:14:32,590
通过更改，而不是整个包，这是我们第一次这样做时对系统来说是新的。
by the change not the whole package which was new to the system the first time we did it.

233
00:14:32,610 --> 00:14:34,700
所以Make是一个非常聪明的程序。
So make is a very clever program.

234
00:14:34,820 --> 00:14:40,220
正如我所说的，现在我们已经安装了新版本的ELAS程序。
And as I say now that we've installed the new version of ELAS program now hello the people message has

235
00:14:40,400 --> 00:14:40,980
消失了。
disappeared.

236
00:14:41,000 --> 00:14:43,790
它又回到了原来的样子。
And it's back the way that it was.

237
00:14:43,820 --> 00:14:47,970
这就是你们这些漂亮的人，在这个视频中，你们已经看到了如何从新的
So there you are you beautiful people in this video you've seen how to access source code from the new

238
00:14:47,980 --> 00:14:54,410
旧网站必须修改源代码以及如何使用配置make和make install进行安装
the old web site had to modify that source code and how to use configure make and make install to install

239
00:14:54,410 --> 00:14:55,480
新软件。
the new software.

240
00:14:55,490 --> 00:15:00,410
现在最棒的是，您可以访问和修改新Linux操作系统上所有内容的源代码
Now the great thing is you can access and modify the source code for everything on a new Linux operating

241
00:15:00,410 --> 00:15:00,910
系统。
system.

242
00:15:01,010 --> 00:15:05,930
如果你愿意行使它，你对你的计算机的工作方式有绝对的权力。
And if you care to exercise it you have absolute power over how your computer works.

243
00:15:05,930 --> 00:15:11,440
因此，希望您能看到在您的计算机上运行开放源码自由软件是一项巨大的资产。
So hopefully you can see how having open source free software running on your computer is a great asset.

244
00:15:11,520 --> 00:15:16,540
您还可以欣赏这样一个系统的先驱们为构建它所付出的努力。
You also you can appreciate the effort that the pioneers of such a system took to build it.

245
00:15:16,730 --> 00:15:19,700
但我们在这段视频中经历的过程相对较长。
But the process that we went through in this video is relatively lengthy.

246
00:15:19,700 --> 00:15:23,230
有时你只想安装软件，然后继续做你正在做的事情。
And sometimes you just want to install software and get on with what you were doing.

247
00:15:23,240 --> 00:15:28,850
因此，在所谓的软件中有大量维护和预编译的代码
So for this there are massive bodies of maintained and pre-compiled code in what is known as the software

248
00:15:28,910 --> 00:15:34,370
存储库，我们使用本节中的存储库实际安装Ganu C编译器和
repositories and we use the repositories in this section actually to install the Ganu C-compiler and

249
00:15:34,370 --> 00:15:38,120
make命令和软件存储库是用来安装软件的。
the make command and software repositories are what you'll use to install software.

250
00:15:38,120 --> 00:15:43,790
99%的情况下，它们都有很多非常酷的功能，所以现在你明白了
99 percent of the time and they come with so many really cool features so now that you understand that

251
00:15:43,790 --> 00:15:49,160
是的，您可以手动查找源代码来修改您的计算机的工作方式。
yes you can look up source code to modify how your computer works however you like manually.

252
00:15:49,160 --> 00:15:53,780
让我们来看看软件存储库是如何让您访问大量软件库的
Let's take a look at how the software repositories which give you access to a massive library of software

253
00:15:54,020 --> 00:15:56,230
这是Priore预编译好的，可以开始使用了。
that is Priore pre-compiled and ready to go.

254
00:15:56,240 --> 00:15:58,300
有些人也会看看他们是如何工作的。
Some will look at how they work as well.

255
00:15:58,400 --> 00:16:01,580
好了，我会在下一个视频中见到你。
So for all that goodness I'll see you in the next video.

